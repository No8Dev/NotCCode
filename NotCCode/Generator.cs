using System;
using System.IO;
using Antlr4.Runtime;
using Microsoft.CodeAnalysis;

namespace NotCCode;

[Generator]
public class NotCIncrementalGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        Console.WriteLine("Initialize");

        IncrementalValuesProvider<AdditionalText> sourceFiles = context.AdditionalTextsProvider.Where(
            additionText => additionText.Path.EndsWith(".notc"));

        IncrementalValuesProvider<SourceInfo> sourceInfoProvider = 
            sourceFiles.Select((additionalText, cancellationToken) =>
            {
                Console.WriteLine($"Setup name and content: {additionalText.Path}");

                var filename = Path.GetFullPath(additionalText.Path);
                var name = Path.GetFileNameWithoutExtension(additionalText.Path);
                var source = additionalText.GetText(cancellationToken)!.ToString();

                return new SourceInfo(filename, name, source);
            });
        
        context.RegisterSourceOutput(
            sourceInfoProvider,
            (spc, info) =>
            {
                Console.WriteLine($"Registered Converter: {info.Filename}");

                var converter = new NotCConverter(info);
                converter.Go();

                var outputSource = "// <auto-generated/>\n" + converter.Result;
                
                spc.AddSource(info.Name, outputSource);
            });
    }
}

public class SourceInfo
{
    public readonly string Filename;
    public readonly string Name;
    public readonly string Source;

    public SourceInfo(string filename, string name, string source)
    {
        Filename = filename;
        Name = name;
        Source = source;
    }
}
