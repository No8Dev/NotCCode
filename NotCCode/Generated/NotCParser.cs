//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./NotCParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace NotCCode {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class NotCParser : NotCParserBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		BYTE_ORDER_MARK=1, SINGLE_LINE_DOC_COMMENT=2, EMPTY_DELIMITED_DOC_COMMENT=3, 
		DELIMITED_DOC_COMMENT=4, SINGLE_LINE_COMMENT=5, DELIMITED_COMMENT=6, WHITESPACES=7, 
		SHARP=8, ADD=9, ALIAS=10, ARGLIST=11, AS=12, ASCENDING=13, ASYNC=14, AWAIT=15, 
		BASE=16, BOOL=17, BREAK=18, BY=19, BYTE=20, CASE=21, CATCH=22, CHAR=23, 
		CHECKED=24, CONST=25, CONTINUE=26, DECIMAL=27, DEFAULT=28, DELEGATE=29, 
		DESCENDING=30, DO=31, DOUBLE=32, DYNAMIC=33, ELSE=34, ENUM=35, EQUALS=36, 
		EVENT=37, EXPLICIT=38, EXTERN=39, FALSE=40, FINALLY=41, FIXED=42, FLOAT=43, 
		FOR=44, FOREACH=45, FROM=46, GET=47, GOTO=48, GROUP=49, IF=50, IMPLICIT=51, 
		IN=52, INT=53, INTERFACE=54, INTERNAL=55, INTO=56, IS=57, JOIN=58, LET=59, 
		LOCK=60, LONG=61, MODULE=62, NAMEOF=63, NAMESPACE=64, NEW=65, NULL_=66, 
		OBJECT=67, ON=68, OPERATOR=69, ORDERBY=70, OUT=71, PARAMS=72, PRIVATE=73, 
		PUBLIC=74, READONLY=75, REF=76, REMOVE=77, RETURN=78, SBYTE=79, SELECT=80, 
		SET=81, SHORT=82, SIZEOF=83, STACKALLOC=84, STATIC=85, STRING=86, STRUCT=87, 
		SWITCH=88, THROW=89, TRUE=90, TRY=91, TYPEOF=92, UINT=93, ULONG=94, UNCHECKED=95, 
		UNMANAGED=96, UNSAFE=97, USHORT=98, USING=99, VAR=100, VOID=101, VOLATILE=102, 
		WHEN=103, WHERE=104, WHILE=105, YIELD=106, IDENTIFIER=107, LITERAL_ACCESS=108, 
		INTEGER_LITERAL=109, HEX_INTEGER_LITERAL=110, BIN_INTEGER_LITERAL=111, 
		REAL_LITERAL=112, CHARACTER_LITERAL=113, REGULAR_STRING=114, VERBATIUM_STRING=115, 
		INTERPOLATED_REGULAR_STRING_START=116, INTERPOLATED_VERBATIUM_STRING_START=117, 
		OPEN_BRACE=118, CLOSE_BRACE=119, OPEN_BRACKET=120, CLOSE_BRACKET=121, 
		OPEN_PARENS=122, CLOSE_PARENS=123, DOT=124, COMMA=125, COLON=126, SEMICOLON=127, 
		PLUS=128, MINUS=129, STAR=130, DIV=131, PERCENT=132, AMP=133, BITWISE_OR=134, 
		CARET=135, BANG=136, TILDE=137, ASSIGNMENT=138, LT=139, GT=140, INTERR=141, 
		DOUBLE_COLON=142, OP_COALESCING=143, OP_INC=144, OP_DEC=145, OP_AND=146, 
		OP_OR=147, OP_PTR=148, OP_EQ=149, OP_NE=150, OP_LE=151, OP_GE=152, OP_ADD_ASSIGNMENT=153, 
		OP_SUB_ASSIGNMENT=154, OP_MULT_ASSIGNMENT=155, OP_DIV_ASSIGNMENT=156, 
		OP_MOD_ASSIGNMENT=157, OP_AND_ASSIGNMENT=158, OP_OR_ASSIGNMENT=159, OP_XOR_ASSIGNMENT=160, 
		OP_LEFT_SHIFT=161, OP_LEFT_SHIFT_ASSIGNMENT=162, OP_COALESCING_ASSIGNMENT=163, 
		OP_RANGE=164, DOUBLE_CURLY_INSIDE=165, OPEN_BRACE_INSIDE=166, REGULAR_CHAR_INSIDE=167, 
		VERBATIUM_DOUBLE_QUOTE_INSIDE=168, DOUBLE_QUOTE_INSIDE=169, REGULAR_STRING_INSIDE=170, 
		VERBATIUM_INSIDE_STRING=171, CLOSE_BRACE_INSIDE=172, FORMAT_STRING=173, 
		DIRECTIVE_WHITESPACES=174, DIGITS=175, DEFINE=176, UNDEF=177, ELIF=178, 
		ENDIF=179, LINE=180, ERROR=181, WARNING=182, REGION=183, ENDREGION=184, 
		PRAGMA=185, NULLABLE=186, DIRECTIVE_HIDDEN=187, CONDITIONAL_SYMBOL=188, 
		DIRECTIVE_NEW_LINE=189, TEXT=190, DOUBLE_CURLY_CLOSE_INSIDE=191;
	public const int
		RULE_compilation_unit = 0, RULE_namespace_or_type_name = 1, RULE_type_ = 2, 
		RULE_base_type = 3, RULE_tuple_type = 4, RULE_tuple_element = 5, RULE_simple_type = 6, 
		RULE_numeric_type = 7, RULE_integral_type = 8, RULE_floating_point_type = 9, 
		RULE_class_type = 10, RULE_type_argument_list = 11, RULE_argument_list = 12, 
		RULE_argument = 13, RULE_expression = 14, RULE_non_assignment_expression = 15, 
		RULE_assignment = 16, RULE_assignment_operator = 17, RULE_conditional_expression = 18, 
		RULE_null_coalescing_expression = 19, RULE_conditional_or_expression = 20, 
		RULE_conditional_and_expression = 21, RULE_inclusive_or_expression = 22, 
		RULE_exclusive_or_expression = 23, RULE_and_expression = 24, RULE_equality_expression = 25, 
		RULE_relational_expression = 26, RULE_shift_expression = 27, RULE_additive_expression = 28, 
		RULE_multiplicative_expression = 29, RULE_switch_expression = 30, RULE_switch_expression_arms = 31, 
		RULE_switch_expression_arm = 32, RULE_range_expression = 33, RULE_unary_expression = 34, 
		RULE_cast_expression = 35, RULE_primary_expression = 36, RULE_primary_expression_start = 37, 
		RULE_throwable_expression = 38, RULE_throw_expression = 39, RULE_member_access = 40, 
		RULE_bracket_expression = 41, RULE_indexer_argument = 42, RULE_predefined_type = 43, 
		RULE_expression_list = 44, RULE_object_or_collection_initializer = 45, 
		RULE_object_initializer = 46, RULE_member_initializer_list = 47, RULE_member_initializer = 48, 
		RULE_initializer_value = 49, RULE_collection_initializer = 50, RULE_element_initializer = 51, 
		RULE_anonymous_object_initializer = 52, RULE_member_declarator_list = 53, 
		RULE_member_declarator = 54, RULE_unbound_type_name = 55, RULE_generic_dimension_specifier = 56, 
		RULE_isType = 57, RULE_isTypePatternArms = 58, RULE_isTypePatternArm = 59, 
		RULE_lambda_expression = 60, RULE_anonymous_function_signature = 61, RULE_explicit_anonymous_function_parameter_list = 62, 
		RULE_explicit_anonymous_function_parameter = 63, RULE_implicit_anonymous_function_parameter_list = 64, 
		RULE_anonymous_function_body = 65, RULE_query_expression = 66, RULE_from_clause = 67, 
		RULE_query_body = 68, RULE_query_body_clause = 69, RULE_let_clause = 70, 
		RULE_where_clause = 71, RULE_combined_join_clause = 72, RULE_orderby_clause = 73, 
		RULE_ordering = 74, RULE_select_or_group_clause = 75, RULE_query_continuation = 76, 
		RULE_statement = 77, RULE_declarationStatement = 78, RULE_local_function_declaration = 79, 
		RULE_local_function_header = 80, RULE_local_function_modifiers = 81, RULE_local_function_body = 82, 
		RULE_labeled_Statement = 83, RULE_embedded_statement = 84, RULE_simple_embedded_statement = 85, 
		RULE_block = 86, RULE_local_variable_declaration = 87, RULE_local_variable_type = 88, 
		RULE_local_variable_declarator = 89, RULE_local_variable_initializer = 90, 
		RULE_local_constant_declaration = 91, RULE_if_body = 92, RULE_switch_section = 93, 
		RULE_switch_label = 94, RULE_case_guard = 95, RULE_statement_list = 96, 
		RULE_for_initializer = 97, RULE_for_iterator = 98, RULE_catch_clauses = 99, 
		RULE_specific_catch_clause = 100, RULE_general_catch_clause = 101, RULE_exception_filter = 102, 
		RULE_finally_clause = 103, RULE_resource_acquisition = 104, RULE_namespace_declaration = 105, 
		RULE_qualified_identifier = 106, RULE_namespace_body = 107, RULE_extern_alias_directives = 108, 
		RULE_extern_alias_directive = 109, RULE_using_directives = 110, RULE_using_directive = 111, 
		RULE_namespace_member_declarations = 112, RULE_namespace_member_declaration = 113, 
		RULE_type_declaration = 114, RULE_qualified_alias_member = 115, RULE_type_parameter_list = 116, 
		RULE_type_parameter = 117, RULE_class_base = 118, RULE_interface_type_list = 119, 
		RULE_type_parameter_constraints_clauses = 120, RULE_type_parameter_constraints_clause = 121, 
		RULE_type_parameter_constraints = 122, RULE_primary_constraint = 123, 
		RULE_secondary_constraints = 124, RULE_constructor_constraint = 125, RULE_class_body = 126, 
		RULE_class_member_declarations = 127, RULE_class_member_declaration = 128, 
		RULE_comments = 129, RULE_comment = 130, RULE_all_member_modifiers = 131, 
		RULE_all_member_modifier = 132, RULE_common_member_declaration = 133, 
		RULE_typed_member_declaration = 134, RULE_constant_declarators = 135, 
		RULE_constant_declarator = 136, RULE_variable_declarators = 137, RULE_variable_declarator = 138, 
		RULE_variable_initializer = 139, RULE_return_type = 140, RULE_member_name = 141, 
		RULE_method_body = 142, RULE_formal_parameter_list = 143, RULE_fixed_parameters = 144, 
		RULE_fixed_parameter = 145, RULE_parameter_modifier = 146, RULE_parameter_array = 147, 
		RULE_accessor_declarations = 148, RULE_get_accessor_declaration = 149, 
		RULE_set_accessor_declaration = 150, RULE_accessor_modifier = 151, RULE_accessor_body = 152, 
		RULE_event_accessor_declarations = 153, RULE_add_accessor_declaration = 154, 
		RULE_remove_accessor_declaration = 155, RULE_overloadable_operator = 156, 
		RULE_conversion_operator_declarator = 157, RULE_constructor_initializer = 158, 
		RULE_body = 159, RULE_struct_interfaces = 160, RULE_struct_body = 161, 
		RULE_struct_member_declaration = 162, RULE_array_type = 163, RULE_rank_specifier = 164, 
		RULE_array_initializer = 165, RULE_variant_type_parameter_list = 166, 
		RULE_variant_type_parameter = 167, RULE_variance_annotation = 168, RULE_interface_base = 169, 
		RULE_interface_body = 170, RULE_interface_member_declaration = 171, RULE_interface_accessors = 172, 
		RULE_enum_base = 173, RULE_enum_body = 174, RULE_enum_member_declaration = 175, 
		RULE_global_attribute_section = 176, RULE_global_attribute_target = 177, 
		RULE_attributes = 178, RULE_attribute_section = 179, RULE_attribute_target = 180, 
		RULE_attribute_list = 181, RULE_attribute = 182, RULE_attribute_argument = 183, 
		RULE_pointer_type = 184, RULE_fixed_pointer_declarators = 185, RULE_fixed_pointer_declarator = 186, 
		RULE_fixed_pointer_initializer = 187, RULE_fixed_size_buffer_declarator = 188, 
		RULE_stackalloc_initializer = 189, RULE_right_arrow = 190, RULE_right_shift = 191, 
		RULE_right_shift_assignment = 192, RULE_literal = 193, RULE_boolean_literal = 194, 
		RULE_string_literal = 195, RULE_interpolated_regular_string = 196, RULE_interpolated_verbatium_string = 197, 
		RULE_interpolated_regular_string_part = 198, RULE_interpolated_verbatium_string_part = 199, 
		RULE_interpolated_string_expression = 200, RULE_keyword = 201, RULE_struct_definition = 202, 
		RULE_interface_definition = 203, RULE_enum_definition = 204, RULE_delegate_definition = 205, 
		RULE_event_declaration = 206, RULE_field_declaration = 207, RULE_property_declaration = 208, 
		RULE_constant_declaration = 209, RULE_destructor_definition = 210, RULE_constructor_declaration = 211, 
		RULE_method_declaration = 212, RULE_method_member_name = 213, RULE_operator_declaration = 214, 
		RULE_arg_declaration = 215, RULE_method_invocation = 216, RULE_object_creation_expression = 217, 
		RULE_identifier = 218;
	public static readonly string[] ruleNames = {
		"compilation_unit", "namespace_or_type_name", "type_", "base_type", "tuple_type", 
		"tuple_element", "simple_type", "numeric_type", "integral_type", "floating_point_type", 
		"class_type", "type_argument_list", "argument_list", "argument", "expression", 
		"non_assignment_expression", "assignment", "assignment_operator", "conditional_expression", 
		"null_coalescing_expression", "conditional_or_expression", "conditional_and_expression", 
		"inclusive_or_expression", "exclusive_or_expression", "and_expression", 
		"equality_expression", "relational_expression", "shift_expression", "additive_expression", 
		"multiplicative_expression", "switch_expression", "switch_expression_arms", 
		"switch_expression_arm", "range_expression", "unary_expression", "cast_expression", 
		"primary_expression", "primary_expression_start", "throwable_expression", 
		"throw_expression", "member_access", "bracket_expression", "indexer_argument", 
		"predefined_type", "expression_list", "object_or_collection_initializer", 
		"object_initializer", "member_initializer_list", "member_initializer", 
		"initializer_value", "collection_initializer", "element_initializer", 
		"anonymous_object_initializer", "member_declarator_list", "member_declarator", 
		"unbound_type_name", "generic_dimension_specifier", "isType", "isTypePatternArms", 
		"isTypePatternArm", "lambda_expression", "anonymous_function_signature", 
		"explicit_anonymous_function_parameter_list", "explicit_anonymous_function_parameter", 
		"implicit_anonymous_function_parameter_list", "anonymous_function_body", 
		"query_expression", "from_clause", "query_body", "query_body_clause", 
		"let_clause", "where_clause", "combined_join_clause", "orderby_clause", 
		"ordering", "select_or_group_clause", "query_continuation", "statement", 
		"declarationStatement", "local_function_declaration", "local_function_header", 
		"local_function_modifiers", "local_function_body", "labeled_Statement", 
		"embedded_statement", "simple_embedded_statement", "block", "local_variable_declaration", 
		"local_variable_type", "local_variable_declarator", "local_variable_initializer", 
		"local_constant_declaration", "if_body", "switch_section", "switch_label", 
		"case_guard", "statement_list", "for_initializer", "for_iterator", "catch_clauses", 
		"specific_catch_clause", "general_catch_clause", "exception_filter", "finally_clause", 
		"resource_acquisition", "namespace_declaration", "qualified_identifier", 
		"namespace_body", "extern_alias_directives", "extern_alias_directive", 
		"using_directives", "using_directive", "namespace_member_declarations", 
		"namespace_member_declaration", "type_declaration", "qualified_alias_member", 
		"type_parameter_list", "type_parameter", "class_base", "interface_type_list", 
		"type_parameter_constraints_clauses", "type_parameter_constraints_clause", 
		"type_parameter_constraints", "primary_constraint", "secondary_constraints", 
		"constructor_constraint", "class_body", "class_member_declarations", "class_member_declaration", 
		"comments", "comment", "all_member_modifiers", "all_member_modifier", 
		"common_member_declaration", "typed_member_declaration", "constant_declarators", 
		"constant_declarator", "variable_declarators", "variable_declarator", 
		"variable_initializer", "return_type", "member_name", "method_body", "formal_parameter_list", 
		"fixed_parameters", "fixed_parameter", "parameter_modifier", "parameter_array", 
		"accessor_declarations", "get_accessor_declaration", "set_accessor_declaration", 
		"accessor_modifier", "accessor_body", "event_accessor_declarations", "add_accessor_declaration", 
		"remove_accessor_declaration", "overloadable_operator", "conversion_operator_declarator", 
		"constructor_initializer", "body", "struct_interfaces", "struct_body", 
		"struct_member_declaration", "array_type", "rank_specifier", "array_initializer", 
		"variant_type_parameter_list", "variant_type_parameter", "variance_annotation", 
		"interface_base", "interface_body", "interface_member_declaration", "interface_accessors", 
		"enum_base", "enum_body", "enum_member_declaration", "global_attribute_section", 
		"global_attribute_target", "attributes", "attribute_section", "attribute_target", 
		"attribute_list", "attribute", "attribute_argument", "pointer_type", "fixed_pointer_declarators", 
		"fixed_pointer_declarator", "fixed_pointer_initializer", "fixed_size_buffer_declarator", 
		"stackalloc_initializer", "right_arrow", "right_shift", "right_shift_assignment", 
		"literal", "boolean_literal", "string_literal", "interpolated_regular_string", 
		"interpolated_verbatium_string", "interpolated_regular_string_part", "interpolated_verbatium_string_part", 
		"interpolated_string_expression", "keyword", "struct_definition", "interface_definition", 
		"enum_definition", "delegate_definition", "event_declaration", "field_declaration", 
		"property_declaration", "constant_declaration", "destructor_definition", 
		"constructor_declaration", "method_declaration", "method_member_name", 
		"operator_declaration", "arg_declaration", "method_invocation", "object_creation_expression", 
		"identifier"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\\u00EF\\u00BB\\u00BF'", null, "'/***/'", null, null, null, null, 
		"'#'", "'add'", "'alias'", "'__arglist'", "'as'", "'ascending'", "'async'", 
		"'await'", "'base'", "'bool'", "'break'", "'by'", "'byte'", "'case'", 
		"'catch'", "'char'", "'checked'", "'const'", "'continue'", "'decimal'", 
		"'default'", "'delegate'", "'descending'", "'do'", "'double'", "'dynamic'", 
		"'else'", "'enum'", "'equals'", "'event'", "'explicit'", "'extern'", "'false'", 
		"'finally'", "'fixed'", "'float'", "'for'", "'foreach'", "'from'", "'get'", 
		"'goto'", "'group'", "'if'", "'implicit'", "'in'", "'int'", "'interface'", 
		"'internal'", "'into'", "'is'", "'join'", "'let'", "'lock'", "'long'", 
		"'module'", "'nameof'", "'namespace'", "'new'", "'null'", "'object'", 
		"'on'", "'operator'", "'orderby'", "'out'", "'params'", "'private'", "'public'", 
		"'readonly'", "'ref'", "'remove'", "'return'", "'sbyte'", "'select'", 
		"'set'", "'short'", "'sizeof'", "'stackalloc'", "'static'", "'string'", 
		"'struct'", "'switch'", "'throw'", "'true'", "'try'", "'typeof'", "'uint'", 
		"'ulong'", "'unchecked'", "'unmanaged'", "'unsafe'", "'ushort'", "'using'", 
		"'var'", "'void'", "'volatile'", "'when'", "'where'", "'while'", "'yield'", 
		null, null, null, null, null, null, null, null, null, null, null, "'{'", 
		"'}'", "'['", "']'", "'('", "')'", "'.'", "','", "':'", "';'", "'+'", 
		"'-'", "'*'", "'/'", "'%'", "'&'", "'|'", "'^'", "'!'", "'~'", "'='", 
		"'<'", "'>'", "'?'", "'::'", "'??'", "'++'", "'--'", "'&&'", "'||'", "'->'", 
		"'=='", "'!='", "'<='", "'>='", "'+='", "'-='", "'*='", "'/='", "'%='", 
		"'&='", "'|='", "'^='", "'<<'", "'<<='", "'??='", "'..'", "'{{'", null, 
		null, null, null, null, null, null, null, null, null, "'define'", "'undef'", 
		"'elif'", "'endif'", "'line'", null, null, null, null, null, null, "'hidden'", 
		null, null, null, "'}}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BYTE_ORDER_MARK", "SINGLE_LINE_DOC_COMMENT", "EMPTY_DELIMITED_DOC_COMMENT", 
		"DELIMITED_DOC_COMMENT", "SINGLE_LINE_COMMENT", "DELIMITED_COMMENT", "WHITESPACES", 
		"SHARP", "ADD", "ALIAS", "ARGLIST", "AS", "ASCENDING", "ASYNC", "AWAIT", 
		"BASE", "BOOL", "BREAK", "BY", "BYTE", "CASE", "CATCH", "CHAR", "CHECKED", 
		"CONST", "CONTINUE", "DECIMAL", "DEFAULT", "DELEGATE", "DESCENDING", "DO", 
		"DOUBLE", "DYNAMIC", "ELSE", "ENUM", "EQUALS", "EVENT", "EXPLICIT", "EXTERN", 
		"FALSE", "FINALLY", "FIXED", "FLOAT", "FOR", "FOREACH", "FROM", "GET", 
		"GOTO", "GROUP", "IF", "IMPLICIT", "IN", "INT", "INTERFACE", "INTERNAL", 
		"INTO", "IS", "JOIN", "LET", "LOCK", "LONG", "MODULE", "NAMEOF", "NAMESPACE", 
		"NEW", "NULL_", "OBJECT", "ON", "OPERATOR", "ORDERBY", "OUT", "PARAMS", 
		"PRIVATE", "PUBLIC", "READONLY", "REF", "REMOVE", "RETURN", "SBYTE", "SELECT", 
		"SET", "SHORT", "SIZEOF", "STACKALLOC", "STATIC", "STRING", "STRUCT", 
		"SWITCH", "THROW", "TRUE", "TRY", "TYPEOF", "UINT", "ULONG", "UNCHECKED", 
		"UNMANAGED", "UNSAFE", "USHORT", "USING", "VAR", "VOID", "VOLATILE", "WHEN", 
		"WHERE", "WHILE", "YIELD", "IDENTIFIER", "LITERAL_ACCESS", "INTEGER_LITERAL", 
		"HEX_INTEGER_LITERAL", "BIN_INTEGER_LITERAL", "REAL_LITERAL", "CHARACTER_LITERAL", 
		"REGULAR_STRING", "VERBATIUM_STRING", "INTERPOLATED_REGULAR_STRING_START", 
		"INTERPOLATED_VERBATIUM_STRING_START", "OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACKET", 
		"CLOSE_BRACKET", "OPEN_PARENS", "CLOSE_PARENS", "DOT", "COMMA", "COLON", 
		"SEMICOLON", "PLUS", "MINUS", "STAR", "DIV", "PERCENT", "AMP", "BITWISE_OR", 
		"CARET", "BANG", "TILDE", "ASSIGNMENT", "LT", "GT", "INTERR", "DOUBLE_COLON", 
		"OP_COALESCING", "OP_INC", "OP_DEC", "OP_AND", "OP_OR", "OP_PTR", "OP_EQ", 
		"OP_NE", "OP_LE", "OP_GE", "OP_ADD_ASSIGNMENT", "OP_SUB_ASSIGNMENT", "OP_MULT_ASSIGNMENT", 
		"OP_DIV_ASSIGNMENT", "OP_MOD_ASSIGNMENT", "OP_AND_ASSIGNMENT", "OP_OR_ASSIGNMENT", 
		"OP_XOR_ASSIGNMENT", "OP_LEFT_SHIFT", "OP_LEFT_SHIFT_ASSIGNMENT", "OP_COALESCING_ASSIGNMENT", 
		"OP_RANGE", "DOUBLE_CURLY_INSIDE", "OPEN_BRACE_INSIDE", "REGULAR_CHAR_INSIDE", 
		"VERBATIUM_DOUBLE_QUOTE_INSIDE", "DOUBLE_QUOTE_INSIDE", "REGULAR_STRING_INSIDE", 
		"VERBATIUM_INSIDE_STRING", "CLOSE_BRACE_INSIDE", "FORMAT_STRING", "DIRECTIVE_WHITESPACES", 
		"DIGITS", "DEFINE", "UNDEF", "ELIF", "ENDIF", "LINE", "ERROR", "WARNING", 
		"REGION", "ENDREGION", "PRAGMA", "NULLABLE", "DIRECTIVE_HIDDEN", "CONDITIONAL_SYMBOL", 
		"DIRECTIVE_NEW_LINE", "TEXT", "DOUBLE_CURLY_CLOSE_INSIDE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "NotCParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static NotCParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public NotCParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public NotCParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Compilation_unitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(NotCParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTE_ORDER_MARK() { return GetToken(NotCParser.BYTE_ORDER_MARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Extern_alias_directivesContext extern_alias_directives() {
			return GetRuleContext<Extern_alias_directivesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Using_directivesContext using_directives() {
			return GetRuleContext<Using_directivesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Global_attribute_sectionContext[] global_attribute_section() {
			return GetRuleContexts<Global_attribute_sectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Global_attribute_sectionContext global_attribute_section(int i) {
			return GetRuleContext<Global_attribute_sectionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_member_declarationsContext namespace_member_declarations() {
			return GetRuleContext<Namespace_member_declarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_member_declarationsContext class_member_declarations() {
			return GetRuleContext<Class_member_declarationsContext>(0);
		}
		public Compilation_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilation_unit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterCompilation_unit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitCompilation_unit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilation_unit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compilation_unitContext compilation_unit() {
		Compilation_unitContext _localctx = new Compilation_unitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilation_unit);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 439;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BYTE_ORDER_MARK) {
				{
				State = 438;
				Match(BYTE_ORDER_MARK);
				}
			}

			State = 442;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 441;
				extern_alias_directives();
				}
				break;
			}
			State = 445;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 444;
				using_directives();
				}
			}

			State = 450;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 447;
					global_attribute_section();
					}
					} 
				}
				State = 452;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			State = 454;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 453;
				namespace_member_declarations();
				}
				break;
			}
			State = 457;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5914694178446840196L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 180151663161761581L) != 0) || _la==TILDE) {
				{
				State = 456;
				class_member_declarations();
				}
			}

			State = 459;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_or_type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_alias_memberContext qualified_alias_member() {
			return GetRuleContext<Qualified_alias_memberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(NotCParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(NotCParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_argument_listContext[] type_argument_list() {
			return GetRuleContexts<Type_argument_listContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_argument_listContext type_argument_list(int i) {
			return GetRuleContext<Type_argument_listContext>(i);
		}
		public Namespace_or_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_or_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterNamespace_or_type_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitNamespace_or_type_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace_or_type_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_or_type_nameContext namespace_or_type_name() {
		Namespace_or_type_nameContext _localctx = new Namespace_or_type_nameContext(Context, State);
		EnterRule(_localctx, 2, RULE_namespace_or_type_name);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 466;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 461;
				identifier();
				State = 463;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
				case 1:
					{
					State = 462;
					type_argument_list();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 465;
				qualified_alias_member();
				}
				break;
			}
			State = 475;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 468;
					Match(DOT);
					State = 469;
					identifier();
					State = 471;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						State = 470;
						type_argument_list();
						}
						break;
					}
					}
					} 
				}
				State = 477;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Base_typeContext base_type() {
			return GetRuleContext<Base_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTERR() { return GetTokens(NotCParser.INTERR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERR(int i) {
			return GetToken(NotCParser.INTERR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rank_specifierContext[] rank_specifier() {
			return GetRuleContexts<Rank_specifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rank_specifierContext rank_specifier(int i) {
			return GetRuleContext<Rank_specifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STAR() { return GetTokens(NotCParser.STAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR(int i) {
			return GetToken(NotCParser.STAR, i);
		}
		public Type_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterType_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitType_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_Context type_() {
		Type_Context _localctx = new Type_Context(Context, State);
		EnterRule(_localctx, 4, RULE_type_);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 478;
			base_type();
			State = 484;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 482;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case INTERR:
						{
						State = 479;
						Match(INTERR);
						}
						break;
					case OPEN_BRACKET:
						{
						State = 480;
						rank_specifier();
						}
						break;
					case STAR:
						{
						State = 481;
						Match(STAR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 486;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Base_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_typeContext simple_type() {
			return GetRuleContext<Simple_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(NotCParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(NotCParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Tuple_typeContext tuple_type() {
			return GetRuleContext<Tuple_typeContext>(0);
		}
		public Base_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_base_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterBase_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitBase_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBase_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Base_typeContext base_type() {
		Base_typeContext _localctx = new Base_typeContext(Context, State);
		EnterRule(_localctx, 6, RULE_base_type);
		try {
			State = 492;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL:
			case BYTE:
			case CHAR:
			case DECIMAL:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SBYTE:
			case SHORT:
			case UINT:
			case ULONG:
			case USHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 487;
				simple_type();
				}
				break;
			case SINGLE_LINE_DOC_COMMENT:
			case EMPTY_DELIMITED_DOC_COMMENT:
			case DELIMITED_DOC_COMMENT:
			case SINGLE_LINE_COMMENT:
			case DELIMITED_COMMENT:
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BY:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case NAMEOF:
			case OBJECT:
			case ON:
			case ORDERBY:
			case REMOVE:
			case SELECT:
			case SET:
			case STRING:
			case UNMANAGED:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 488;
				class_type();
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 489;
				Match(VOID);
				State = 490;
				Match(STAR);
				}
				break;
			case OPEN_PARENS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 491;
				tuple_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tuple_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(NotCParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Tuple_elementContext[] tuple_element() {
			return GetRuleContexts<Tuple_elementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Tuple_elementContext tuple_element(int i) {
			return GetRuleContext<Tuple_elementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(NotCParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(NotCParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(NotCParser.COMMA, i);
		}
		public Tuple_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterTuple_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitTuple_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuple_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tuple_typeContext tuple_type() {
		Tuple_typeContext _localctx = new Tuple_typeContext(Context, State);
		EnterRule(_localctx, 8, RULE_tuple_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 494;
			Match(OPEN_PARENS);
			State = 495;
			tuple_element();
			State = 498;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 496;
				Match(COMMA);
				State = 497;
				tuple_element();
				}
				}
				State = 500;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COMMA );
			State = 502;
			Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tuple_elementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Tuple_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterTuple_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitTuple_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuple_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tuple_elementContext tuple_element() {
		Tuple_elementContext _localctx = new Tuple_elementContext(Context, State);
		EnterRule(_localctx, 10, RULE_tuple_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 504;
			type_();
			State = 506;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8285849179792019844L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 932276351493L) != 0)) {
				{
				State = 505;
				identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Numeric_typeContext numeric_type() {
			return GetRuleContext<Numeric_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(NotCParser.BOOL, 0); }
		public Simple_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterSimple_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitSimple_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_typeContext simple_type() {
		Simple_typeContext _localctx = new Simple_typeContext(Context, State);
		EnterRule(_localctx, 12, RULE_simple_type);
		try {
			State = 510;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BYTE:
			case CHAR:
			case DECIMAL:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SBYTE:
			case SHORT:
			case UINT:
			case ULONG:
			case USHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 508;
				numeric_type();
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 509;
				Match(BOOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Integral_typeContext integral_type() {
			return GetRuleContext<Integral_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Floating_point_typeContext floating_point_type() {
			return GetRuleContext<Floating_point_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(NotCParser.DECIMAL, 0); }
		public Numeric_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterNumeric_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitNumeric_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_typeContext numeric_type() {
		Numeric_typeContext _localctx = new Numeric_typeContext(Context, State);
		EnterRule(_localctx, 14, RULE_numeric_type);
		try {
			State = 515;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BYTE:
			case CHAR:
			case INT:
			case LONG:
			case SBYTE:
			case SHORT:
			case UINT:
			case ULONG:
			case USHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 512;
				integral_type();
				}
				break;
			case DOUBLE:
			case FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 513;
				floating_point_type();
				}
				break;
			case DECIMAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 514;
				Match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Integral_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SBYTE() { return GetToken(NotCParser.SBYTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTE() { return GetToken(NotCParser.BYTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHORT() { return GetToken(NotCParser.SHORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USHORT() { return GetToken(NotCParser.USHORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(NotCParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINT() { return GetToken(NotCParser.UINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG() { return GetToken(NotCParser.LONG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ULONG() { return GetToken(NotCParser.ULONG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(NotCParser.CHAR, 0); }
		public Integral_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integral_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterIntegral_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitIntegral_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegral_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Integral_typeContext integral_type() {
		Integral_typeContext _localctx = new Integral_typeContext(Context, State);
		EnterRule(_localctx, 16, RULE_integral_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 517;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2314850208477872128L) != 0) || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & 573449L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Floating_point_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(NotCParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(NotCParser.DOUBLE, 0); }
		public Floating_point_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floating_point_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterFloating_point_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitFloating_point_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloating_point_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Floating_point_typeContext floating_point_type() {
		Floating_point_typeContext _localctx = new Floating_point_typeContext(Context, State);
		EnterRule(_localctx, 18, RULE_floating_point_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 519;
			_la = TokenStream.LA(1);
			if ( !(_la==DOUBLE || _la==FLOAT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_or_type_nameContext namespace_or_type_name() {
			return GetRuleContext<Namespace_or_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT() { return GetToken(NotCParser.OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DYNAMIC() { return GetToken(NotCParser.DYNAMIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(NotCParser.STRING, 0); }
		public Class_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterClass_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitClass_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_typeContext class_type() {
		Class_typeContext _localctx = new Class_typeContext(Context, State);
		EnterRule(_localctx, 20, RULE_class_type);
		try {
			State = 525;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 521;
				namespace_or_type_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 522;
				Match(OBJECT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 523;
				Match(DYNAMIC);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 524;
				Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_argument_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(NotCParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context[] type_() {
			return GetRuleContexts<Type_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_(int i) {
			return GetRuleContext<Type_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(NotCParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(NotCParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(NotCParser.COMMA, i);
		}
		public Type_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_argument_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterType_argument_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitType_argument_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_argument_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_argument_listContext type_argument_list() {
		Type_argument_listContext _localctx = new Type_argument_listContext(Context, State);
		EnterRule(_localctx, 22, RULE_type_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 527;
			Match(LT);
			State = 528;
			type_();
			State = 533;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 529;
				Match(COMMA);
				State = 530;
				type_();
				}
				}
				State = 535;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 536;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(NotCParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(NotCParser.COMMA, i);
		}
		public Argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterArgument_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitArgument_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Argument_listContext argument_list() {
		Argument_listContext _localctx = new Argument_listContext(Context, State);
		EnterRule(_localctx, 24, RULE_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 538;
			argument();
			State = 543;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 539;
				Match(COMMA);
				State = 540;
				argument();
				}
				}
				State = 545;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public IToken refout;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(NotCParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(NotCParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(NotCParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(NotCParser.OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(NotCParser.IN, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 26, RULE_argument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 549;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 546;
				identifier();
				State = 547;
				Match(COLON);
				}
				break;
			}
			State = 552;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 551;
				_localctx.refout = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 52)) & ~0x3f) == 0 && ((1L << (_la - 52)) & 17301505L) != 0)) ) {
					_localctx.refout = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 560;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 554;
				expression();
				}
				break;
			case 2:
				{
				State = 557;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
				case 1:
					{
					State = 555;
					Match(VAR);
					}
					break;
				case 2:
					{
					State = 556;
					type_();
					}
					break;
				}
				State = 559;
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Non_assignment_expressionContext non_assignment_expression() {
			return GetRuleContext<Non_assignment_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(NotCParser.REF, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_expression);
		try {
			State = 566;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 562;
				assignment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 563;
				non_assignment_expression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 564;
				Match(REF);
				State = 565;
				non_assignment_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Non_assignment_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Lambda_expressionContext lambda_expression() {
			return GetRuleContext<Lambda_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_expressionContext conditional_expression() {
			return GetRuleContext<Conditional_expressionContext>(0);
		}
		public Non_assignment_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_non_assignment_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterNon_assignment_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitNon_assignment_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNon_assignment_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Non_assignment_expressionContext non_assignment_expression() {
		Non_assignment_expressionContext _localctx = new Non_assignment_expressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_non_assignment_expression);
		try {
			State = 571;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 568;
				lambda_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 569;
				query_expression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 570;
				conditional_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_COALESCING_ASSIGNMENT() { return GetToken(NotCParser.OP_COALESCING_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Throwable_expressionContext throwable_expression() {
			return GetRuleContext<Throwable_expressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 32, RULE_assignment);
		try {
			State = 581;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 573;
				unary_expression();
				State = 574;
				assignment_operator();
				State = 575;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 577;
				unary_expression();
				State = 578;
				Match(OP_COALESCING_ASSIGNMENT);
				State = 579;
				throwable_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(NotCParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ADD_ASSIGNMENT() { return GetToken(NotCParser.OP_ADD_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_SUB_ASSIGNMENT() { return GetToken(NotCParser.OP_SUB_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MULT_ASSIGNMENT() { return GetToken(NotCParser.OP_MULT_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DIV_ASSIGNMENT() { return GetToken(NotCParser.OP_DIV_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MOD_ASSIGNMENT() { return GetToken(NotCParser.OP_MOD_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AND_ASSIGNMENT() { return GetToken(NotCParser.OP_AND_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_OR_ASSIGNMENT() { return GetToken(NotCParser.OP_OR_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_XOR_ASSIGNMENT() { return GetToken(NotCParser.OP_XOR_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LEFT_SHIFT_ASSIGNMENT() { return GetToken(NotCParser.OP_LEFT_SHIFT_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Right_shift_assignmentContext right_shift_assignment() {
			return GetRuleContext<Right_shift_assignmentContext>(0);
		}
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterAssignment_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitAssignment_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_operatorContext assignment_operator() {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(Context, State);
		EnterRule(_localctx, 34, RULE_assignment_operator);
		try {
			State = 594;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASSIGNMENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 583;
				Match(ASSIGNMENT);
				}
				break;
			case OP_ADD_ASSIGNMENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 584;
				Match(OP_ADD_ASSIGNMENT);
				}
				break;
			case OP_SUB_ASSIGNMENT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 585;
				Match(OP_SUB_ASSIGNMENT);
				}
				break;
			case OP_MULT_ASSIGNMENT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 586;
				Match(OP_MULT_ASSIGNMENT);
				}
				break;
			case OP_DIV_ASSIGNMENT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 587;
				Match(OP_DIV_ASSIGNMENT);
				}
				break;
			case OP_MOD_ASSIGNMENT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 588;
				Match(OP_MOD_ASSIGNMENT);
				}
				break;
			case OP_AND_ASSIGNMENT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 589;
				Match(OP_AND_ASSIGNMENT);
				}
				break;
			case OP_OR_ASSIGNMENT:
				EnterOuterAlt(_localctx, 8);
				{
				State = 590;
				Match(OP_OR_ASSIGNMENT);
				}
				break;
			case OP_XOR_ASSIGNMENT:
				EnterOuterAlt(_localctx, 9);
				{
				State = 591;
				Match(OP_XOR_ASSIGNMENT);
				}
				break;
			case OP_LEFT_SHIFT_ASSIGNMENT:
				EnterOuterAlt(_localctx, 10);
				{
				State = 592;
				Match(OP_LEFT_SHIFT_ASSIGNMENT);
				}
				break;
			case GT:
				EnterOuterAlt(_localctx, 11);
				{
				State = 593;
				right_shift_assignment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Null_coalescing_expressionContext null_coalescing_expression() {
			return GetRuleContext<Null_coalescing_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERR() { return GetToken(NotCParser.INTERR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Throwable_expressionContext[] throwable_expression() {
			return GetRuleContexts<Throwable_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Throwable_expressionContext throwable_expression(int i) {
			return GetRuleContext<Throwable_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(NotCParser.COLON, 0); }
		public Conditional_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterConditional_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitConditional_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_expressionContext conditional_expression() {
		Conditional_expressionContext _localctx = new Conditional_expressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_conditional_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 596;
			null_coalescing_expression();
			State = 602;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 597;
				Match(INTERR);
				State = 598;
				throwable_expression();
				State = 599;
				Match(COLON);
				State = 600;
				throwable_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Null_coalescing_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_or_expressionContext conditional_or_expression() {
			return GetRuleContext<Conditional_or_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_COALESCING() { return GetToken(NotCParser.OP_COALESCING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Null_coalescing_expressionContext null_coalescing_expression() {
			return GetRuleContext<Null_coalescing_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Throw_expressionContext throw_expression() {
			return GetRuleContext<Throw_expressionContext>(0);
		}
		public Null_coalescing_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null_coalescing_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterNull_coalescing_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitNull_coalescing_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNull_coalescing_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Null_coalescing_expressionContext null_coalescing_expression() {
		Null_coalescing_expressionContext _localctx = new Null_coalescing_expressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_null_coalescing_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 604;
			conditional_or_expression();
			State = 610;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 605;
				Match(OP_COALESCING);
				State = 608;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SINGLE_LINE_DOC_COMMENT:
				case EMPTY_DELIMITED_DOC_COMMENT:
				case DELIMITED_DOC_COMMENT:
				case SINGLE_LINE_COMMENT:
				case DELIMITED_COMMENT:
				case ADD:
				case ALIAS:
				case ARGLIST:
				case ASCENDING:
				case ASYNC:
				case AWAIT:
				case BASE:
				case BOOL:
				case BY:
				case BYTE:
				case CHAR:
				case CHECKED:
				case DECIMAL:
				case DEFAULT:
				case DELEGATE:
				case DESCENDING:
				case DOUBLE:
				case DYNAMIC:
				case EQUALS:
				case FALSE:
				case FLOAT:
				case FROM:
				case GET:
				case GROUP:
				case INT:
				case INTO:
				case JOIN:
				case LET:
				case LONG:
				case NAMEOF:
				case NEW:
				case NULL_:
				case OBJECT:
				case ON:
				case ORDERBY:
				case REMOVE:
				case SBYTE:
				case SELECT:
				case SET:
				case SHORT:
				case SIZEOF:
				case STRING:
				case TRUE:
				case TYPEOF:
				case UINT:
				case ULONG:
				case UNCHECKED:
				case UNMANAGED:
				case USHORT:
				case VAR:
				case WHEN:
				case WHERE:
				case YIELD:
				case IDENTIFIER:
				case LITERAL_ACCESS:
				case INTEGER_LITERAL:
				case HEX_INTEGER_LITERAL:
				case BIN_INTEGER_LITERAL:
				case REAL_LITERAL:
				case CHARACTER_LITERAL:
				case REGULAR_STRING:
				case VERBATIUM_STRING:
				case INTERPOLATED_REGULAR_STRING_START:
				case INTERPOLATED_VERBATIUM_STRING_START:
				case OPEN_PARENS:
				case PLUS:
				case MINUS:
				case STAR:
				case AMP:
				case CARET:
				case BANG:
				case TILDE:
				case OP_INC:
				case OP_DEC:
				case OP_RANGE:
					{
					State = 606;
					null_coalescing_expression();
					}
					break;
				case THROW:
					{
					State = 607;
					throw_expression();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_or_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_and_expressionContext[] conditional_and_expression() {
			return GetRuleContexts<Conditional_and_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_and_expressionContext conditional_and_expression(int i) {
			return GetRuleContext<Conditional_and_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_OR() { return GetTokens(NotCParser.OP_OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_OR(int i) {
			return GetToken(NotCParser.OP_OR, i);
		}
		public Conditional_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_or_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterConditional_or_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitConditional_or_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional_or_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_or_expressionContext conditional_or_expression() {
		Conditional_or_expressionContext _localctx = new Conditional_or_expressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_conditional_or_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 612;
			conditional_and_expression();
			State = 617;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 613;
					Match(OP_OR);
					State = 614;
					conditional_and_expression();
					}
					} 
				}
				State = 619;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_and_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Inclusive_or_expressionContext[] inclusive_or_expression() {
			return GetRuleContexts<Inclusive_or_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Inclusive_or_expressionContext inclusive_or_expression(int i) {
			return GetRuleContext<Inclusive_or_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_AND() { return GetTokens(NotCParser.OP_AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AND(int i) {
			return GetToken(NotCParser.OP_AND, i);
		}
		public Conditional_and_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_and_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterConditional_and_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitConditional_and_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional_and_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_and_expressionContext conditional_and_expression() {
		Conditional_and_expressionContext _localctx = new Conditional_and_expressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_conditional_and_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 620;
			inclusive_or_expression();
			State = 625;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 621;
					Match(OP_AND);
					State = 622;
					inclusive_or_expression();
					}
					} 
				}
				State = 627;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inclusive_or_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Exclusive_or_expressionContext[] exclusive_or_expression() {
			return GetRuleContexts<Exclusive_or_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Exclusive_or_expressionContext exclusive_or_expression(int i) {
			return GetRuleContext<Exclusive_or_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BITWISE_OR() { return GetTokens(NotCParser.BITWISE_OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_OR(int i) {
			return GetToken(NotCParser.BITWISE_OR, i);
		}
		public Inclusive_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inclusive_or_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterInclusive_or_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitInclusive_or_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclusive_or_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inclusive_or_expressionContext inclusive_or_expression() {
		Inclusive_or_expressionContext _localctx = new Inclusive_or_expressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_inclusive_or_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 628;
			exclusive_or_expression();
			State = 633;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 629;
					Match(BITWISE_OR);
					State = 630;
					exclusive_or_expression();
					}
					} 
				}
				State = 635;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exclusive_or_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public And_expressionContext[] and_expression() {
			return GetRuleContexts<And_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public And_expressionContext and_expression(int i) {
			return GetRuleContext<And_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CARET() { return GetTokens(NotCParser.CARET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET(int i) {
			return GetToken(NotCParser.CARET, i);
		}
		public Exclusive_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusive_or_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterExclusive_or_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitExclusive_or_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExclusive_or_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exclusive_or_expressionContext exclusive_or_expression() {
		Exclusive_or_expressionContext _localctx = new Exclusive_or_expressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_exclusive_or_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 636;
			and_expression();
			State = 641;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 637;
					Match(CARET);
					State = 638;
					and_expression();
					}
					} 
				}
				State = 643;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class And_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Equality_expressionContext[] equality_expression() {
			return GetRuleContexts<Equality_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Equality_expressionContext equality_expression(int i) {
			return GetRuleContext<Equality_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AMP() { return GetTokens(NotCParser.AMP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP(int i) {
			return GetToken(NotCParser.AMP, i);
		}
		public And_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterAnd_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitAnd_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public And_expressionContext and_expression() {
		And_expressionContext _localctx = new And_expressionContext(Context, State);
		EnterRule(_localctx, 48, RULE_and_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 644;
			equality_expression();
			State = 649;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 645;
					Match(AMP);
					State = 646;
					equality_expression();
					}
					} 
				}
				State = 651;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Equality_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Relational_expressionContext[] relational_expression() {
			return GetRuleContexts<Relational_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Relational_expressionContext relational_expression(int i) {
			return GetRuleContext<Relational_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_EQ() { return GetTokens(NotCParser.OP_EQ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQ(int i) {
			return GetToken(NotCParser.OP_EQ, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_NE() { return GetTokens(NotCParser.OP_NE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NE(int i) {
			return GetToken(NotCParser.OP_NE, i);
		}
		public Equality_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterEquality_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitEquality_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Equality_expressionContext equality_expression() {
		Equality_expressionContext _localctx = new Equality_expressionContext(Context, State);
		EnterRule(_localctx, 50, RULE_equality_expression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 652;
			relational_expression();
			State = 657;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 653;
					_la = TokenStream.LA(1);
					if ( !(_la==OP_EQ || _la==OP_NE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 654;
					relational_expression();
					}
					} 
				}
				State = 659;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relational_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Shift_expressionContext[] shift_expression() {
			return GetRuleContexts<Shift_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Shift_expressionContext shift_expression(int i) {
			return GetRuleContext<Shift_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IS() { return GetTokens(NotCParser.IS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS(int i) {
			return GetToken(NotCParser.IS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IsTypeContext[] isType() {
			return GetRuleContexts<IsTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IsTypeContext isType(int i) {
			return GetRuleContext<IsTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AS() { return GetTokens(NotCParser.AS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS(int i) {
			return GetToken(NotCParser.AS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context[] type_() {
			return GetRuleContexts<Type_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_(int i) {
			return GetRuleContext<Type_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LT() { return GetTokens(NotCParser.LT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT(int i) {
			return GetToken(NotCParser.LT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GT() { return GetTokens(NotCParser.GT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT(int i) {
			return GetToken(NotCParser.GT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_LE() { return GetTokens(NotCParser.OP_LE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LE(int i) {
			return GetToken(NotCParser.OP_LE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_GE() { return GetTokens(NotCParser.OP_GE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GE(int i) {
			return GetToken(NotCParser.OP_GE, i);
		}
		public Relational_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relational_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterRelational_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitRelational_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Relational_expressionContext relational_expression() {
		Relational_expressionContext _localctx = new Relational_expressionContext(Context, State);
		EnterRule(_localctx, 52, RULE_relational_expression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 660;
			shift_expression();
			State = 669;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 667;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case LT:
					case GT:
					case OP_LE:
					case OP_GE:
						{
						State = 661;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & 12291L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 662;
						shift_expression();
						}
						break;
					case IS:
						{
						State = 663;
						Match(IS);
						State = 664;
						isType();
						}
						break;
					case AS:
						{
						State = 665;
						Match(AS);
						State = 666;
						type_();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 671;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shift_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Additive_expressionContext[] additive_expression() {
			return GetRuleContexts<Additive_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Additive_expressionContext additive_expression(int i) {
			return GetRuleContext<Additive_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_LEFT_SHIFT() { return GetTokens(NotCParser.OP_LEFT_SHIFT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LEFT_SHIFT(int i) {
			return GetToken(NotCParser.OP_LEFT_SHIFT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Right_shiftContext[] right_shift() {
			return GetRuleContexts<Right_shiftContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Right_shiftContext right_shift(int i) {
			return GetRuleContext<Right_shiftContext>(i);
		}
		public Shift_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shift_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterShift_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitShift_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShift_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Shift_expressionContext shift_expression() {
		Shift_expressionContext _localctx = new Shift_expressionContext(Context, State);
		EnterRule(_localctx, 54, RULE_shift_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 672;
			additive_expression();
			State = 680;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 675;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case OP_LEFT_SHIFT:
						{
						State = 673;
						Match(OP_LEFT_SHIFT);
						}
						break;
					case GT:
						{
						State = 674;
						right_shift();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 677;
					additive_expression();
					}
					} 
				}
				State = 682;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Additive_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Multiplicative_expressionContext[] multiplicative_expression() {
			return GetRuleContexts<Multiplicative_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Multiplicative_expressionContext multiplicative_expression(int i) {
			return GetRuleContext<Multiplicative_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(NotCParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(NotCParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(NotCParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(NotCParser.MINUS, i);
		}
		public Additive_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additive_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterAdditive_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitAdditive_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditive_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Additive_expressionContext additive_expression() {
		Additive_expressionContext _localctx = new Additive_expressionContext(Context, State);
		EnterRule(_localctx, 56, RULE_additive_expression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 683;
			multiplicative_expression();
			State = 688;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 684;
					_la = TokenStream.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 685;
					multiplicative_expression();
					}
					} 
				}
				State = 690;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiplicative_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Switch_expressionContext[] switch_expression() {
			return GetRuleContexts<Switch_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Switch_expressionContext switch_expression(int i) {
			return GetRuleContext<Switch_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STAR() { return GetTokens(NotCParser.STAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR(int i) {
			return GetToken(NotCParser.STAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(NotCParser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(NotCParser.DIV, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PERCENT() { return GetTokens(NotCParser.PERCENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT(int i) {
			return GetToken(NotCParser.PERCENT, i);
		}
		public Multiplicative_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicative_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterMultiplicative_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitMultiplicative_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicative_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multiplicative_expressionContext multiplicative_expression() {
		Multiplicative_expressionContext _localctx = new Multiplicative_expressionContext(Context, State);
		EnterRule(_localctx, 58, RULE_multiplicative_expression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 691;
			switch_expression();
			State = 696;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 692;
					_la = TokenStream.LA(1);
					if ( !(((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & 7L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 693;
					switch_expression();
					}
					} 
				}
				State = 698;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Range_expressionContext range_expression() {
			return GetRuleContext<Range_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(NotCParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(NotCParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(NotCParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Switch_expression_armsContext switch_expression_arms() {
			return GetRuleContext<Switch_expression_armsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(NotCParser.COMMA, 0); }
		public Switch_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterSwitch_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitSwitch_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_expressionContext switch_expression() {
		Switch_expressionContext _localctx = new Switch_expressionContext(Context, State);
		EnterRule(_localctx, 60, RULE_switch_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 699;
			range_expression();
			State = 709;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				{
				State = 700;
				Match(SWITCH);
				State = 701;
				Match(OPEN_BRACE);
				State = 706;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5970989070458032516L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & -9070250976767125457L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 34359837139L) != 0)) {
					{
					State = 702;
					switch_expression_arms();
					State = 704;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 703;
						Match(COMMA);
						}
					}

					}
				}

				State = 708;
				Match(CLOSE_BRACE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_expression_armsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Switch_expression_armContext[] switch_expression_arm() {
			return GetRuleContexts<Switch_expression_armContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Switch_expression_armContext switch_expression_arm(int i) {
			return GetRuleContext<Switch_expression_armContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(NotCParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(NotCParser.COMMA, i);
		}
		public Switch_expression_armsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_expression_arms; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterSwitch_expression_arms(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitSwitch_expression_arms(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_expression_arms(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_expression_armsContext switch_expression_arms() {
		Switch_expression_armsContext _localctx = new Switch_expression_armsContext(Context, State);
		EnterRule(_localctx, 62, RULE_switch_expression_arms);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 711;
			switch_expression_arm();
			State = 716;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 712;
					Match(COMMA);
					State = 713;
					switch_expression_arm();
					}
					} 
				}
				State = 718;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_expression_armContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Right_arrowContext right_arrow() {
			return GetRuleContext<Right_arrowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Throwable_expressionContext throwable_expression() {
			return GetRuleContext<Throwable_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_guardContext case_guard() {
			return GetRuleContext<Case_guardContext>(0);
		}
		public Switch_expression_armContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_expression_arm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterSwitch_expression_arm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitSwitch_expression_arm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_expression_arm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_expression_armContext switch_expression_arm() {
		Switch_expression_armContext _localctx = new Switch_expression_armContext(Context, State);
		EnterRule(_localctx, 64, RULE_switch_expression_arm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 719;
			expression();
			State = 721;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHEN) {
				{
				State = 720;
				case_guard();
				}
			}

			State = 723;
			right_arrow();
			State = 724;
			throwable_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext[] unary_expression() {
			return GetRuleContexts<Unary_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression(int i) {
			return GetRuleContext<Unary_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RANGE() { return GetToken(NotCParser.OP_RANGE, 0); }
		public Range_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterRange_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitRange_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Range_expressionContext range_expression() {
		Range_expressionContext _localctx = new Range_expressionContext(Context, State);
		EnterRule(_localctx, 66, RULE_range_expression);
		int _la;
		try {
			State = 734;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 726;
				unary_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 728;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5970989070458032516L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & -9070250976767127505L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 98771L) != 0)) {
					{
					State = 727;
					unary_expression();
					}
				}

				State = 730;
				Match(OP_RANGE);
				State = 732;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
				case 1:
					{
					State = 731;
					unary_expression();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Cast_expressionContext cast_expression() {
			return GetRuleContext<Cast_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(NotCParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(NotCParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(NotCParser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(NotCParser.TILDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_INC() { return GetToken(NotCParser.OP_INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DEC() { return GetToken(NotCParser.OP_DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AWAIT() { return GetToken(NotCParser.AWAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP() { return GetToken(NotCParser.AMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(NotCParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(NotCParser.CARET, 0); }
		public Unary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterUnary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitUnary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_expressionContext unary_expression() {
		Unary_expressionContext _localctx = new Unary_expressionContext(Context, State);
		EnterRule(_localctx, 68, RULE_unary_expression);
		try {
			State = 758;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 736;
				cast_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 737;
				primary_expression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 738;
				Match(PLUS);
				State = 739;
				unary_expression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 740;
				Match(MINUS);
				State = 741;
				unary_expression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 742;
				Match(BANG);
				State = 743;
				unary_expression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 744;
				Match(TILDE);
				State = 745;
				unary_expression();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 746;
				Match(OP_INC);
				State = 747;
				unary_expression();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 748;
				Match(OP_DEC);
				State = 749;
				unary_expression();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 750;
				Match(AWAIT);
				State = 751;
				unary_expression();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 752;
				Match(AMP);
				State = 753;
				unary_expression();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 754;
				Match(STAR);
				State = 755;
				unary_expression();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 756;
				Match(CARET);
				State = 757;
				unary_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cast_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(NotCParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(NotCParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Cast_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterCast_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitCast_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCast_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cast_expressionContext cast_expression() {
		Cast_expressionContext _localctx = new Cast_expressionContext(Context, State);
		EnterRule(_localctx, 70, RULE_cast_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 760;
			Match(OPEN_PARENS);
			State = 761;
			type_();
			State = 762;
			Match(CLOSE_PARENS);
			State = 763;
			unary_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_expressionContext : ParserRuleContext {
		public Primary_expression_startContext pe;
		[System.Diagnostics.DebuggerNonUserCode] public Primary_expression_startContext primary_expression_start() {
			return GetRuleContext<Primary_expression_startContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BANG() { return GetTokens(NotCParser.BANG); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG(int i) {
			return GetToken(NotCParser.BANG, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bracket_expressionContext[] bracket_expression() {
			return GetRuleContexts<Bracket_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bracket_expressionContext bracket_expression(int i) {
			return GetRuleContext<Bracket_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_accessContext[] member_access() {
			return GetRuleContexts<Member_accessContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_accessContext member_access(int i) {
			return GetRuleContext<Member_accessContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Method_invocationContext[] method_invocation() {
			return GetRuleContexts<Method_invocationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Method_invocationContext method_invocation(int i) {
			return GetRuleContext<Method_invocationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_INC() { return GetTokens(NotCParser.OP_INC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_INC(int i) {
			return GetToken(NotCParser.OP_INC, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_DEC() { return GetTokens(NotCParser.OP_DEC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DEC(int i) {
			return GetToken(NotCParser.OP_DEC, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_PTR() { return GetTokens(NotCParser.OP_PTR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_PTR(int i) {
			return GetToken(NotCParser.OP_PTR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public Primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterPrimary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitPrimary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_expressionContext primary_expression() {
		Primary_expressionContext _localctx = new Primary_expressionContext(Context, State);
		EnterRule(_localctx, 72, RULE_primary_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 765;
			_localctx.pe = primary_expression_start();
			State = 767;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				{
				State = 766;
				Match(BANG);
				}
				break;
			}
			State = 772;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 769;
					bracket_expression();
					}
					} 
				}
				State = 774;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
			}
			State = 776;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				{
				State = 775;
				Match(BANG);
				}
				break;
			}
			State = 800;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 784;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case DOT:
					case INTERR:
						{
						State = 778;
						member_access();
						}
						break;
					case OPEN_PARENS:
						{
						State = 779;
						method_invocation();
						}
						break;
					case OP_INC:
						{
						State = 780;
						Match(OP_INC);
						}
						break;
					case OP_DEC:
						{
						State = 781;
						Match(OP_DEC);
						}
						break;
					case OP_PTR:
						{
						State = 782;
						Match(OP_PTR);
						State = 783;
						identifier();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 787;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
					case 1:
						{
						State = 786;
						Match(BANG);
						}
						break;
					}
					State = 792;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 789;
							bracket_expression();
							}
							} 
						}
						State = 794;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
					}
					State = 796;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
					case 1:
						{
						State = 795;
						Match(BANG);
						}
						break;
					}
					}
					} 
				}
				State = 802;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_expression_startContext : ParserRuleContext {
		public Primary_expression_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_expression_start; } }
	 
		public Primary_expression_startContext() { }
		public virtual void CopyFrom(Primary_expression_startContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LiteralAccessExpressionContext : Primary_expression_startContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_ACCESS() { return GetToken(NotCParser.LITERAL_ACCESS, 0); }
		public LiteralAccessExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterLiteralAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitLiteralAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefaultValueExpressionContext : Primary_expression_startContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(NotCParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(NotCParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(NotCParser.CLOSE_PARENS, 0); }
		public DefaultValueExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterDefaultValueExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitDefaultValueExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultValueExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BaseAccessExpressionContext : Primary_expression_startContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BASE() { return GetToken(NotCParser.BASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(NotCParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(NotCParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(NotCParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_argument_listContext type_argument_list() {
			return GetRuleContext<Type_argument_listContext>(0);
		}
		public BaseAccessExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterBaseAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitBaseAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SizeofExpressionContext : Primary_expression_startContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIZEOF() { return GetToken(NotCParser.SIZEOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(NotCParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(NotCParser.CLOSE_PARENS, 0); }
		public SizeofExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterSizeofExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitSizeofExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSizeofExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisExpressionsContext : Primary_expression_startContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(NotCParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(NotCParser.CLOSE_PARENS, 0); }
		public ParenthesisExpressionsContext(Primary_expression_startContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterParenthesisExpressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitParenthesisExpressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisExpressions(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObjectCreationExpressionContext : Primary_expression_startContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(NotCParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Anonymous_object_initializerContext anonymous_object_initializer() {
			return GetRuleContext<Anonymous_object_initializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rank_specifierContext[] rank_specifier() {
			return GetRuleContexts<Rank_specifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rank_specifierContext rank_specifier(int i) {
			return GetRuleContext<Rank_specifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_initializerContext array_initializer() {
			return GetRuleContext<Array_initializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_creation_expressionContext object_creation_expression() {
			return GetRuleContext<Object_creation_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_or_collection_initializerContext object_or_collection_initializer() {
			return GetRuleContext<Object_or_collection_initializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(NotCParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(NotCParser.CLOSE_BRACKET, 0); }
		public ObjectCreationExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterObjectCreationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitObjectCreationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectCreationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AnonymousMethodExpressionContext : Primary_expression_startContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELEGATE() { return GetToken(NotCParser.DELEGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYNC() { return GetToken(NotCParser.ASYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(NotCParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(NotCParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Explicit_anonymous_function_parameter_listContext explicit_anonymous_function_parameter_list() {
			return GetRuleContext<Explicit_anonymous_function_parameter_listContext>(0);
		}
		public AnonymousMethodExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterAnonymousMethodExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitAnonymousMethodExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymousMethodExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeofExpressionContext : Primary_expression_startContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPEOF() { return GetToken(NotCParser.TYPEOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(NotCParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(NotCParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unbound_type_nameContext unbound_type_name() {
			return GetRuleContext<Unbound_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(NotCParser.VOID, 0); }
		public TypeofExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterTypeofExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitTypeofExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeofExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TupleExpressionContext : Primary_expression_startContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(NotCParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(NotCParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(NotCParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(NotCParser.COMMA, i);
		}
		public TupleExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterTupleExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitTupleExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UncheckedExpressionContext : Primary_expression_startContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCHECKED() { return GetToken(NotCParser.UNCHECKED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(NotCParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(NotCParser.CLOSE_PARENS, 0); }
		public UncheckedExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterUncheckedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitUncheckedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUncheckedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleNameExpressionContext : Primary_expression_startContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_argument_listContext type_argument_list() {
			return GetRuleContext<Type_argument_listContext>(0);
		}
		public SimpleNameExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterSimpleNameExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitSimpleNameExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleNameExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberAccessExpressionContext : Primary_expression_startContext {
		[System.Diagnostics.DebuggerNonUserCode] public Predefined_typeContext predefined_type() {
			return GetRuleContext<Predefined_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_alias_memberContext qualified_alias_member() {
			return GetRuleContext<Qualified_alias_memberContext>(0);
		}
		public MemberAccessExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterMemberAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitMemberAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CheckedExpressionContext : Primary_expression_startContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKED() { return GetToken(NotCParser.CHECKED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(NotCParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(NotCParser.CLOSE_PARENS, 0); }
		public CheckedExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterCheckedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitCheckedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheckedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExpressionContext : Primary_expression_startContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NameofExpressionContext : Primary_expression_startContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMEOF() { return GetToken(NotCParser.NAMEOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(NotCParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(NotCParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(NotCParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(NotCParser.DOT, i);
		}
		public NameofExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterNameofExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitNameofExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameofExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_expression_startContext primary_expression_start() {
		Primary_expression_startContext _localctx = new Primary_expression_startContext(Context, State);
		EnterRule(_localctx, 74, RULE_primary_expression_start);
		int _la;
		try {
			int _alt;
			State = 923;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				_localctx = new LiteralExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 803;
				literal();
				}
				break;
			case 2:
				_localctx = new SimpleNameExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 804;
				identifier();
				State = 806;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
				case 1:
					{
					State = 805;
					type_argument_list();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new ParenthesisExpressionsContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 808;
				Match(OPEN_PARENS);
				State = 809;
				expression();
				State = 810;
				Match(CLOSE_PARENS);
				}
				break;
			case 4:
				_localctx = new MemberAccessExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 812;
				predefined_type();
				}
				break;
			case 5:
				_localctx = new MemberAccessExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 813;
				qualified_alias_member();
				}
				break;
			case 6:
				_localctx = new LiteralAccessExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 814;
				Match(LITERAL_ACCESS);
				}
				break;
			case 7:
				_localctx = new BaseAccessExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 815;
				Match(BASE);
				State = 825;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DOT:
					{
					State = 816;
					Match(DOT);
					State = 817;
					identifier();
					State = 819;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
					case 1:
						{
						State = 818;
						type_argument_list();
						}
						break;
					}
					}
					break;
				case OPEN_BRACKET:
					{
					State = 821;
					Match(OPEN_BRACKET);
					State = 822;
					expression_list();
					State = 823;
					Match(CLOSE_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 8:
				_localctx = new ObjectCreationExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 827;
				Match(NEW);
				State = 856;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SINGLE_LINE_DOC_COMMENT:
				case EMPTY_DELIMITED_DOC_COMMENT:
				case DELIMITED_DOC_COMMENT:
				case SINGLE_LINE_COMMENT:
				case DELIMITED_COMMENT:
				case ADD:
				case ALIAS:
				case ARGLIST:
				case ASCENDING:
				case ASYNC:
				case AWAIT:
				case BOOL:
				case BY:
				case BYTE:
				case CHAR:
				case DECIMAL:
				case DESCENDING:
				case DOUBLE:
				case DYNAMIC:
				case EQUALS:
				case FLOAT:
				case FROM:
				case GET:
				case GROUP:
				case INT:
				case INTO:
				case JOIN:
				case LET:
				case LONG:
				case NAMEOF:
				case OBJECT:
				case ON:
				case ORDERBY:
				case REMOVE:
				case SBYTE:
				case SELECT:
				case SET:
				case SHORT:
				case STRING:
				case UINT:
				case ULONG:
				case UNMANAGED:
				case USHORT:
				case VAR:
				case VOID:
				case WHEN:
				case WHERE:
				case YIELD:
				case IDENTIFIER:
				case OPEN_PARENS:
					{
					State = 828;
					type_();
					State = 850;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
					case 1:
						{
						State = 829;
						object_creation_expression();
						}
						break;
					case 2:
						{
						State = 830;
						object_or_collection_initializer();
						}
						break;
					case 3:
						{
						State = 831;
						Match(OPEN_BRACKET);
						State = 832;
						expression_list();
						State = 833;
						Match(CLOSE_BRACKET);
						State = 837;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,63,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 834;
								rank_specifier();
								}
								} 
							}
							State = 839;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,63,Context);
						}
						State = 841;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
						case 1:
							{
							State = 840;
							array_initializer();
							}
							break;
						}
						}
						break;
					case 4:
						{
						State = 844;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						do {
							{
							{
							State = 843;
							rank_specifier();
							}
							}
							State = 846;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						} while ( _la==OPEN_BRACKET );
						State = 848;
						array_initializer();
						}
						break;
					}
					}
					break;
				case OPEN_BRACE:
					{
					State = 852;
					anonymous_object_initializer();
					}
					break;
				case OPEN_BRACKET:
					{
					State = 853;
					rank_specifier();
					State = 854;
					array_initializer();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 9:
				_localctx = new TupleExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 858;
				Match(OPEN_PARENS);
				State = 859;
				argument();
				State = 862;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 860;
					Match(COMMA);
					State = 861;
					argument();
					}
					}
					State = 864;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==COMMA );
				State = 866;
				Match(CLOSE_PARENS);
				}
				break;
			case 10:
				_localctx = new TypeofExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 868;
				Match(TYPEOF);
				State = 869;
				Match(OPEN_PARENS);
				State = 873;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
				case 1:
					{
					State = 870;
					unbound_type_name();
					}
					break;
				case 2:
					{
					State = 871;
					type_();
					}
					break;
				case 3:
					{
					State = 872;
					Match(VOID);
					}
					break;
				}
				State = 875;
				Match(CLOSE_PARENS);
				}
				break;
			case 11:
				_localctx = new CheckedExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 876;
				Match(CHECKED);
				State = 877;
				Match(OPEN_PARENS);
				State = 878;
				expression();
				State = 879;
				Match(CLOSE_PARENS);
				}
				break;
			case 12:
				_localctx = new UncheckedExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 881;
				Match(UNCHECKED);
				State = 882;
				Match(OPEN_PARENS);
				State = 883;
				expression();
				State = 884;
				Match(CLOSE_PARENS);
				}
				break;
			case 13:
				_localctx = new DefaultValueExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 886;
				Match(DEFAULT);
				State = 891;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
				case 1:
					{
					State = 887;
					Match(OPEN_PARENS);
					State = 888;
					type_();
					State = 889;
					Match(CLOSE_PARENS);
					}
					break;
				}
				}
				break;
			case 14:
				_localctx = new AnonymousMethodExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 894;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASYNC) {
					{
					State = 893;
					Match(ASYNC);
					}
				}

				State = 896;
				Match(DELEGATE);
				State = 902;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_PARENS) {
					{
					State = 897;
					Match(OPEN_PARENS);
					State = 899;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5966486571164438916L) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 36030681100908059L) != 0)) {
						{
						State = 898;
						explicit_anonymous_function_parameter_list();
						}
					}

					State = 901;
					Match(CLOSE_PARENS);
					}
				}

				State = 904;
				block();
				}
				break;
			case 15:
				_localctx = new SizeofExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 905;
				Match(SIZEOF);
				State = 906;
				Match(OPEN_PARENS);
				State = 907;
				type_();
				State = 908;
				Match(CLOSE_PARENS);
				}
				break;
			case 16:
				_localctx = new NameofExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 910;
				Match(NAMEOF);
				State = 911;
				Match(OPEN_PARENS);
				State = 917;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 912;
						identifier();
						State = 913;
						Match(DOT);
						}
						} 
					}
					State = 919;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
				}
				State = 920;
				identifier();
				State = 921;
				Match(CLOSE_PARENS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Throwable_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Throw_expressionContext throw_expression() {
			return GetRuleContext<Throw_expressionContext>(0);
		}
		public Throwable_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwable_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterThrowable_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitThrowable_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowable_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Throwable_expressionContext throwable_expression() {
		Throwable_expressionContext _localctx = new Throwable_expressionContext(Context, State);
		EnterRule(_localctx, 76, RULE_throwable_expression);
		try {
			State = 927;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SINGLE_LINE_DOC_COMMENT:
			case EMPTY_DELIMITED_DOC_COMMENT:
			case DELIMITED_DOC_COMMENT:
			case SINGLE_LINE_COMMENT:
			case DELIMITED_COMMENT:
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL_:
			case OBJECT:
			case ON:
			case ORDERBY:
			case REF:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNMANAGED:
			case USHORT:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case CARET:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
			case OP_RANGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 925;
				expression();
				}
				break;
			case THROW:
				EnterOuterAlt(_localctx, 2);
				{
				State = 926;
				throw_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Throw_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROW() { return GetToken(NotCParser.THROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Throw_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throw_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterThrow_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitThrow_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrow_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Throw_expressionContext throw_expression() {
		Throw_expressionContext _localctx = new Throw_expressionContext(Context, State);
		EnterRule(_localctx, 78, RULE_throw_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 929;
			Match(THROW);
			State = 930;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_accessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(NotCParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERR() { return GetToken(NotCParser.INTERR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_argument_listContext type_argument_list() {
			return GetRuleContext<Type_argument_listContext>(0);
		}
		public Member_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_access; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterMember_access(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitMember_access(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_access(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_accessContext member_access() {
		Member_accessContext _localctx = new Member_accessContext(Context, State);
		EnterRule(_localctx, 80, RULE_member_access);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 933;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTERR) {
				{
				State = 932;
				Match(INTERR);
				}
			}

			State = 935;
			Match(DOT);
			State = 936;
			identifier();
			State = 938;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
			case 1:
				{
				State = 937;
				type_argument_list();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bracket_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(NotCParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Indexer_argumentContext[] indexer_argument() {
			return GetRuleContexts<Indexer_argumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Indexer_argumentContext indexer_argument(int i) {
			return GetRuleContext<Indexer_argumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(NotCParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERR() { return GetToken(NotCParser.INTERR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(NotCParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(NotCParser.COMMA, i);
		}
		public Bracket_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracket_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterBracket_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitBracket_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracket_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bracket_expressionContext bracket_expression() {
		Bracket_expressionContext _localctx = new Bracket_expressionContext(Context, State);
		EnterRule(_localctx, 82, RULE_bracket_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 941;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTERR) {
				{
				State = 940;
				Match(INTERR);
				}
			}

			State = 943;
			Match(OPEN_BRACKET);
			State = 944;
			indexer_argument();
			State = 949;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 945;
				Match(COMMA);
				State = 946;
				indexer_argument();
				}
				}
				State = 951;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 952;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indexer_argumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(NotCParser.COLON, 0); }
		public Indexer_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexer_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterIndexer_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitIndexer_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexer_argument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Indexer_argumentContext indexer_argument() {
		Indexer_argumentContext _localctx = new Indexer_argumentContext(Context, State);
		EnterRule(_localctx, 84, RULE_indexer_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 957;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
			case 1:
				{
				State = 954;
				identifier();
				State = 955;
				Match(COLON);
				}
				break;
			}
			State = 959;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Predefined_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(NotCParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTE() { return GetToken(NotCParser.BYTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(NotCParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(NotCParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(NotCParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(NotCParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(NotCParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG() { return GetToken(NotCParser.LONG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT() { return GetToken(NotCParser.OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SBYTE() { return GetToken(NotCParser.SBYTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHORT() { return GetToken(NotCParser.SHORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(NotCParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINT() { return GetToken(NotCParser.UINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ULONG() { return GetToken(NotCParser.ULONG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USHORT() { return GetToken(NotCParser.USHORT, 0); }
		public Predefined_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predefined_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterPredefined_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitPredefined_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredefined_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Predefined_typeContext predefined_type() {
		Predefined_typeContext _localctx = new Predefined_typeContext(Context, State);
		EnterRule(_localctx, 86, RULE_predefined_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 961;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2314859009000210432L) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 2349371393L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(NotCParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(NotCParser.COMMA, i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterExpression_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitExpression_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_listContext expression_list() {
		Expression_listContext _localctx = new Expression_listContext(Context, State);
		EnterRule(_localctx, 88, RULE_expression_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 963;
			expression();
			State = 968;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 964;
				Match(COMMA);
				State = 965;
				expression();
				}
				}
				State = 970;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_or_collection_initializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Object_initializerContext object_initializer() {
			return GetRuleContext<Object_initializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Collection_initializerContext collection_initializer() {
			return GetRuleContext<Collection_initializerContext>(0);
		}
		public Object_or_collection_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_or_collection_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterObject_or_collection_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitObject_or_collection_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_or_collection_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_or_collection_initializerContext object_or_collection_initializer() {
		Object_or_collection_initializerContext _localctx = new Object_or_collection_initializerContext(Context, State);
		EnterRule(_localctx, 90, RULE_object_or_collection_initializer);
		try {
			State = 973;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 971;
				object_initializer();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 972;
				collection_initializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_initializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(NotCParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(NotCParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Member_initializer_listContext member_initializer_list() {
			return GetRuleContext<Member_initializer_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(NotCParser.COMMA, 0); }
		public Object_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterObject_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitObject_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_initializerContext object_initializer() {
		Object_initializerContext _localctx = new Object_initializerContext(Context, State);
		EnterRule(_localctx, 92, RULE_object_initializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 975;
			Match(OPEN_BRACE);
			State = 980;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8285849179792019844L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 4504531903721989L) != 0)) {
				{
				State = 976;
				member_initializer_list();
				State = 978;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 977;
					Match(COMMA);
					}
				}

				}
			}

			State = 982;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_initializer_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Member_initializerContext[] member_initializer() {
			return GetRuleContexts<Member_initializerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_initializerContext member_initializer(int i) {
			return GetRuleContext<Member_initializerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(NotCParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(NotCParser.COMMA, i);
		}
		public Member_initializer_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_initializer_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterMember_initializer_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitMember_initializer_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_initializer_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_initializer_listContext member_initializer_list() {
		Member_initializer_listContext _localctx = new Member_initializer_listContext(Context, State);
		EnterRule(_localctx, 94, RULE_member_initializer_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 984;
			member_initializer();
			State = 989;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 985;
					Match(COMMA);
					State = 986;
					member_initializer();
					}
					} 
				}
				State = 991;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_initializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(NotCParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Initializer_valueContext initializer_value() {
			return GetRuleContext<Initializer_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(NotCParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(NotCParser.CLOSE_BRACKET, 0); }
		public Member_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterMember_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitMember_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_initializerContext member_initializer() {
		Member_initializerContext _localctx = new Member_initializerContext(Context, State);
		EnterRule(_localctx, 96, RULE_member_initializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 997;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SINGLE_LINE_DOC_COMMENT:
			case EMPTY_DELIMITED_DOC_COMMENT:
			case DELIMITED_DOC_COMMENT:
			case SINGLE_LINE_COMMENT:
			case DELIMITED_COMMENT:
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BY:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case NAMEOF:
			case ON:
			case ORDERBY:
			case REMOVE:
			case SELECT:
			case SET:
			case UNMANAGED:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				{
				State = 992;
				identifier();
				}
				break;
			case OPEN_BRACKET:
				{
				State = 993;
				Match(OPEN_BRACKET);
				State = 994;
				expression();
				State = 995;
				Match(CLOSE_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 999;
			Match(ASSIGNMENT);
			State = 1000;
			initializer_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Initializer_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_or_collection_initializerContext object_or_collection_initializer() {
			return GetRuleContext<Object_or_collection_initializerContext>(0);
		}
		public Initializer_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializer_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterInitializer_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitInitializer_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializer_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Initializer_valueContext initializer_value() {
		Initializer_valueContext _localctx = new Initializer_valueContext(Context, State);
		EnterRule(_localctx, 98, RULE_initializer_value);
		try {
			State = 1004;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SINGLE_LINE_DOC_COMMENT:
			case EMPTY_DELIMITED_DOC_COMMENT:
			case DELIMITED_DOC_COMMENT:
			case SINGLE_LINE_COMMENT:
			case DELIMITED_COMMENT:
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL_:
			case OBJECT:
			case ON:
			case ORDERBY:
			case REF:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNMANAGED:
			case USHORT:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case CARET:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
			case OP_RANGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1002;
				expression();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1003;
				object_or_collection_initializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Collection_initializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(NotCParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Element_initializerContext[] element_initializer() {
			return GetRuleContexts<Element_initializerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Element_initializerContext element_initializer(int i) {
			return GetRuleContext<Element_initializerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(NotCParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(NotCParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(NotCParser.COMMA, i);
		}
		public Collection_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterCollection_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitCollection_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollection_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Collection_initializerContext collection_initializer() {
		Collection_initializerContext _localctx = new Collection_initializerContext(Context, State);
		EnterRule(_localctx, 100, RULE_collection_initializer);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1006;
			Match(OPEN_BRACE);
			State = 1007;
			element_initializer();
			State = 1012;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,89,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1008;
					Match(COMMA);
					State = 1009;
					element_initializer();
					}
					} 
				}
				State = 1014;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,89,Context);
			}
			State = 1016;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1015;
				Match(COMMA);
				}
			}

			State = 1018;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Element_initializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Non_assignment_expressionContext non_assignment_expression() {
			return GetRuleContext<Non_assignment_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(NotCParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(NotCParser.CLOSE_BRACE, 0); }
		public Element_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterElement_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitElement_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Element_initializerContext element_initializer() {
		Element_initializerContext _localctx = new Element_initializerContext(Context, State);
		EnterRule(_localctx, 102, RULE_element_initializer);
		try {
			State = 1025;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SINGLE_LINE_DOC_COMMENT:
			case EMPTY_DELIMITED_DOC_COMMENT:
			case DELIMITED_DOC_COMMENT:
			case SINGLE_LINE_COMMENT:
			case DELIMITED_COMMENT:
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL_:
			case OBJECT:
			case ON:
			case ORDERBY:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNMANAGED:
			case USHORT:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case CARET:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
			case OP_RANGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1020;
				non_assignment_expression();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1021;
				Match(OPEN_BRACE);
				State = 1022;
				expression_list();
				State = 1023;
				Match(CLOSE_BRACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_object_initializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(NotCParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(NotCParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Member_declarator_listContext member_declarator_list() {
			return GetRuleContext<Member_declarator_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(NotCParser.COMMA, 0); }
		public Anonymous_object_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_object_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterAnonymous_object_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitAnonymous_object_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymous_object_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_object_initializerContext anonymous_object_initializer() {
		Anonymous_object_initializerContext _localctx = new Anonymous_object_initializerContext(Context, State);
		EnterRule(_localctx, 104, RULE_anonymous_object_initializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1027;
			Match(OPEN_BRACE);
			State = 1032;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5970989070458032516L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 153121060087648303L) != 0)) {
				{
				State = 1028;
				member_declarator_list();
				State = 1030;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1029;
					Match(COMMA);
					}
				}

				}
			}

			State = 1034;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_declarator_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Member_declaratorContext[] member_declarator() {
			return GetRuleContexts<Member_declaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_declaratorContext member_declarator(int i) {
			return GetRuleContext<Member_declaratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(NotCParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(NotCParser.COMMA, i);
		}
		public Member_declarator_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_declarator_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterMember_declarator_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitMember_declarator_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_declarator_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_declarator_listContext member_declarator_list() {
		Member_declarator_listContext _localctx = new Member_declarator_listContext(Context, State);
		EnterRule(_localctx, 106, RULE_member_declarator_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1036;
			member_declarator();
			State = 1041;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,94,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1037;
					Match(COMMA);
					State = 1038;
					member_declarator();
					}
					} 
				}
				State = 1043;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,94,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_declaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(NotCParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Member_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterMember_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitMember_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_declaratorContext member_declarator() {
		Member_declaratorContext _localctx = new Member_declaratorContext(Context, State);
		EnterRule(_localctx, 108, RULE_member_declarator);
		try {
			State = 1049;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1044;
				primary_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1045;
				identifier();
				State = 1046;
				Match(ASSIGNMENT);
				State = 1047;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unbound_type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_COLON() { return GetToken(NotCParser.DOUBLE_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(NotCParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(NotCParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_dimension_specifierContext[] generic_dimension_specifier() {
			return GetRuleContexts<Generic_dimension_specifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_dimension_specifierContext generic_dimension_specifier(int i) {
			return GetRuleContext<Generic_dimension_specifierContext>(i);
		}
		public Unbound_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unbound_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterUnbound_type_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitUnbound_type_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnbound_type_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unbound_type_nameContext unbound_type_name() {
		Unbound_type_nameContext _localctx = new Unbound_type_nameContext(Context, State);
		EnterRule(_localctx, 110, RULE_unbound_type_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1051;
			identifier();
			State = 1060;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CLOSE_PARENS:
			case DOT:
			case LT:
				{
				State = 1053;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 1052;
					generic_dimension_specifier();
					}
				}

				}
				break;
			case DOUBLE_COLON:
				{
				State = 1055;
				Match(DOUBLE_COLON);
				State = 1056;
				identifier();
				State = 1058;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 1057;
					generic_dimension_specifier();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1069;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 1062;
				Match(DOT);
				State = 1063;
				identifier();
				State = 1065;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 1064;
					generic_dimension_specifier();
					}
				}

				}
				}
				State = 1071;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_dimension_specifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(NotCParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(NotCParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(NotCParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(NotCParser.COMMA, i);
		}
		public Generic_dimension_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_dimension_specifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterGeneric_dimension_specifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitGeneric_dimension_specifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneric_dimension_specifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Generic_dimension_specifierContext generic_dimension_specifier() {
		Generic_dimension_specifierContext _localctx = new Generic_dimension_specifierContext(Context, State);
		EnterRule(_localctx, 112, RULE_generic_dimension_specifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1072;
			Match(LT);
			State = 1076;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1073;
				Match(COMMA);
				}
				}
				State = 1078;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1079;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Base_typeContext base_type() {
			return GetRuleContext<Base_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rank_specifierContext[] rank_specifier() {
			return GetRuleContexts<Rank_specifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rank_specifierContext rank_specifier(int i) {
			return GetRuleContext<Rank_specifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STAR() { return GetTokens(NotCParser.STAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR(int i) {
			return GetToken(NotCParser.STAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERR() { return GetToken(NotCParser.INTERR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IsTypePatternArmsContext isTypePatternArms() {
			return GetRuleContext<IsTypePatternArmsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IsTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterIsType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitIsType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsTypeContext isType() {
		IsTypeContext _localctx = new IsTypeContext(Context, State);
		EnterRule(_localctx, 114, RULE_isType);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1081;
			base_type();
			State = 1086;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,103,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 1084;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case OPEN_BRACKET:
						{
						State = 1082;
						rank_specifier();
						}
						break;
					case STAR:
						{
						State = 1083;
						Match(STAR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 1088;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,103,Context);
			}
			State = 1090;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
			case 1:
				{
				State = 1089;
				Match(INTERR);
				}
				break;
			}
			State = 1093;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
			case 1:
				{
				State = 1092;
				isTypePatternArms();
				}
				break;
			}
			State = 1096;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
			case 1:
				{
				State = 1095;
				identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsTypePatternArmsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(NotCParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IsTypePatternArmContext[] isTypePatternArm() {
			return GetRuleContexts<IsTypePatternArmContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IsTypePatternArmContext isTypePatternArm(int i) {
			return GetRuleContext<IsTypePatternArmContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(NotCParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(NotCParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(NotCParser.COMMA, i);
		}
		public IsTypePatternArmsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isTypePatternArms; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterIsTypePatternArms(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitIsTypePatternArms(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsTypePatternArms(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsTypePatternArmsContext isTypePatternArms() {
		IsTypePatternArmsContext _localctx = new IsTypePatternArmsContext(Context, State);
		EnterRule(_localctx, 116, RULE_isTypePatternArms);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1098;
			Match(OPEN_BRACE);
			State = 1099;
			isTypePatternArm();
			State = 1104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1100;
				Match(COMMA);
				State = 1101;
				isTypePatternArm();
				}
				}
				State = 1106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1107;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsTypePatternArmContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(NotCParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsTypePatternArmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isTypePatternArm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterIsTypePatternArm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitIsTypePatternArm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsTypePatternArm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsTypePatternArmContext isTypePatternArm() {
		IsTypePatternArmContext _localctx = new IsTypePatternArmContext(Context, State);
		EnterRule(_localctx, 118, RULE_isTypePatternArm);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1109;
			identifier();
			State = 1110;
			Match(COLON);
			State = 1111;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lambda_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Anonymous_function_signatureContext anonymous_function_signature() {
			return GetRuleContext<Anonymous_function_signatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Right_arrowContext right_arrow() {
			return GetRuleContext<Right_arrowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Anonymous_function_bodyContext anonymous_function_body() {
			return GetRuleContext<Anonymous_function_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYNC() { return GetToken(NotCParser.ASYNC, 0); }
		public Lambda_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterLambda_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitLambda_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambda_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lambda_expressionContext lambda_expression() {
		Lambda_expressionContext _localctx = new Lambda_expressionContext(Context, State);
		EnterRule(_localctx, 120, RULE_lambda_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1114;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,108,Context) ) {
			case 1:
				{
				State = 1113;
				Match(ASYNC);
				}
				break;
			}
			State = 1116;
			anonymous_function_signature();
			State = 1117;
			right_arrow();
			State = 1118;
			anonymous_function_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_function_signatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(NotCParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(NotCParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Explicit_anonymous_function_parameter_listContext explicit_anonymous_function_parameter_list() {
			return GetRuleContext<Explicit_anonymous_function_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Implicit_anonymous_function_parameter_listContext implicit_anonymous_function_parameter_list() {
			return GetRuleContext<Implicit_anonymous_function_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Anonymous_function_signatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_function_signature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterAnonymous_function_signature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitAnonymous_function_signature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymous_function_signature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_function_signatureContext anonymous_function_signature() {
		Anonymous_function_signatureContext _localctx = new Anonymous_function_signatureContext(Context, State);
		EnterRule(_localctx, 122, RULE_anonymous_function_signature);
		try {
			State = 1131;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,109,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1120;
				Match(OPEN_PARENS);
				State = 1121;
				Match(CLOSE_PARENS);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1122;
				Match(OPEN_PARENS);
				State = 1123;
				explicit_anonymous_function_parameter_list();
				State = 1124;
				Match(CLOSE_PARENS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1126;
				Match(OPEN_PARENS);
				State = 1127;
				implicit_anonymous_function_parameter_list();
				State = 1128;
				Match(CLOSE_PARENS);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1130;
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explicit_anonymous_function_parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Explicit_anonymous_function_parameterContext[] explicit_anonymous_function_parameter() {
			return GetRuleContexts<Explicit_anonymous_function_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Explicit_anonymous_function_parameterContext explicit_anonymous_function_parameter(int i) {
			return GetRuleContext<Explicit_anonymous_function_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(NotCParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(NotCParser.COMMA, i);
		}
		public Explicit_anonymous_function_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicit_anonymous_function_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterExplicit_anonymous_function_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitExplicit_anonymous_function_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicit_anonymous_function_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Explicit_anonymous_function_parameter_listContext explicit_anonymous_function_parameter_list() {
		Explicit_anonymous_function_parameter_listContext _localctx = new Explicit_anonymous_function_parameter_listContext(Context, State);
		EnterRule(_localctx, 124, RULE_explicit_anonymous_function_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1133;
			explicit_anonymous_function_parameter();
			State = 1138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1134;
				Match(COMMA);
				State = 1135;
				explicit_anonymous_function_parameter();
				}
				}
				State = 1140;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explicit_anonymous_function_parameterContext : ParserRuleContext {
		public IToken refout;
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(NotCParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(NotCParser.OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(NotCParser.IN, 0); }
		public Explicit_anonymous_function_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicit_anonymous_function_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterExplicit_anonymous_function_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitExplicit_anonymous_function_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicit_anonymous_function_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Explicit_anonymous_function_parameterContext explicit_anonymous_function_parameter() {
		Explicit_anonymous_function_parameterContext _localctx = new Explicit_anonymous_function_parameterContext(Context, State);
		EnterRule(_localctx, 126, RULE_explicit_anonymous_function_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 52)) & ~0x3f) == 0 && ((1L << (_la - 52)) & 17301505L) != 0)) {
				{
				State = 1141;
				_localctx.refout = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 52)) & ~0x3f) == 0 && ((1L << (_la - 52)) & 17301505L) != 0)) ) {
					_localctx.refout = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1144;
			type_();
			State = 1145;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Implicit_anonymous_function_parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(NotCParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(NotCParser.COMMA, i);
		}
		public Implicit_anonymous_function_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicit_anonymous_function_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterImplicit_anonymous_function_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitImplicit_anonymous_function_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicit_anonymous_function_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Implicit_anonymous_function_parameter_listContext implicit_anonymous_function_parameter_list() {
		Implicit_anonymous_function_parameter_listContext _localctx = new Implicit_anonymous_function_parameter_listContext(Context, State);
		EnterRule(_localctx, 128, RULE_implicit_anonymous_function_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1147;
			identifier();
			State = 1152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1148;
				Match(COMMA);
				State = 1149;
				identifier();
				}
				}
				State = 1154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_function_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Throwable_expressionContext throwable_expression() {
			return GetRuleContext<Throwable_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Anonymous_function_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_function_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterAnonymous_function_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitAnonymous_function_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymous_function_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_function_bodyContext anonymous_function_body() {
		Anonymous_function_bodyContext _localctx = new Anonymous_function_bodyContext(Context, State);
		EnterRule(_localctx, 130, RULE_anonymous_function_body);
		try {
			State = 1157;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SINGLE_LINE_DOC_COMMENT:
			case EMPTY_DELIMITED_DOC_COMMENT:
			case DELIMITED_DOC_COMMENT:
			case SINGLE_LINE_COMMENT:
			case DELIMITED_COMMENT:
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL_:
			case OBJECT:
			case ON:
			case ORDERBY:
			case REF:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THROW:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNMANAGED:
			case USHORT:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case CARET:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
			case OP_RANGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1155;
				throwable_expression();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1156;
				block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public From_clauseContext from_clause() {
			return GetRuleContext<From_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Query_bodyContext query_body() {
			return GetRuleContext<Query_bodyContext>(0);
		}
		public Query_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterQuery_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitQuery_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_expressionContext query_expression() {
		Query_expressionContext _localctx = new Query_expressionContext(Context, State);
		EnterRule(_localctx, 132, RULE_query_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1159;
			from_clause();
			State = 1160;
			query_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class From_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(NotCParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(NotCParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterFrom_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitFrom_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrom_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public From_clauseContext from_clause() {
		From_clauseContext _localctx = new From_clauseContext(Context, State);
		EnterRule(_localctx, 134, RULE_from_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1162;
			Match(FROM);
			State = 1164;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
			case 1:
				{
				State = 1163;
				type_();
				}
				break;
			}
			State = 1166;
			identifier();
			State = 1167;
			Match(IN);
			State = 1168;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_or_group_clauseContext select_or_group_clause() {
			return GetRuleContext<Select_or_group_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Query_body_clauseContext[] query_body_clause() {
			return GetRuleContexts<Query_body_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Query_body_clauseContext query_body_clause(int i) {
			return GetRuleContext<Query_body_clauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Query_continuationContext query_continuation() {
			return GetRuleContext<Query_continuationContext>(0);
		}
		public Query_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterQuery_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitQuery_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_bodyContext query_body() {
		Query_bodyContext _localctx = new Query_bodyContext(Context, State);
		EnterRule(_localctx, 136, RULE_query_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 46)) & ~0x3f) == 0 && ((1L << (_la - 46)) & 288230376168501249L) != 0)) {
				{
				{
				State = 1170;
				query_body_clause();
				}
				}
				State = 1175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1176;
			select_or_group_clause();
			State = 1178;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,116,Context) ) {
			case 1:
				{
				State = 1177;
				query_continuation();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_body_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public From_clauseContext from_clause() {
			return GetRuleContext<From_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Let_clauseContext let_clause() {
			return GetRuleContext<Let_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Combined_join_clauseContext combined_join_clause() {
			return GetRuleContext<Combined_join_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Orderby_clauseContext orderby_clause() {
			return GetRuleContext<Orderby_clauseContext>(0);
		}
		public Query_body_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_body_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterQuery_body_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitQuery_body_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_body_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_body_clauseContext query_body_clause() {
		Query_body_clauseContext _localctx = new Query_body_clauseContext(Context, State);
		EnterRule(_localctx, 138, RULE_query_body_clause);
		try {
			State = 1185;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FROM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1180;
				from_clause();
				}
				break;
			case LET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1181;
				let_clause();
				}
				break;
			case WHERE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1182;
				where_clause();
				}
				break;
			case JOIN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1183;
				combined_join_clause();
				}
				break;
			case ORDERBY:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1184;
				orderby_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Let_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(NotCParser.LET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(NotCParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Let_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_let_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterLet_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitLet_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLet_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Let_clauseContext let_clause() {
		Let_clauseContext _localctx = new Let_clauseContext(Context, State);
		EnterRule(_localctx, 140, RULE_let_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1187;
			Match(LET);
			State = 1188;
			identifier();
			State = 1189;
			Match(ASSIGNMENT);
			State = 1190;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(NotCParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterWhere_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitWhere_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhere_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Where_clauseContext where_clause() {
		Where_clauseContext _localctx = new Where_clauseContext(Context, State);
		EnterRule(_localctx, 142, RULE_where_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1192;
			Match(WHERE);
			State = 1193;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Combined_join_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(NotCParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(NotCParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(NotCParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(NotCParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(NotCParser.INTO, 0); }
		public Combined_join_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_combined_join_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterCombined_join_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitCombined_join_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCombined_join_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Combined_join_clauseContext combined_join_clause() {
		Combined_join_clauseContext _localctx = new Combined_join_clauseContext(Context, State);
		EnterRule(_localctx, 144, RULE_combined_join_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1195;
			Match(JOIN);
			State = 1197;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,118,Context) ) {
			case 1:
				{
				State = 1196;
				type_();
				}
				break;
			}
			State = 1199;
			identifier();
			State = 1200;
			Match(IN);
			State = 1201;
			expression();
			State = 1202;
			Match(ON);
			State = 1203;
			expression();
			State = 1204;
			Match(EQUALS);
			State = 1205;
			expression();
			State = 1208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 1206;
				Match(INTO);
				State = 1207;
				identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Orderby_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDERBY() { return GetToken(NotCParser.ORDERBY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OrderingContext[] ordering() {
			return GetRuleContexts<OrderingContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderingContext ordering(int i) {
			return GetRuleContext<OrderingContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(NotCParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(NotCParser.COMMA, i);
		}
		public Orderby_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderby_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterOrderby_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitOrderby_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderby_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Orderby_clauseContext orderby_clause() {
		Orderby_clauseContext _localctx = new Orderby_clauseContext(Context, State);
		EnterRule(_localctx, 146, RULE_orderby_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1210;
			Match(ORDERBY);
			State = 1211;
			ordering();
			State = 1216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1212;
				Match(COMMA);
				State = 1213;
				ordering();
				}
				}
				State = 1218;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderingContext : ParserRuleContext {
		public IToken dir;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASCENDING() { return GetToken(NotCParser.ASCENDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCENDING() { return GetToken(NotCParser.DESCENDING, 0); }
		public OrderingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ordering; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterOrdering(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitOrdering(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrdering(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderingContext ordering() {
		OrderingContext _localctx = new OrderingContext(Context, State);
		EnterRule(_localctx, 148, RULE_ordering);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1219;
			expression();
			State = 1221;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASCENDING || _la==DESCENDING) {
				{
				State = 1220;
				_localctx.dir = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ASCENDING || _la==DESCENDING) ) {
					_localctx.dir = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_or_group_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(NotCParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(NotCParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(NotCParser.BY, 0); }
		public Select_or_group_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_or_group_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterSelect_or_group_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitSelect_or_group_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_or_group_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_or_group_clauseContext select_or_group_clause() {
		Select_or_group_clauseContext _localctx = new Select_or_group_clauseContext(Context, State);
		EnterRule(_localctx, 150, RULE_select_or_group_clause);
		try {
			State = 1230;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1223;
				Match(SELECT);
				State = 1224;
				expression();
				}
				break;
			case GROUP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1225;
				Match(GROUP);
				State = 1226;
				expression();
				State = 1227;
				Match(BY);
				State = 1228;
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_continuationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(NotCParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Query_bodyContext query_body() {
			return GetRuleContext<Query_bodyContext>(0);
		}
		public Query_continuationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_continuation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterQuery_continuation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitQuery_continuation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_continuation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_continuationContext query_continuation() {
		Query_continuationContext _localctx = new Query_continuationContext(Context, State);
		EnterRule(_localctx, 152, RULE_query_continuation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1232;
			Match(INTO);
			State = 1233;
			identifier();
			State = 1234;
			query_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Labeled_StatementContext labeled_Statement() {
			return GetRuleContext<Labeled_StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationStatementContext declarationStatement() {
			return GetRuleContext<DeclarationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 154, RULE_statement);
		try {
			State = 1240;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,123,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1236;
				labeled_Statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1237;
				declarationStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1238;
				embedded_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1239;
				comment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Local_variable_declarationContext local_variable_declaration() {
			return GetRuleContext<Local_variable_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(NotCParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Local_constant_declarationContext local_constant_declaration() {
			return GetRuleContext<Local_constant_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Local_function_declarationContext local_function_declaration() {
			return GetRuleContext<Local_function_declarationContext>(0);
		}
		public DeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationStatementContext declarationStatement() {
		DeclarationStatementContext _localctx = new DeclarationStatementContext(Context, State);
		EnterRule(_localctx, 156, RULE_declarationStatement);
		try {
			State = 1249;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,124,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1242;
				local_variable_declaration();
				State = 1243;
				Match(SEMICOLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1245;
				local_constant_declaration();
				State = 1246;
				Match(SEMICOLON);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1248;
				local_function_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_function_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Local_function_headerContext local_function_header() {
			return GetRuleContext<Local_function_headerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Local_function_bodyContext local_function_body() {
			return GetRuleContext<Local_function_bodyContext>(0);
		}
		public Local_function_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_function_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterLocal_function_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitLocal_function_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_function_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_function_declarationContext local_function_declaration() {
		Local_function_declarationContext _localctx = new Local_function_declarationContext(Context, State);
		EnterRule(_localctx, 158, RULE_local_function_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1251;
			local_function_header();
			State = 1252;
			local_function_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_function_headerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Return_typeContext return_type() {
			return GetRuleContext<Return_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(NotCParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(NotCParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Local_function_modifiersContext local_function_modifiers() {
			return GetRuleContext<Local_function_modifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public Local_function_headerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_function_header; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterLocal_function_header(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitLocal_function_header(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_function_header(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_function_headerContext local_function_header() {
		Local_function_headerContext _localctx = new Local_function_headerContext(Context, State);
		EnterRule(_localctx, 160, RULE_local_function_header);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1255;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,125,Context) ) {
			case 1:
				{
				State = 1254;
				local_function_modifiers();
				}
				break;
			}
			State = 1257;
			return_type();
			State = 1258;
			identifier();
			State = 1260;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 1259;
				type_parameter_list();
				}
			}

			State = 1262;
			Match(OPEN_PARENS);
			State = 1264;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5966486571164438916L) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 45037880355649083L) != 0)) {
				{
				State = 1263;
				formal_parameter_list();
				}
			}

			State = 1266;
			Match(CLOSE_PARENS);
			State = 1268;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 1267;
				type_parameter_constraints_clauses();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_function_modifiersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYNC() { return GetToken(NotCParser.ASYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSAFE() { return GetToken(NotCParser.UNSAFE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(NotCParser.STATIC, 0); }
		public Local_function_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_function_modifiers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterLocal_function_modifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitLocal_function_modifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_function_modifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_function_modifiersContext local_function_modifiers() {
		Local_function_modifiersContext _localctx = new Local_function_modifiersContext(Context, State);
		EnterRule(_localctx, 162, RULE_local_function_modifiers);
		int _la;
		try {
			State = 1276;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASYNC:
			case UNSAFE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1270;
				_la = TokenStream.LA(1);
				if ( !(_la==ASYNC || _la==UNSAFE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1272;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STATIC) {
					{
					State = 1271;
					Match(STATIC);
					}
				}

				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1274;
				Match(STATIC);
				State = 1275;
				_la = TokenStream.LA(1);
				if ( !(_la==ASYNC || _la==UNSAFE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_function_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Right_arrowContext right_arrow() {
			return GetRuleContext<Right_arrowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Throwable_expressionContext throwable_expression() {
			return GetRuleContext<Throwable_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(NotCParser.SEMICOLON, 0); }
		public Local_function_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_function_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterLocal_function_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitLocal_function_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_function_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_function_bodyContext local_function_body() {
		Local_function_bodyContext _localctx = new Local_function_bodyContext(Context, State);
		EnterRule(_localctx, 164, RULE_local_function_body);
		try {
			State = 1283;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1278;
				block();
				}
				break;
			case ASSIGNMENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1279;
				right_arrow();
				State = 1280;
				throwable_expression();
				State = 1281;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Labeled_StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(NotCParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public Labeled_StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeled_Statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterLabeled_Statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitLabeled_Statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeled_Statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Labeled_StatementContext labeled_Statement() {
		Labeled_StatementContext _localctx = new Labeled_StatementContext(Context, State);
		EnterRule(_localctx, 166, RULE_labeled_Statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1285;
			identifier();
			State = 1286;
			Match(COLON);
			State = 1287;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Embedded_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_embedded_statementContext simple_embedded_statement() {
			return GetRuleContext<Simple_embedded_statementContext>(0);
		}
		public Embedded_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_embedded_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterEmbedded_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitEmbedded_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmbedded_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Embedded_statementContext embedded_statement() {
		Embedded_statementContext _localctx = new Embedded_statementContext(Context, State);
		EnterRule(_localctx, 168, RULE_embedded_statement);
		try {
			State = 1291;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1289;
				block();
				}
				break;
			case SINGLE_LINE_DOC_COMMENT:
			case EMPTY_DELIMITED_DOC_COMMENT:
			case DELIMITED_DOC_COMMENT:
			case SINGLE_LINE_COMMENT:
			case DELIMITED_COMMENT:
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BREAK:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case CONTINUE:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DO:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FIXED:
			case FLOAT:
			case FOR:
			case FOREACH:
			case FROM:
			case GET:
			case GOTO:
			case GROUP:
			case IF:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LOCK:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL_:
			case OBJECT:
			case ON:
			case ORDERBY:
			case REF:
			case REMOVE:
			case RETURN:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case SWITCH:
			case THROW:
			case TRUE:
			case TRY:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNMANAGED:
			case UNSAFE:
			case USHORT:
			case USING:
			case VAR:
			case WHEN:
			case WHERE:
			case WHILE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case SEMICOLON:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case CARET:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
			case OP_RANGE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1290;
				simple_embedded_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_embedded_statementContext : ParserRuleContext {
		public Simple_embedded_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_embedded_statement; } }
	 
		public Simple_embedded_statementContext() { }
		public virtual void CopyFrom(Simple_embedded_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TryStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY() { return GetToken(NotCParser.TRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Catch_clausesContext catch_clauses() {
			return GetRuleContext<Catch_clausesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Finally_clauseContext finally_clause() {
			return GetRuleContext<Finally_clauseContext>(0);
		}
		public TryStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterTryStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitTryStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CheckedStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKED() { return GetToken(NotCParser.CHECKED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public CheckedStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterCheckedStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitCheckedStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheckedStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThrowStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROW() { return GetToken(NotCParser.THROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(NotCParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ThrowStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TheEmptyStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(NotCParser.SEMICOLON, 0); }
		public TheEmptyStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterTheEmptyStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitTheEmptyStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTheEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnsafeStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSAFE() { return GetToken(NotCParser.UNSAFE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public UnsafeStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterUnsafeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitUnsafeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsafeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(NotCParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(NotCParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(NotCParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(NotCParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(NotCParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_initializerContext for_initializer() {
			return GetRuleContext<For_initializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_iteratorContext for_iterator() {
			return GetRuleContext<For_iteratorContext>(0);
		}
		public ForStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BreakStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(NotCParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(NotCParser.SEMICOLON, 0); }
		public BreakStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(NotCParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(NotCParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(NotCParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public If_bodyContext[] if_body() {
			return GetRuleContexts<If_bodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_bodyContext if_body(int i) {
			return GetRuleContext<If_bodyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(NotCParser.ELSE, 0); }
		public IfStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(NotCParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(NotCParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GotoStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO() { return GetToken(NotCParser.GOTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(NotCParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(NotCParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(NotCParser.DEFAULT, 0); }
		public GotoStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterGotoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitGotoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGotoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SwitchStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(NotCParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(NotCParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(NotCParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(NotCParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(NotCParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Switch_sectionContext[] switch_section() {
			return GetRuleContexts<Switch_sectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Switch_sectionContext switch_section(int i) {
			return GetRuleContext<Switch_sectionContext>(i);
		}
		public SwitchStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FixedStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED() { return GetToken(NotCParser.FIXED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(NotCParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pointer_typeContext pointer_type() {
			return GetRuleContext<Pointer_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fixed_pointer_declaratorsContext fixed_pointer_declarators() {
			return GetRuleContext<Fixed_pointer_declaratorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(NotCParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public FixedStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterFixedStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitFixedStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixedStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(NotCParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(NotCParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(NotCParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public WhileStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(NotCParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(NotCParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(NotCParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(NotCParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(NotCParser.SEMICOLON, 0); }
		public DoStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterDoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitDoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForeachStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREACH() { return GetToken(NotCParser.FOREACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(NotCParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Local_variable_typeContext local_variable_type() {
			return GetRuleContext<Local_variable_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(NotCParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(NotCParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AWAIT() { return GetToken(NotCParser.AWAIT, 0); }
		public ForeachStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterForeachStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitForeachStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UncheckedStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCHECKED() { return GetToken(NotCParser.UNCHECKED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public UncheckedStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterUncheckedStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitUncheckedStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUncheckedStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(NotCParser.SEMICOLON, 0); }
		public ExpressionStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ContinueStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(NotCParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(NotCParser.SEMICOLON, 0); }
		public ContinueStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UsingStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(NotCParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(NotCParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Resource_acquisitionContext resource_acquisition() {
			return GetRuleContext<Resource_acquisitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(NotCParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public UsingStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterUsingStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitUsingStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LockStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK() { return GetToken(NotCParser.LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(NotCParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(NotCParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public LockStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterLockStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitLockStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class YieldStatementContext : Simple_embedded_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YIELD() { return GetToken(NotCParser.YIELD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(NotCParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(NotCParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(NotCParser.BREAK, 0); }
		public YieldStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterYieldStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitYieldStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYieldStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_embedded_statementContext simple_embedded_statement() {
		Simple_embedded_statementContext _localctx = new Simple_embedded_statementContext(Context, State);
		EnterRule(_localctx, 170, RULE_simple_embedded_statement);
		int _la;
		try {
			State = 1423;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,145,Context) ) {
			case 1:
				_localctx = new TheEmptyStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1293;
				Match(SEMICOLON);
				}
				break;
			case 2:
				_localctx = new ExpressionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1294;
				expression();
				State = 1295;
				Match(SEMICOLON);
				}
				break;
			case 3:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1297;
				Match(IF);
				State = 1298;
				Match(OPEN_PARENS);
				State = 1299;
				expression();
				State = 1300;
				Match(CLOSE_PARENS);
				State = 1301;
				if_body();
				State = 1304;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,133,Context) ) {
				case 1:
					{
					State = 1302;
					Match(ELSE);
					State = 1303;
					if_body();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new SwitchStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1306;
				Match(SWITCH);
				State = 1307;
				Match(OPEN_PARENS);
				State = 1308;
				expression();
				State = 1309;
				Match(CLOSE_PARENS);
				State = 1310;
				Match(OPEN_BRACE);
				State = 1314;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==CASE || _la==DEFAULT) {
					{
					{
					State = 1311;
					switch_section();
					}
					}
					State = 1316;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1317;
				Match(CLOSE_BRACE);
				}
				break;
			case 5:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1319;
				Match(WHILE);
				State = 1320;
				Match(OPEN_PARENS);
				State = 1321;
				expression();
				State = 1322;
				Match(CLOSE_PARENS);
				State = 1323;
				embedded_statement();
				}
				break;
			case 6:
				_localctx = new DoStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1325;
				Match(DO);
				State = 1326;
				embedded_statement();
				State = 1327;
				Match(WHILE);
				State = 1328;
				Match(OPEN_PARENS);
				State = 1329;
				expression();
				State = 1330;
				Match(CLOSE_PARENS);
				State = 1331;
				Match(SEMICOLON);
				}
				break;
			case 7:
				_localctx = new ForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1333;
				Match(FOR);
				State = 1334;
				Match(OPEN_PARENS);
				State = 1336;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5970984672411521412L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & -9070250890867779537L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 34359837139L) != 0)) {
					{
					State = 1335;
					for_initializer();
					}
				}

				State = 1338;
				Match(SEMICOLON);
				State = 1340;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5970989070458032516L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & -9070250976767125457L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 34359837139L) != 0)) {
					{
					State = 1339;
					expression();
					}
				}

				State = 1342;
				Match(SEMICOLON);
				State = 1344;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5970989070458032516L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & -9070250976767125457L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 34359837139L) != 0)) {
					{
					State = 1343;
					for_iterator();
					}
				}

				State = 1346;
				Match(CLOSE_PARENS);
				State = 1347;
				embedded_statement();
				}
				break;
			case 8:
				_localctx = new ForeachStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1349;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AWAIT) {
					{
					State = 1348;
					Match(AWAIT);
					}
				}

				State = 1351;
				Match(FOREACH);
				State = 1352;
				Match(OPEN_PARENS);
				State = 1353;
				local_variable_type();
				State = 1354;
				identifier();
				State = 1355;
				Match(IN);
				State = 1356;
				expression();
				State = 1357;
				Match(CLOSE_PARENS);
				State = 1358;
				embedded_statement();
				}
				break;
			case 9:
				_localctx = new BreakStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1360;
				Match(BREAK);
				State = 1361;
				Match(SEMICOLON);
				}
				break;
			case 10:
				_localctx = new ContinueStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1362;
				Match(CONTINUE);
				State = 1363;
				Match(SEMICOLON);
				}
				break;
			case 11:
				_localctx = new GotoStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 1364;
				Match(GOTO);
				State = 1369;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SINGLE_LINE_DOC_COMMENT:
				case EMPTY_DELIMITED_DOC_COMMENT:
				case DELIMITED_DOC_COMMENT:
				case SINGLE_LINE_COMMENT:
				case DELIMITED_COMMENT:
				case ADD:
				case ALIAS:
				case ARGLIST:
				case ASCENDING:
				case ASYNC:
				case AWAIT:
				case BY:
				case DESCENDING:
				case DYNAMIC:
				case EQUALS:
				case FROM:
				case GET:
				case GROUP:
				case INTO:
				case JOIN:
				case LET:
				case NAMEOF:
				case ON:
				case ORDERBY:
				case REMOVE:
				case SELECT:
				case SET:
				case UNMANAGED:
				case VAR:
				case WHEN:
				case WHERE:
				case YIELD:
				case IDENTIFIER:
					{
					State = 1365;
					identifier();
					}
					break;
				case CASE:
					{
					State = 1366;
					Match(CASE);
					State = 1367;
					expression();
					}
					break;
				case DEFAULT:
					{
					State = 1368;
					Match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1371;
				Match(SEMICOLON);
				}
				break;
			case 12:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 1372;
				Match(RETURN);
				State = 1374;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5970989070458032516L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & -9070250976767125457L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 34359837139L) != 0)) {
					{
					State = 1373;
					expression();
					}
				}

				State = 1376;
				Match(SEMICOLON);
				}
				break;
			case 13:
				_localctx = new ThrowStatementContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 1377;
				Match(THROW);
				State = 1379;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5970989070458032516L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & -9070250976767125457L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 34359837139L) != 0)) {
					{
					State = 1378;
					expression();
					}
				}

				State = 1381;
				Match(SEMICOLON);
				}
				break;
			case 14:
				_localctx = new TryStatementContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 1382;
				Match(TRY);
				State = 1383;
				block();
				State = 1389;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CATCH:
					{
					State = 1384;
					catch_clauses();
					State = 1386;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==FINALLY) {
						{
						State = 1385;
						finally_clause();
						}
					}

					}
					break;
				case FINALLY:
					{
					State = 1388;
					finally_clause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 15:
				_localctx = new CheckedStatementContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 1391;
				Match(CHECKED);
				State = 1392;
				block();
				}
				break;
			case 16:
				_localctx = new UncheckedStatementContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 1393;
				Match(UNCHECKED);
				State = 1394;
				block();
				}
				break;
			case 17:
				_localctx = new LockStatementContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 1395;
				Match(LOCK);
				State = 1396;
				Match(OPEN_PARENS);
				State = 1397;
				expression();
				State = 1398;
				Match(CLOSE_PARENS);
				State = 1399;
				embedded_statement();
				}
				break;
			case 18:
				_localctx = new UsingStatementContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 1401;
				Match(USING);
				State = 1402;
				Match(OPEN_PARENS);
				State = 1403;
				resource_acquisition();
				State = 1404;
				Match(CLOSE_PARENS);
				State = 1405;
				embedded_statement();
				}
				break;
			case 19:
				_localctx = new YieldStatementContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 1407;
				Match(YIELD);
				State = 1411;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case RETURN:
					{
					State = 1408;
					Match(RETURN);
					State = 1409;
					expression();
					}
					break;
				case BREAK:
					{
					State = 1410;
					Match(BREAK);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1413;
				Match(SEMICOLON);
				}
				break;
			case 20:
				_localctx = new UnsafeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 1414;
				Match(UNSAFE);
				State = 1415;
				block();
				}
				break;
			case 21:
				_localctx = new FixedStatementContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 1416;
				Match(FIXED);
				State = 1417;
				Match(OPEN_PARENS);
				State = 1418;
				pointer_type();
				State = 1419;
				fixed_pointer_declarators();
				State = 1420;
				Match(CLOSE_PARENS);
				State = 1421;
				embedded_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(NotCParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(NotCParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 172, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1425;
			Match(OPEN_BRACE);
			State = 1427;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4816603014114578820L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & -4449556569285724113L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 34359837139L) != 0)) {
				{
				State = 1426;
				statement_list();
				}
			}

			State = 1429;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_variable_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Local_variable_typeContext local_variable_type() {
			return GetRuleContext<Local_variable_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Local_variable_declaratorContext[] local_variable_declarator() {
			return GetRuleContexts<Local_variable_declaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Local_variable_declaratorContext local_variable_declarator(int i) {
			return GetRuleContext<Local_variable_declaratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(NotCParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(NotCParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READONLY() { return GetToken(NotCParser.READONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(NotCParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(NotCParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED() { return GetToken(NotCParser.FIXED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pointer_typeContext pointer_type() {
			return GetRuleContext<Pointer_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fixed_pointer_declaratorsContext fixed_pointer_declarators() {
			return GetRuleContext<Fixed_pointer_declaratorsContext>(0);
		}
		public Local_variable_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_variable_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterLocal_variable_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitLocal_variable_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_variable_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_variable_declarationContext local_variable_declaration() {
		Local_variable_declarationContext _localctx = new Local_variable_declarationContext(Context, State);
		EnterRule(_localctx, 174, RULE_local_variable_declaration);
		int _la;
		try {
			State = 1452;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SINGLE_LINE_DOC_COMMENT:
			case EMPTY_DELIMITED_DOC_COMMENT:
			case DELIMITED_DOC_COMMENT:
			case SINGLE_LINE_COMMENT:
			case DELIMITED_COMMENT:
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case DECIMAL:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case OBJECT:
			case ON:
			case ORDERBY:
			case REF:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case STRING:
			case UINT:
			case ULONG:
			case UNMANAGED:
			case USHORT:
			case USING:
			case VAR:
			case VOID:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case OPEN_PARENS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1435;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,147,Context) ) {
				case 1:
					{
					State = 1431;
					Match(USING);
					}
					break;
				case 2:
					{
					State = 1432;
					Match(REF);
					}
					break;
				case 3:
					{
					State = 1433;
					Match(REF);
					State = 1434;
					Match(READONLY);
					}
					break;
				}
				State = 1437;
				local_variable_type();
				State = 1438;
				local_variable_declarator();
				State = 1445;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1439;
					Match(COMMA);
					State = 1440;
					local_variable_declarator();
					State = 1441;
					if (!( this.IsLocalVariableDeclaration() )) throw new FailedPredicateException(this, " this.IsLocalVariableDeclaration() ");
					}
					}
					State = 1447;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case FIXED:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1448;
				Match(FIXED);
				State = 1449;
				pointer_type();
				State = 1450;
				fixed_pointer_declarators();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_variable_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(NotCParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public Local_variable_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_variable_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterLocal_variable_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitLocal_variable_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_variable_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_variable_typeContext local_variable_type() {
		Local_variable_typeContext _localctx = new Local_variable_typeContext(Context, State);
		EnterRule(_localctx, 176, RULE_local_variable_type);
		try {
			State = 1456;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,150,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1454;
				Match(VAR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1455;
				type_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_variable_declaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(NotCParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Local_variable_initializerContext local_variable_initializer() {
			return GetRuleContext<Local_variable_initializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(NotCParser.REF, 0); }
		public Local_variable_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_variable_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterLocal_variable_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitLocal_variable_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_variable_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_variable_declaratorContext local_variable_declarator() {
		Local_variable_declaratorContext _localctx = new Local_variable_declaratorContext(Context, State);
		EnterRule(_localctx, 178, RULE_local_variable_declarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1458;
			identifier();
			State = 1464;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,152,Context) ) {
			case 1:
				{
				State = 1459;
				Match(ASSIGNMENT);
				State = 1461;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,151,Context) ) {
				case 1:
					{
					State = 1460;
					Match(REF);
					}
					break;
				}
				State = 1463;
				local_variable_initializer();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_variable_initializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_initializerContext array_initializer() {
			return GetRuleContext<Array_initializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stackalloc_initializerContext stackalloc_initializer() {
			return GetRuleContext<Stackalloc_initializerContext>(0);
		}
		public Local_variable_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_variable_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterLocal_variable_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitLocal_variable_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_variable_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_variable_initializerContext local_variable_initializer() {
		Local_variable_initializerContext _localctx = new Local_variable_initializerContext(Context, State);
		EnterRule(_localctx, 180, RULE_local_variable_initializer);
		try {
			State = 1469;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SINGLE_LINE_DOC_COMMENT:
			case EMPTY_DELIMITED_DOC_COMMENT:
			case DELIMITED_DOC_COMMENT:
			case SINGLE_LINE_COMMENT:
			case DELIMITED_COMMENT:
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL_:
			case OBJECT:
			case ON:
			case ORDERBY:
			case REF:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNMANAGED:
			case USHORT:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case CARET:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
			case OP_RANGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1466;
				expression();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1467;
				array_initializer();
				}
				break;
			case STACKALLOC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1468;
				stackalloc_initializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_constant_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(NotCParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Constant_declaratorsContext constant_declarators() {
			return GetRuleContext<Constant_declaratorsContext>(0);
		}
		public Local_constant_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_constant_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterLocal_constant_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitLocal_constant_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_constant_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_constant_declarationContext local_constant_declaration() {
		Local_constant_declarationContext _localctx = new Local_constant_declarationContext(Context, State);
		EnterRule(_localctx, 182, RULE_local_constant_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1471;
			Match(CONST);
			State = 1472;
			type_();
			State = 1473;
			constant_declarators();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_embedded_statementContext simple_embedded_statement() {
			return GetRuleContext<Simple_embedded_statementContext>(0);
		}
		public If_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterIf_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitIf_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_bodyContext if_body() {
		If_bodyContext _localctx = new If_bodyContext(Context, State);
		EnterRule(_localctx, 184, RULE_if_body);
		try {
			State = 1477;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1475;
				block();
				}
				break;
			case SINGLE_LINE_DOC_COMMENT:
			case EMPTY_DELIMITED_DOC_COMMENT:
			case DELIMITED_DOC_COMMENT:
			case SINGLE_LINE_COMMENT:
			case DELIMITED_COMMENT:
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BREAK:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case CONTINUE:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DO:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FIXED:
			case FLOAT:
			case FOR:
			case FOREACH:
			case FROM:
			case GET:
			case GOTO:
			case GROUP:
			case IF:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LOCK:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL_:
			case OBJECT:
			case ON:
			case ORDERBY:
			case REF:
			case REMOVE:
			case RETURN:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case SWITCH:
			case THROW:
			case TRUE:
			case TRY:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNMANAGED:
			case UNSAFE:
			case USHORT:
			case USING:
			case VAR:
			case WHEN:
			case WHERE:
			case WHILE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case SEMICOLON:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case CARET:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
			case OP_RANGE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1476;
				simple_embedded_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_sectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Switch_labelContext[] switch_label() {
			return GetRuleContexts<Switch_labelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Switch_labelContext switch_label(int i) {
			return GetRuleContext<Switch_labelContext>(i);
		}
		public Switch_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_section; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterSwitch_section(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitSwitch_section(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_sectionContext switch_section() {
		Switch_sectionContext _localctx = new Switch_sectionContext(Context, State);
		EnterRule(_localctx, 186, RULE_switch_section);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1480;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1479;
					switch_label();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1482;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,155,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 1484;
			statement_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_labelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(NotCParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(NotCParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Case_guardContext case_guard() {
			return GetRuleContext<Case_guardContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(NotCParser.DEFAULT, 0); }
		public Switch_labelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterSwitch_label(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitSwitch_label(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_label(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_labelContext switch_label() {
		Switch_labelContext _localctx = new Switch_labelContext(Context, State);
		EnterRule(_localctx, 188, RULE_switch_label);
		int _la;
		try {
			State = 1495;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1486;
				Match(CASE);
				State = 1487;
				expression();
				State = 1489;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHEN) {
					{
					State = 1488;
					case_guard();
					}
				}

				State = 1491;
				Match(COLON);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1493;
				Match(DEFAULT);
				State = 1494;
				Match(COLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_guardContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(NotCParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Case_guardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_guard; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterCase_guard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitCase_guard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_guard(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Case_guardContext case_guard() {
		Case_guardContext _localctx = new Case_guardContext(Context, State);
		EnterRule(_localctx, 190, RULE_case_guard);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1497;
			Match(WHEN);
			State = 1498;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterStatement_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitStatement_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_listContext statement_list() {
		Statement_listContext _localctx = new Statement_listContext(Context, State);
		EnterRule(_localctx, 192, RULE_statement_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1501;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1500;
					statement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1503;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,158,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_initializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Local_variable_declarationContext local_variable_declaration() {
			return GetRuleContext<Local_variable_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(NotCParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(NotCParser.COMMA, i);
		}
		public For_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterFor_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitFor_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_initializerContext for_initializer() {
		For_initializerContext _localctx = new For_initializerContext(Context, State);
		EnterRule(_localctx, 194, RULE_for_initializer);
		int _la;
		try {
			State = 1514;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,160,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1505;
				local_variable_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1506;
				expression();
				State = 1511;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1507;
					Match(COMMA);
					State = 1508;
					expression();
					}
					}
					State = 1513;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_iteratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(NotCParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(NotCParser.COMMA, i);
		}
		public For_iteratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_iterator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterFor_iterator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitFor_iterator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_iterator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_iteratorContext for_iterator() {
		For_iteratorContext _localctx = new For_iteratorContext(Context, State);
		EnterRule(_localctx, 196, RULE_for_iterator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1516;
			expression();
			State = 1521;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1517;
				Match(COMMA);
				State = 1518;
				expression();
				}
				}
				State = 1523;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Catch_clausesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Specific_catch_clauseContext[] specific_catch_clause() {
			return GetRuleContexts<Specific_catch_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Specific_catch_clauseContext specific_catch_clause(int i) {
			return GetRuleContext<Specific_catch_clauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public General_catch_clauseContext general_catch_clause() {
			return GetRuleContext<General_catch_clauseContext>(0);
		}
		public Catch_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catch_clauses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterCatch_clauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitCatch_clauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatch_clauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Catch_clausesContext catch_clauses() {
		Catch_clausesContext _localctx = new Catch_clausesContext(Context, State);
		EnterRule(_localctx, 198, RULE_catch_clauses);
		int _la;
		try {
			int _alt;
			State = 1535;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,164,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1524;
				specific_catch_clause();
				State = 1528;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,162,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1525;
						specific_catch_clause();
						}
						} 
					}
					State = 1530;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,162,Context);
				}
				State = 1532;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CATCH) {
					{
					State = 1531;
					general_catch_clause();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1534;
				general_catch_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Specific_catch_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH() { return GetToken(NotCParser.CATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(NotCParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(NotCParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Exception_filterContext exception_filter() {
			return GetRuleContext<Exception_filterContext>(0);
		}
		public Specific_catch_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specific_catch_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterSpecific_catch_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitSpecific_catch_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecific_catch_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Specific_catch_clauseContext specific_catch_clause() {
		Specific_catch_clauseContext _localctx = new Specific_catch_clauseContext(Context, State);
		EnterRule(_localctx, 200, RULE_specific_catch_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1537;
			Match(CATCH);
			State = 1538;
			Match(OPEN_PARENS);
			State = 1539;
			class_type();
			State = 1541;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8285849179792019844L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 932276351493L) != 0)) {
				{
				State = 1540;
				identifier();
				}
			}

			State = 1543;
			Match(CLOSE_PARENS);
			State = 1545;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHEN) {
				{
				State = 1544;
				exception_filter();
				}
			}

			State = 1547;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class General_catch_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH() { return GetToken(NotCParser.CATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Exception_filterContext exception_filter() {
			return GetRuleContext<Exception_filterContext>(0);
		}
		public General_catch_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_general_catch_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterGeneral_catch_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitGeneral_catch_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneral_catch_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public General_catch_clauseContext general_catch_clause() {
		General_catch_clauseContext _localctx = new General_catch_clauseContext(Context, State);
		EnterRule(_localctx, 202, RULE_general_catch_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1549;
			Match(CATCH);
			State = 1551;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHEN) {
				{
				State = 1550;
				exception_filter();
				}
			}

			State = 1553;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exception_filterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(NotCParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(NotCParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(NotCParser.CLOSE_PARENS, 0); }
		public Exception_filterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exception_filter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterException_filter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitException_filter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitException_filter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exception_filterContext exception_filter() {
		Exception_filterContext _localctx = new Exception_filterContext(Context, State);
		EnterRule(_localctx, 204, RULE_exception_filter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1555;
			Match(WHEN);
			State = 1556;
			Match(OPEN_PARENS);
			State = 1557;
			expression();
			State = 1558;
			Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Finally_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINALLY() { return GetToken(NotCParser.FINALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Finally_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finally_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterFinally_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitFinally_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinally_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Finally_clauseContext finally_clause() {
		Finally_clauseContext _localctx = new Finally_clauseContext(Context, State);
		EnterRule(_localctx, 206, RULE_finally_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1560;
			Match(FINALLY);
			State = 1561;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Resource_acquisitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Local_variable_declarationContext local_variable_declaration() {
			return GetRuleContext<Local_variable_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Resource_acquisitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resource_acquisition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterResource_acquisition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitResource_acquisition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResource_acquisition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Resource_acquisitionContext resource_acquisition() {
		Resource_acquisitionContext _localctx = new Resource_acquisitionContext(Context, State);
		EnterRule(_localctx, 208, RULE_resource_acquisition);
		try {
			State = 1565;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,168,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1563;
				local_variable_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1564;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_declarationContext : ParserRuleContext {
		public Qualified_identifierContext qi;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMESPACE() { return GetToken(NotCParser.NAMESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_bodyContext namespace_body() {
			return GetRuleContext<Namespace_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_identifierContext qualified_identifier() {
			return GetRuleContext<Qualified_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(NotCParser.SEMICOLON, 0); }
		public Namespace_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterNamespace_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitNamespace_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_declarationContext namespace_declaration() {
		Namespace_declarationContext _localctx = new Namespace_declarationContext(Context, State);
		EnterRule(_localctx, 210, RULE_namespace_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1567;
			Match(NAMESPACE);
			State = 1568;
			_localctx.qi = qualified_identifier();
			State = 1569;
			namespace_body();
			State = 1571;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 1570;
				Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qualified_identifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(NotCParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(NotCParser.DOT, i);
		}
		public Qualified_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterQualified_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitQualified_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualified_identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Qualified_identifierContext qualified_identifier() {
		Qualified_identifierContext _localctx = new Qualified_identifierContext(Context, State);
		EnterRule(_localctx, 212, RULE_qualified_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1573;
			identifier();
			State = 1578;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 1574;
				Match(DOT);
				State = 1575;
				identifier();
				}
				}
				State = 1580;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(NotCParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(NotCParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Extern_alias_directivesContext extern_alias_directives() {
			return GetRuleContext<Extern_alias_directivesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Using_directivesContext using_directives() {
			return GetRuleContext<Using_directivesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_member_declarationsContext namespace_member_declarations() {
			return GetRuleContext<Namespace_member_declarationsContext>(0);
		}
		public Namespace_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterNamespace_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitNamespace_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_bodyContext namespace_body() {
		Namespace_bodyContext _localctx = new Namespace_bodyContext(Context, State);
		EnterRule(_localctx, 214, RULE_namespace_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1581;
			Match(OPEN_BRACE);
			State = 1583;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,171,Context) ) {
			case 1:
				{
				State = 1582;
				extern_alias_directives();
				}
				break;
			}
			State = 1586;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 1585;
				using_directives();
				}
			}

			State = 1589;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 54043780180885504L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 72057877516262915L) != 0)) {
				{
				State = 1588;
				namespace_member_declarations();
				}
			}

			State = 1591;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Extern_alias_directivesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Extern_alias_directiveContext[] extern_alias_directive() {
			return GetRuleContexts<Extern_alias_directiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Extern_alias_directiveContext extern_alias_directive(int i) {
			return GetRuleContext<Extern_alias_directiveContext>(i);
		}
		public Extern_alias_directivesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extern_alias_directives; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterExtern_alias_directives(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitExtern_alias_directives(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtern_alias_directives(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Extern_alias_directivesContext extern_alias_directives() {
		Extern_alias_directivesContext _localctx = new Extern_alias_directivesContext(Context, State);
		EnterRule(_localctx, 216, RULE_extern_alias_directives);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1594;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1593;
					extern_alias_directive();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1596;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,174,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Extern_alias_directiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERN() { return GetToken(NotCParser.EXTERN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALIAS() { return GetToken(NotCParser.ALIAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(NotCParser.SEMICOLON, 0); }
		public Extern_alias_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extern_alias_directive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterExtern_alias_directive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitExtern_alias_directive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtern_alias_directive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Extern_alias_directiveContext extern_alias_directive() {
		Extern_alias_directiveContext _localctx = new Extern_alias_directiveContext(Context, State);
		EnterRule(_localctx, 218, RULE_extern_alias_directive);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1598;
			Match(EXTERN);
			State = 1599;
			Match(ALIAS);
			State = 1600;
			identifier();
			State = 1601;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_directivesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Using_directiveContext[] using_directive() {
			return GetRuleContexts<Using_directiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Using_directiveContext using_directive(int i) {
			return GetRuleContext<Using_directiveContext>(i);
		}
		public Using_directivesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_directives; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterUsing_directives(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitUsing_directives(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsing_directives(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Using_directivesContext using_directives() {
		Using_directivesContext _localctx = new Using_directivesContext(Context, State);
		EnterRule(_localctx, 220, RULE_using_directives);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1604;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1603;
				using_directive();
				}
				}
				State = 1606;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==USING );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_directiveContext : ParserRuleContext {
		public Using_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_directive; } }
	 
		public Using_directiveContext() { }
		public virtual void CopyFrom(Using_directiveContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UsingAliasDirectiveContext : Using_directiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(NotCParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(NotCParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_or_type_nameContext namespace_or_type_name() {
			return GetRuleContext<Namespace_or_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(NotCParser.SEMICOLON, 0); }
		public UsingAliasDirectiveContext(Using_directiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterUsingAliasDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitUsingAliasDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingAliasDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UsingNamespaceDirectiveContext : Using_directiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(NotCParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_or_type_nameContext namespace_or_type_name() {
			return GetRuleContext<Namespace_or_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(NotCParser.SEMICOLON, 0); }
		public UsingNamespaceDirectiveContext(Using_directiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterUsingNamespaceDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitUsingNamespaceDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingNamespaceDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UsingStaticDirectiveContext : Using_directiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(NotCParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(NotCParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_or_type_nameContext namespace_or_type_name() {
			return GetRuleContext<Namespace_or_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(NotCParser.SEMICOLON, 0); }
		public UsingStaticDirectiveContext(Using_directiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterUsingStaticDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitUsingStaticDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingStaticDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UsingModuleDirectiveContext : Using_directiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(NotCParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULE() { return GetToken(NotCParser.MODULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_or_type_nameContext namespace_or_type_name() {
			return GetRuleContext<Namespace_or_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(NotCParser.SEMICOLON, 0); }
		public UsingModuleDirectiveContext(Using_directiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterUsingModuleDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitUsingModuleDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingModuleDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Using_directiveContext using_directive() {
		Using_directiveContext _localctx = new Using_directiveContext(Context, State);
		EnterRule(_localctx, 222, RULE_using_directive);
		try {
			State = 1628;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,176,Context) ) {
			case 1:
				_localctx = new UsingAliasDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1608;
				Match(USING);
				State = 1609;
				identifier();
				State = 1610;
				Match(ASSIGNMENT);
				State = 1611;
				namespace_or_type_name();
				State = 1612;
				Match(SEMICOLON);
				}
				break;
			case 2:
				_localctx = new UsingNamespaceDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1614;
				Match(USING);
				State = 1615;
				namespace_or_type_name();
				State = 1616;
				Match(SEMICOLON);
				}
				break;
			case 3:
				_localctx = new UsingStaticDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1618;
				Match(USING);
				State = 1619;
				Match(STATIC);
				State = 1620;
				namespace_or_type_name();
				State = 1621;
				Match(SEMICOLON);
				}
				break;
			case 4:
				_localctx = new UsingModuleDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1623;
				Match(USING);
				State = 1624;
				Match(MODULE);
				State = 1625;
				namespace_or_type_name();
				State = 1626;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_member_declarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_member_declarationContext[] namespace_member_declaration() {
			return GetRuleContexts<Namespace_member_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_member_declarationContext namespace_member_declaration(int i) {
			return GetRuleContext<Namespace_member_declarationContext>(i);
		}
		public Namespace_member_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_member_declarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterNamespace_member_declarations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitNamespace_member_declarations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace_member_declarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_member_declarationsContext namespace_member_declarations() {
		Namespace_member_declarationsContext _localctx = new Namespace_member_declarationsContext(Context, State);
		EnterRule(_localctx, 224, RULE_namespace_member_declarations);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1631;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1630;
					namespace_member_declaration();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1633;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,177,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_member_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_declarationContext namespace_declaration() {
			return GetRuleContext<Namespace_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_declarationContext type_declaration() {
			return GetRuleContext<Type_declarationContext>(0);
		}
		public Namespace_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_member_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterNamespace_member_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitNamespace_member_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_member_declarationContext namespace_member_declaration() {
		Namespace_member_declarationContext _localctx = new Namespace_member_declarationContext(Context, State);
		EnterRule(_localctx, 226, RULE_namespace_member_declaration);
		try {
			State = 1637;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAMESPACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1635;
				namespace_declaration();
				}
				break;
			case ASYNC:
			case DELEGATE:
			case ENUM:
			case EXTERN:
			case INTERFACE:
			case INTERNAL:
			case NEW:
			case PRIVATE:
			case PUBLIC:
			case READONLY:
			case REF:
			case STATIC:
			case STRUCT:
			case UNSAFE:
			case VOLATILE:
			case OPEN_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1636;
				type_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Struct_definitionContext struct_definition() {
			return GetRuleContext<Struct_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_definitionContext interface_definition() {
			return GetRuleContext<Interface_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_definitionContext enum_definition() {
			return GetRuleContext<Enum_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Delegate_definitionContext delegate_definition() {
			return GetRuleContext<Delegate_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public All_member_modifiersContext all_member_modifiers() {
			return GetRuleContext<All_member_modifiersContext>(0);
		}
		public Type_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterType_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitType_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_declarationContext type_declaration() {
		Type_declarationContext _localctx = new Type_declarationContext(Context, State);
		EnterRule(_localctx, 228, RULE_type_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1640;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1639;
				attributes();
				}
			}

			State = 1643;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,180,Context) ) {
			case 1:
				{
				State = 1642;
				all_member_modifiers();
				}
				break;
			}
			State = 1649;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case READONLY:
			case REF:
			case STRUCT:
				{
				State = 1645;
				struct_definition();
				}
				break;
			case INTERFACE:
				{
				State = 1646;
				interface_definition();
				}
				break;
			case ENUM:
				{
				State = 1647;
				enum_definition();
				}
				break;
			case DELEGATE:
				{
				State = 1648;
				delegate_definition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qualified_alias_memberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_COLON() { return GetToken(NotCParser.DOUBLE_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_argument_listContext type_argument_list() {
			return GetRuleContext<Type_argument_listContext>(0);
		}
		public Qualified_alias_memberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified_alias_member; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterQualified_alias_member(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitQualified_alias_member(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualified_alias_member(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Qualified_alias_memberContext qualified_alias_member() {
		Qualified_alias_memberContext _localctx = new Qualified_alias_memberContext(Context, State);
		EnterRule(_localctx, 230, RULE_qualified_alias_member);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1651;
			identifier();
			State = 1652;
			Match(DOUBLE_COLON);
			State = 1653;
			identifier();
			State = 1655;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,182,Context) ) {
			case 1:
				{
				State = 1654;
				type_argument_list();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(NotCParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameterContext[] type_parameter() {
			return GetRuleContexts<Type_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameterContext type_parameter(int i) {
			return GetRuleContext<Type_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(NotCParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(NotCParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(NotCParser.COMMA, i);
		}
		public Type_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterType_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitType_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameter_listContext type_parameter_list() {
		Type_parameter_listContext _localctx = new Type_parameter_listContext(Context, State);
		EnterRule(_localctx, 232, RULE_type_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1657;
			Match(LT);
			State = 1658;
			type_parameter();
			State = 1663;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1659;
				Match(COMMA);
				State = 1660;
				type_parameter();
				}
				}
				State = 1665;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1666;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Type_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterType_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitType_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameterContext type_parameter() {
		Type_parameterContext _localctx = new Type_parameterContext(Context, State);
		EnterRule(_localctx, 234, RULE_type_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1669;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1668;
				attributes();
				}
			}

			State = 1671;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_baseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(NotCParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(NotCParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(NotCParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_or_type_nameContext[] namespace_or_type_name() {
			return GetRuleContexts<Namespace_or_type_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_or_type_nameContext namespace_or_type_name(int i) {
			return GetRuleContext<Namespace_or_type_nameContext>(i);
		}
		public Class_baseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_base; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterClass_base(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitClass_base(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_base(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_baseContext class_base() {
		Class_baseContext _localctx = new Class_baseContext(Context, State);
		EnterRule(_localctx, 236, RULE_class_base);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1673;
			Match(COLON);
			State = 1674;
			class_type();
			State = 1679;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1675;
				Match(COMMA);
				State = 1676;
				namespace_or_type_name();
				}
				}
				State = 1681;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_type_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_or_type_nameContext[] namespace_or_type_name() {
			return GetRuleContexts<Namespace_or_type_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_or_type_nameContext namespace_or_type_name(int i) {
			return GetRuleContext<Namespace_or_type_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(NotCParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(NotCParser.COMMA, i);
		}
		public Interface_type_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_type_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterInterface_type_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitInterface_type_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_type_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_type_listContext interface_type_list() {
		Interface_type_listContext _localctx = new Interface_type_listContext(Context, State);
		EnterRule(_localctx, 238, RULE_interface_type_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1682;
			namespace_or_type_name();
			State = 1687;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1683;
				Match(COMMA);
				State = 1684;
				namespace_or_type_name();
				}
				}
				State = 1689;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameter_constraints_clausesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_constraints_clauseContext[] type_parameter_constraints_clause() {
			return GetRuleContexts<Type_parameter_constraints_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_constraints_clauseContext type_parameter_constraints_clause(int i) {
			return GetRuleContext<Type_parameter_constraints_clauseContext>(i);
		}
		public Type_parameter_constraints_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter_constraints_clauses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterType_parameter_constraints_clauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitType_parameter_constraints_clauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter_constraints_clauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
		Type_parameter_constraints_clausesContext _localctx = new Type_parameter_constraints_clausesContext(Context, State);
		EnterRule(_localctx, 240, RULE_type_parameter_constraints_clauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1691;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1690;
				type_parameter_constraints_clause();
				}
				}
				State = 1693;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHERE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameter_constraints_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(NotCParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(NotCParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_constraintsContext type_parameter_constraints() {
			return GetRuleContext<Type_parameter_constraintsContext>(0);
		}
		public Type_parameter_constraints_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter_constraints_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterType_parameter_constraints_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitType_parameter_constraints_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter_constraints_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameter_constraints_clauseContext type_parameter_constraints_clause() {
		Type_parameter_constraints_clauseContext _localctx = new Type_parameter_constraints_clauseContext(Context, State);
		EnterRule(_localctx, 242, RULE_type_parameter_constraints_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1695;
			Match(WHERE);
			State = 1696;
			identifier();
			State = 1697;
			Match(COLON);
			State = 1698;
			type_parameter_constraints();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameter_constraintsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Constructor_constraintContext constructor_constraint() {
			return GetRuleContext<Constructor_constraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Primary_constraintContext primary_constraint() {
			return GetRuleContext<Primary_constraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(NotCParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(NotCParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Secondary_constraintsContext secondary_constraints() {
			return GetRuleContext<Secondary_constraintsContext>(0);
		}
		public Type_parameter_constraintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter_constraints; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterType_parameter_constraints(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitType_parameter_constraints(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter_constraints(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameter_constraintsContext type_parameter_constraints() {
		Type_parameter_constraintsContext _localctx = new Type_parameter_constraintsContext(Context, State);
		EnterRule(_localctx, 244, RULE_type_parameter_constraints);
		int _la;
		try {
			State = 1710;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1700;
				constructor_constraint();
				}
				break;
			case SINGLE_LINE_DOC_COMMENT:
			case EMPTY_DELIMITED_DOC_COMMENT:
			case DELIMITED_DOC_COMMENT:
			case SINGLE_LINE_COMMENT:
			case DELIMITED_COMMENT:
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BY:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case NAMEOF:
			case OBJECT:
			case ON:
			case ORDERBY:
			case REMOVE:
			case SELECT:
			case SET:
			case STRING:
			case STRUCT:
			case UNMANAGED:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1701;
				primary_constraint();
				State = 1704;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,188,Context) ) {
				case 1:
					{
					State = 1702;
					Match(COMMA);
					State = 1703;
					secondary_constraints();
					}
					break;
				}
				State = 1708;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1706;
					Match(COMMA);
					State = 1707;
					constructor_constraint();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_constraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(NotCParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNMANAGED() { return GetToken(NotCParser.UNMANAGED, 0); }
		public Primary_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterPrimary_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitPrimary_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_constraintContext primary_constraint() {
		Primary_constraintContext _localctx = new Primary_constraintContext(Context, State);
		EnterRule(_localctx, 246, RULE_primary_constraint);
		try {
			State = 1715;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,191,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1712;
				class_type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1713;
				Match(STRUCT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1714;
				Match(UNMANAGED);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Secondary_constraintsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_or_type_nameContext[] namespace_or_type_name() {
			return GetRuleContexts<Namespace_or_type_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_or_type_nameContext namespace_or_type_name(int i) {
			return GetRuleContext<Namespace_or_type_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(NotCParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(NotCParser.COMMA, i);
		}
		public Secondary_constraintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_secondary_constraints; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterSecondary_constraints(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitSecondary_constraints(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSecondary_constraints(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Secondary_constraintsContext secondary_constraints() {
		Secondary_constraintsContext _localctx = new Secondary_constraintsContext(Context, State);
		EnterRule(_localctx, 248, RULE_secondary_constraints);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1717;
			namespace_or_type_name();
			State = 1722;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,192,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1718;
					Match(COMMA);
					State = 1719;
					namespace_or_type_name();
					}
					} 
				}
				State = 1724;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,192,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_constraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(NotCParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(NotCParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(NotCParser.CLOSE_PARENS, 0); }
		public Constructor_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterConstructor_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitConstructor_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_constraintContext constructor_constraint() {
		Constructor_constraintContext _localctx = new Constructor_constraintContext(Context, State);
		EnterRule(_localctx, 250, RULE_constructor_constraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1725;
			Match(NEW);
			State = 1726;
			Match(OPEN_PARENS);
			State = 1727;
			Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(NotCParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(NotCParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Class_member_declarationsContext class_member_declarations() {
			return GetRuleContext<Class_member_declarationsContext>(0);
		}
		public Class_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterClass_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitClass_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_bodyContext class_body() {
		Class_bodyContext _localctx = new Class_bodyContext(Context, State);
		EnterRule(_localctx, 252, RULE_class_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1729;
			Match(OPEN_BRACE);
			State = 1731;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5914694178446840196L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 180151663161761581L) != 0) || _la==TILDE) {
				{
				State = 1730;
				class_member_declarations();
				}
			}

			State = 1733;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_member_declarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Class_member_declarationContext[] class_member_declaration() {
			return GetRuleContexts<Class_member_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_member_declarationContext class_member_declaration(int i) {
			return GetRuleContext<Class_member_declarationContext>(i);
		}
		public Class_member_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_member_declarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterClass_member_declarations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitClass_member_declarations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_member_declarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_member_declarationsContext class_member_declarations() {
		Class_member_declarationsContext _localctx = new Class_member_declarationsContext(Context, State);
		EnterRule(_localctx, 254, RULE_class_member_declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1736;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1735;
				class_member_declaration();
				}
				}
				State = 1738;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & -5914694178446840196L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 180151663161761581L) != 0) || _la==TILDE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_member_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Common_member_declarationContext common_member_declaration() {
			return GetRuleContext<Common_member_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Destructor_definitionContext destructor_definition() {
			return GetRuleContext<Destructor_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public All_member_modifiersContext all_member_modifiers() {
			return GetRuleContext<All_member_modifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentsContext comments() {
			return GetRuleContext<CommentsContext>(0);
		}
		public Class_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_member_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterClass_member_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitClass_member_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_member_declarationContext class_member_declaration() {
		Class_member_declarationContext _localctx = new Class_member_declarationContext(Context, State);
		EnterRule(_localctx, 256, RULE_class_member_declaration);
		int _la;
		try {
			State = 1751;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,198,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1741;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_BRACKET) {
					{
					State = 1740;
					attributes();
					}
				}

				State = 1744;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,196,Context) ) {
				case 1:
					{
					State = 1743;
					all_member_modifiers();
					}
					break;
				}
				State = 1748;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SINGLE_LINE_DOC_COMMENT:
				case EMPTY_DELIMITED_DOC_COMMENT:
				case DELIMITED_DOC_COMMENT:
				case SINGLE_LINE_COMMENT:
				case DELIMITED_COMMENT:
				case ADD:
				case ALIAS:
				case ARGLIST:
				case ASCENDING:
				case ASYNC:
				case AWAIT:
				case BOOL:
				case BY:
				case BYTE:
				case CHAR:
				case CONST:
				case DECIMAL:
				case DELEGATE:
				case DESCENDING:
				case DOUBLE:
				case DYNAMIC:
				case ENUM:
				case EQUALS:
				case EVENT:
				case EXPLICIT:
				case FLOAT:
				case FROM:
				case GET:
				case GROUP:
				case IMPLICIT:
				case INT:
				case INTERFACE:
				case INTO:
				case JOIN:
				case LET:
				case LONG:
				case NAMEOF:
				case OBJECT:
				case ON:
				case ORDERBY:
				case READONLY:
				case REF:
				case REMOVE:
				case SBYTE:
				case SELECT:
				case SET:
				case SHORT:
				case STRING:
				case STRUCT:
				case UINT:
				case ULONG:
				case UNMANAGED:
				case USHORT:
				case VAR:
				case VOID:
				case WHEN:
				case WHERE:
				case YIELD:
				case IDENTIFIER:
				case OPEN_PARENS:
					{
					State = 1746;
					common_member_declaration();
					}
					break;
				case TILDE:
					{
					State = 1747;
					destructor_definition();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1750;
				comments();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext[] comment() {
			return GetRuleContexts<CommentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext comment(int i) {
			return GetRuleContext<CommentContext>(i);
		}
		public CommentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterComments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitComments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentsContext comments() {
		CommentsContext _localctx = new CommentsContext(Context, State);
		EnterRule(_localctx, 258, RULE_comments);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1754;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1753;
					comment();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1756;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,199,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINGLE_LINE_DOC_COMMENT() { return GetToken(NotCParser.SINGLE_LINE_DOC_COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY_DELIMITED_DOC_COMMENT() { return GetToken(NotCParser.EMPTY_DELIMITED_DOC_COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELIMITED_DOC_COMMENT() { return GetToken(NotCParser.DELIMITED_DOC_COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINGLE_LINE_COMMENT() { return GetToken(NotCParser.SINGLE_LINE_COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELIMITED_COMMENT() { return GetToken(NotCParser.DELIMITED_COMMENT, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(Context, State);
		EnterRule(_localctx, 260, RULE_comment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1758;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 124L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class All_member_modifiersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public All_member_modifierContext[] all_member_modifier() {
			return GetRuleContexts<All_member_modifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public All_member_modifierContext all_member_modifier(int i) {
			return GetRuleContext<All_member_modifierContext>(i);
		}
		public All_member_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_all_member_modifiers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterAll_member_modifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitAll_member_modifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAll_member_modifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public All_member_modifiersContext all_member_modifiers() {
		All_member_modifiersContext _localctx = new All_member_modifiersContext(Context, State);
		EnterRule(_localctx, 262, RULE_all_member_modifiers);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1761;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1760;
					all_member_modifier();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1763;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,200,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class All_member_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(NotCParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(NotCParser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERNAL() { return GetToken(NotCParser.INTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(NotCParser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READONLY() { return GetToken(NotCParser.READONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOLATILE() { return GetToken(NotCParser.VOLATILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(NotCParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSAFE() { return GetToken(NotCParser.UNSAFE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERN() { return GetToken(NotCParser.EXTERN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYNC() { return GetToken(NotCParser.ASYNC, 0); }
		public All_member_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_all_member_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterAll_member_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitAll_member_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAll_member_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public All_member_modifierContext all_member_modifier() {
		All_member_modifierContext _localctx = new All_member_modifierContext(Context, State);
		EnterRule(_localctx, 264, RULE_all_member_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1765;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 36029346774794240L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 141734971137L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Common_member_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Constant_declarationContext constant_declaration() {
			return GetRuleContext<Constant_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Typed_member_declarationContext typed_member_declaration() {
			return GetRuleContext<Typed_member_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Event_declarationContext event_declaration() {
			return GetRuleContext<Event_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Conversion_operator_declaratorContext conversion_operator_declarator() {
			return GetRuleContext<Conversion_operator_declaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Right_arrowContext right_arrow() {
			return GetRuleContext<Right_arrowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Throwable_expressionContext throwable_expression() {
			return GetRuleContext<Throwable_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(NotCParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Constructor_declarationContext constructor_declaration() {
			return GetRuleContext<Constructor_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(NotCParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Method_declarationContext method_declaration() {
			return GetRuleContext<Method_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_definitionContext struct_definition() {
			return GetRuleContext<Struct_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_definitionContext interface_definition() {
			return GetRuleContext<Interface_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_definitionContext enum_definition() {
			return GetRuleContext<Enum_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Delegate_definitionContext delegate_definition() {
			return GetRuleContext<Delegate_definitionContext>(0);
		}
		public Common_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_common_member_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterCommon_member_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitCommon_member_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommon_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Common_member_declarationContext common_member_declaration() {
		Common_member_declarationContext _localctx = new Common_member_declarationContext(Context, State);
		EnterRule(_localctx, 266, RULE_common_member_declaration);
		try {
			State = 1785;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,202,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1767;
				constant_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1768;
				typed_member_declaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1769;
				event_declaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1770;
				conversion_operator_declarator();
				State = 1776;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OPEN_BRACE:
				case SEMICOLON:
					{
					State = 1771;
					body();
					}
					break;
				case ASSIGNMENT:
					{
					State = 1772;
					right_arrow();
					State = 1773;
					throwable_expression();
					State = 1774;
					Match(SEMICOLON);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1778;
				constructor_declaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1779;
				Match(VOID);
				State = 1780;
				method_declaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1781;
				struct_definition();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1782;
				interface_definition();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1783;
				enum_definition();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1784;
				delegate_definition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Typed_member_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_or_type_nameContext namespace_or_type_name() {
			return GetRuleContext<Namespace_or_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(NotCParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Method_declarationContext method_declaration() {
			return GetRuleContext<Method_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Property_declarationContext property_declaration() {
			return GetRuleContext<Property_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Operator_declarationContext operator_declaration() {
			return GetRuleContext<Operator_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Field_declarationContext field_declaration() {
			return GetRuleContext<Field_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(NotCParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READONLY() { return GetToken(NotCParser.READONLY, 0); }
		public Typed_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typed_member_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterTyped_member_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitTyped_member_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTyped_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Typed_member_declarationContext typed_member_declaration() {
		Typed_member_declarationContext _localctx = new Typed_member_declarationContext(Context, State);
		EnterRule(_localctx, 268, RULE_typed_member_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1792;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,203,Context) ) {
			case 1:
				{
				State = 1787;
				Match(REF);
				}
				break;
			case 2:
				{
				State = 1788;
				Match(READONLY);
				State = 1789;
				Match(REF);
				}
				break;
			case 3:
				{
				State = 1790;
				Match(REF);
				State = 1791;
				Match(READONLY);
				}
				break;
			}
			State = 1794;
			type_();
			State = 1802;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,204,Context) ) {
			case 1:
				{
				State = 1795;
				namespace_or_type_name();
				State = 1796;
				Match(DOT);
				}
				break;
			case 2:
				{
				State = 1798;
				method_declaration();
				}
				break;
			case 3:
				{
				State = 1799;
				property_declaration();
				}
				break;
			case 4:
				{
				State = 1800;
				operator_declaration();
				}
				break;
			case 5:
				{
				State = 1801;
				field_declaration();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_declaratorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Constant_declaratorContext[] constant_declarator() {
			return GetRuleContexts<Constant_declaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Constant_declaratorContext constant_declarator(int i) {
			return GetRuleContext<Constant_declaratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(NotCParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(NotCParser.COMMA, i);
		}
		public Constant_declaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_declarators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterConstant_declarators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitConstant_declarators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant_declarators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constant_declaratorsContext constant_declarators() {
		Constant_declaratorsContext _localctx = new Constant_declaratorsContext(Context, State);
		EnterRule(_localctx, 270, RULE_constant_declarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1804;
			constant_declarator();
			State = 1809;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1805;
				Match(COMMA);
				State = 1806;
				constant_declarator();
				}
				}
				State = 1811;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_declaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(NotCParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Constant_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterConstant_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitConstant_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constant_declaratorContext constant_declarator() {
		Constant_declaratorContext _localctx = new Constant_declaratorContext(Context, State);
		EnterRule(_localctx, 272, RULE_constant_declarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1812;
			identifier();
			State = 1813;
			Match(ASSIGNMENT);
			State = 1814;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declaratorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declaratorContext[] variable_declarator() {
			return GetRuleContexts<Variable_declaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declaratorContext variable_declarator(int i) {
			return GetRuleContext<Variable_declaratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(NotCParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(NotCParser.COMMA, i);
		}
		public Variable_declaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declarators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterVariable_declarators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitVariable_declarators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_declarators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declaratorsContext variable_declarators() {
		Variable_declaratorsContext _localctx = new Variable_declaratorsContext(Context, State);
		EnterRule(_localctx, 274, RULE_variable_declarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1816;
			variable_declarator();
			State = 1821;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1817;
				Match(COMMA);
				State = 1818;
				variable_declarator();
				}
				}
				State = 1823;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(NotCParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_initializerContext variable_initializer() {
			return GetRuleContext<Variable_initializerContext>(0);
		}
		public Variable_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterVariable_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitVariable_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declaratorContext variable_declarator() {
		Variable_declaratorContext _localctx = new Variable_declaratorContext(Context, State);
		EnterRule(_localctx, 276, RULE_variable_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1824;
			identifier();
			State = 1827;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGNMENT) {
				{
				State = 1825;
				Match(ASSIGNMENT);
				State = 1826;
				variable_initializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_initializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_initializerContext array_initializer() {
			return GetRuleContext<Array_initializerContext>(0);
		}
		public Variable_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterVariable_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitVariable_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_initializerContext variable_initializer() {
		Variable_initializerContext _localctx = new Variable_initializerContext(Context, State);
		EnterRule(_localctx, 278, RULE_variable_initializer);
		try {
			State = 1831;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SINGLE_LINE_DOC_COMMENT:
			case EMPTY_DELIMITED_DOC_COMMENT:
			case DELIMITED_DOC_COMMENT:
			case SINGLE_LINE_COMMENT:
			case DELIMITED_COMMENT:
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL_:
			case OBJECT:
			case ON:
			case ORDERBY:
			case REF:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNMANAGED:
			case USHORT:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case CARET:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
			case OP_RANGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1829;
				expression();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1830;
				array_initializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(NotCParser.VOID, 0); }
		public Return_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterReturn_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitReturn_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_typeContext return_type() {
		Return_typeContext _localctx = new Return_typeContext(Context, State);
		EnterRule(_localctx, 280, RULE_return_type);
		try {
			State = 1835;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,209,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1833;
				type_();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1834;
				Match(VOID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_or_type_nameContext namespace_or_type_name() {
			return GetRuleContext<Namespace_or_type_nameContext>(0);
		}
		public Member_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterMember_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitMember_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_nameContext member_name() {
		Member_nameContext _localctx = new Member_nameContext(Context, State);
		EnterRule(_localctx, 282, RULE_member_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1837;
			namespace_or_type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(NotCParser.SEMICOLON, 0); }
		public Method_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterMethod_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitMethod_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_bodyContext method_body() {
		Method_bodyContext _localctx = new Method_bodyContext(Context, State);
		EnterRule(_localctx, 284, RULE_method_body);
		try {
			State = 1841;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1839;
				block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1840;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Formal_parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_arrayContext parameter_array() {
			return GetRuleContext<Parameter_arrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fixed_parametersContext fixed_parameters() {
			return GetRuleContext<Fixed_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(NotCParser.COMMA, 0); }
		public Formal_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formal_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterFormal_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitFormal_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormal_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Formal_parameter_listContext formal_parameter_list() {
		Formal_parameter_listContext _localctx = new Formal_parameter_listContext(Context, State);
		EnterRule(_localctx, 286, RULE_formal_parameter_list);
		int _la;
		try {
			State = 1849;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,212,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1843;
				parameter_array();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1844;
				fixed_parameters();
				State = 1847;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1845;
					Match(COMMA);
					State = 1846;
					parameter_array();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_parametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fixed_parameterContext[] fixed_parameter() {
			return GetRuleContexts<Fixed_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fixed_parameterContext fixed_parameter(int i) {
			return GetRuleContext<Fixed_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(NotCParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(NotCParser.COMMA, i);
		}
		public Fixed_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterFixed_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitFixed_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_parametersContext fixed_parameters() {
		Fixed_parametersContext _localctx = new Fixed_parametersContext(Context, State);
		EnterRule(_localctx, 288, RULE_fixed_parameters);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1851;
			fixed_parameter();
			State = 1856;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,213,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1852;
					Match(COMMA);
					State = 1853;
					fixed_parameter();
					}
					} 
				}
				State = 1858;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,213,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_parameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Arg_declarationContext arg_declaration() {
			return GetRuleContext<Arg_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_modifierContext parameter_modifier() {
			return GetRuleContext<Parameter_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARGLIST() { return GetToken(NotCParser.ARGLIST, 0); }
		public Fixed_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterFixed_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitFixed_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_parameterContext fixed_parameter() {
		Fixed_parameterContext _localctx = new Fixed_parameterContext(Context, State);
		EnterRule(_localctx, 290, RULE_fixed_parameter);
		int _la;
		try {
			State = 1867;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,216,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1860;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_BRACKET) {
					{
					State = 1859;
					attributes();
					}
				}

				State = 1863;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 52)) & ~0x3f) == 0 && ((1L << (_la - 52)) & 17301505L) != 0)) {
					{
					State = 1862;
					parameter_modifier();
					}
				}

				State = 1865;
				arg_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1866;
				Match(ARGLIST);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(NotCParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(NotCParser.OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(NotCParser.IN, 0); }
		public Parameter_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterParameter_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitParameter_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_modifierContext parameter_modifier() {
		Parameter_modifierContext _localctx = new Parameter_modifierContext(Context, State);
		EnterRule(_localctx, 292, RULE_parameter_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1869;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 52)) & ~0x3f) == 0 && ((1L << (_la - 52)) & 17301505L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_arrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAMS() { return GetToken(NotCParser.PARAMS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Array_typeContext array_type() {
			return GetRuleContext<Array_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Parameter_arrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterParameter_array(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitParameter_array(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_array(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_arrayContext parameter_array() {
		Parameter_arrayContext _localctx = new Parameter_arrayContext(Context, State);
		EnterRule(_localctx, 294, RULE_parameter_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1872;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1871;
				attributes();
				}
			}

			State = 1874;
			Match(PARAMS);
			State = 1875;
			array_type();
			State = 1876;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Accessor_declarationsContext : ParserRuleContext {
		public AttributesContext attrs;
		public Accessor_modifierContext mods;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET() { return GetToken(NotCParser.GET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Accessor_bodyContext accessor_body() {
			return GetRuleContext<Accessor_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(NotCParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Accessor_modifierContext accessor_modifier() {
			return GetRuleContext<Accessor_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Set_accessor_declarationContext set_accessor_declaration() {
			return GetRuleContext<Set_accessor_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Get_accessor_declarationContext get_accessor_declaration() {
			return GetRuleContext<Get_accessor_declarationContext>(0);
		}
		public Accessor_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessor_declarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterAccessor_declarations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitAccessor_declarations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessor_declarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Accessor_declarationsContext accessor_declarations() {
		Accessor_declarationsContext _localctx = new Accessor_declarationsContext(Context, State);
		EnterRule(_localctx, 296, RULE_accessor_declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1879;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1878;
				_localctx.attrs = attributes();
				}
			}

			State = 1882;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTERNAL || _la==PRIVATE) {
				{
				State = 1881;
				_localctx.mods = accessor_modifier();
				}
			}

			State = 1894;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GET:
				{
				State = 1884;
				Match(GET);
				State = 1885;
				accessor_body();
				State = 1887;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INTERNAL || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 140737488355585L) != 0)) {
					{
					State = 1886;
					set_accessor_declaration();
					}
				}

				}
				break;
			case SET:
				{
				State = 1889;
				Match(SET);
				State = 1890;
				accessor_body();
				State = 1892;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GET || _la==INTERNAL || _la==PRIVATE || _la==OPEN_BRACKET) {
					{
					State = 1891;
					get_accessor_declaration();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Get_accessor_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET() { return GetToken(NotCParser.GET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Accessor_bodyContext accessor_body() {
			return GetRuleContext<Accessor_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Accessor_modifierContext accessor_modifier() {
			return GetRuleContext<Accessor_modifierContext>(0);
		}
		public Get_accessor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_get_accessor_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterGet_accessor_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitGet_accessor_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGet_accessor_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Get_accessor_declarationContext get_accessor_declaration() {
		Get_accessor_declarationContext _localctx = new Get_accessor_declarationContext(Context, State);
		EnterRule(_localctx, 298, RULE_get_accessor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1897;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1896;
				attributes();
				}
			}

			State = 1900;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTERNAL || _la==PRIVATE) {
				{
				State = 1899;
				accessor_modifier();
				}
			}

			State = 1902;
			Match(GET);
			State = 1903;
			accessor_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_accessor_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(NotCParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Accessor_bodyContext accessor_body() {
			return GetRuleContext<Accessor_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Accessor_modifierContext accessor_modifier() {
			return GetRuleContext<Accessor_modifierContext>(0);
		}
		public Set_accessor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_accessor_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterSet_accessor_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitSet_accessor_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_accessor_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_accessor_declarationContext set_accessor_declaration() {
		Set_accessor_declarationContext _localctx = new Set_accessor_declarationContext(Context, State);
		EnterRule(_localctx, 300, RULE_set_accessor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1906;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1905;
				attributes();
				}
			}

			State = 1909;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTERNAL || _la==PRIVATE) {
				{
				State = 1908;
				accessor_modifier();
				}
			}

			State = 1911;
			Match(SET);
			State = 1912;
			accessor_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Accessor_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERNAL() { return GetToken(NotCParser.INTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(NotCParser.PRIVATE, 0); }
		public Accessor_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessor_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterAccessor_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitAccessor_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessor_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Accessor_modifierContext accessor_modifier() {
		Accessor_modifierContext _localctx = new Accessor_modifierContext(Context, State);
		EnterRule(_localctx, 302, RULE_accessor_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1914;
			_la = TokenStream.LA(1);
			if ( !(_la==INTERNAL || _la==PRIVATE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Accessor_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(NotCParser.SEMICOLON, 0); }
		public Accessor_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessor_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterAccessor_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitAccessor_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessor_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Accessor_bodyContext accessor_body() {
		Accessor_bodyContext _localctx = new Accessor_bodyContext(Context, State);
		EnterRule(_localctx, 304, RULE_accessor_body);
		try {
			State = 1918;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1916;
				block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1917;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_accessor_declarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(NotCParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Remove_accessor_declarationContext remove_accessor_declaration() {
			return GetRuleContext<Remove_accessor_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOVE() { return GetToken(NotCParser.REMOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Add_accessor_declarationContext add_accessor_declaration() {
			return GetRuleContext<Add_accessor_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Event_accessor_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_accessor_declarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterEvent_accessor_declarations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitEvent_accessor_declarations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvent_accessor_declarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Event_accessor_declarationsContext event_accessor_declarations() {
		Event_accessor_declarationsContext _localctx = new Event_accessor_declarationsContext(Context, State);
		EnterRule(_localctx, 306, RULE_event_accessor_declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1921;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1920;
				attributes();
				}
			}

			State = 1931;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
				{
				State = 1923;
				Match(ADD);
				State = 1924;
				block();
				State = 1925;
				remove_accessor_declaration();
				}
				break;
			case REMOVE:
				{
				State = 1927;
				Match(REMOVE);
				State = 1928;
				block();
				State = 1929;
				add_accessor_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_accessor_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(NotCParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Add_accessor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_accessor_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterAdd_accessor_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitAdd_accessor_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_accessor_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Add_accessor_declarationContext add_accessor_declaration() {
		Add_accessor_declarationContext _localctx = new Add_accessor_declarationContext(Context, State);
		EnterRule(_localctx, 308, RULE_add_accessor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1934;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1933;
				attributes();
				}
			}

			State = 1936;
			Match(ADD);
			State = 1937;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Remove_accessor_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOVE() { return GetToken(NotCParser.REMOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Remove_accessor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remove_accessor_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterRemove_accessor_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitRemove_accessor_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemove_accessor_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Remove_accessor_declarationContext remove_accessor_declaration() {
		Remove_accessor_declarationContext _localctx = new Remove_accessor_declarationContext(Context, State);
		EnterRule(_localctx, 310, RULE_remove_accessor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1940;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1939;
				attributes();
				}
			}

			State = 1942;
			Match(REMOVE);
			State = 1943;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Overloadable_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(NotCParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(NotCParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(NotCParser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(NotCParser.TILDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_INC() { return GetToken(NotCParser.OP_INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DEC() { return GetToken(NotCParser.OP_DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(NotCParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(NotCParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(NotCParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(NotCParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(NotCParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP() { return GetToken(NotCParser.AMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_OR() { return GetToken(NotCParser.BITWISE_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(NotCParser.CARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LEFT_SHIFT() { return GetToken(NotCParser.OP_LEFT_SHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Right_shiftContext right_shift() {
			return GetRuleContext<Right_shiftContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQ() { return GetToken(NotCParser.OP_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NE() { return GetToken(NotCParser.OP_NE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(NotCParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(NotCParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GE() { return GetToken(NotCParser.OP_GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LE() { return GetToken(NotCParser.OP_LE, 0); }
		public Overloadable_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overloadable_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterOverloadable_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitOverloadable_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOverloadable_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Overloadable_operatorContext overloadable_operator() {
		Overloadable_operatorContext _localctx = new Overloadable_operatorContext(Context, State);
		EnterRule(_localctx, 312, RULE_overloadable_operator);
		try {
			State = 1967;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,232,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1945;
				Match(PLUS);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1946;
				Match(MINUS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1947;
				Match(BANG);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1948;
				Match(TILDE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1949;
				Match(OP_INC);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1950;
				Match(OP_DEC);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1951;
				Match(TRUE);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1952;
				Match(FALSE);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1953;
				Match(STAR);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1954;
				Match(DIV);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1955;
				Match(PERCENT);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1956;
				Match(AMP);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1957;
				Match(BITWISE_OR);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1958;
				Match(CARET);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1959;
				Match(OP_LEFT_SHIFT);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1960;
				right_shift();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1961;
				Match(OP_EQ);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1962;
				Match(OP_NE);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1963;
				Match(GT);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1964;
				Match(LT);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1965;
				Match(OP_GE);
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 1966;
				Match(OP_LE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conversion_operator_declaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(NotCParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(NotCParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arg_declarationContext arg_declaration() {
			return GetRuleContext<Arg_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(NotCParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLICIT() { return GetToken(NotCParser.IMPLICIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPLICIT() { return GetToken(NotCParser.EXPLICIT, 0); }
		public Conversion_operator_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversion_operator_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterConversion_operator_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitConversion_operator_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversion_operator_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conversion_operator_declaratorContext conversion_operator_declarator() {
		Conversion_operator_declaratorContext _localctx = new Conversion_operator_declaratorContext(Context, State);
		EnterRule(_localctx, 314, RULE_conversion_operator_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1969;
			_la = TokenStream.LA(1);
			if ( !(_la==EXPLICIT || _la==IMPLICIT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1970;
			Match(OPERATOR);
			State = 1971;
			type_();
			State = 1972;
			Match(OPEN_PARENS);
			State = 1973;
			arg_declaration();
			State = 1974;
			Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_initializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(NotCParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(NotCParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(NotCParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BASE() { return GetToken(NotCParser.BASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Constructor_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterConstructor_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitConstructor_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_initializerContext constructor_initializer() {
		Constructor_initializerContext _localctx = new Constructor_initializerContext(Context, State);
		EnterRule(_localctx, 316, RULE_constructor_initializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1976;
			Match(COLON);
			{
			State = 1977;
			Match(BASE);
			}
			State = 1978;
			Match(OPEN_PARENS);
			State = 1980;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5966485470830662020L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & -9070250908047648657L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 34359837139L) != 0)) {
				{
				State = 1979;
				argument_list();
				}
			}

			State = 1982;
			Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(NotCParser.SEMICOLON, 0); }
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 318, RULE_body);
		try {
			State = 1986;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1984;
				block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1985;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_interfacesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(NotCParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Interface_type_listContext interface_type_list() {
			return GetRuleContext<Interface_type_listContext>(0);
		}
		public Struct_interfacesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_interfaces; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterStruct_interfaces(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitStruct_interfaces(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_interfaces(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_interfacesContext struct_interfaces() {
		Struct_interfacesContext _localctx = new Struct_interfacesContext(Context, State);
		EnterRule(_localctx, 320, RULE_struct_interfaces);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1988;
			Match(COLON);
			State = 1989;
			interface_type_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(NotCParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(NotCParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Struct_member_declarationContext[] struct_member_declaration() {
			return GetRuleContexts<Struct_member_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_member_declarationContext struct_member_declaration(int i) {
			return GetRuleContext<Struct_member_declarationContext>(i);
		}
		public Struct_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterStruct_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitStruct_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_bodyContext struct_body() {
		Struct_bodyContext _localctx = new Struct_bodyContext(Context, State);
		EnterRule(_localctx, 322, RULE_struct_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1991;
			Match(OPEN_BRACE);
			State = 1995;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5914689780400329092L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 180151663161761581L) != 0)) {
				{
				{
				State = 1992;
				struct_member_declaration();
				}
				}
				State = 1997;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1998;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_member_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Common_member_declarationContext common_member_declaration() {
			return GetRuleContext<Common_member_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED() { return GetToken(NotCParser.FIXED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(NotCParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public All_member_modifiersContext all_member_modifiers() {
			return GetRuleContext<All_member_modifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fixed_size_buffer_declaratorContext[] fixed_size_buffer_declarator() {
			return GetRuleContexts<Fixed_size_buffer_declaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fixed_size_buffer_declaratorContext fixed_size_buffer_declarator(int i) {
			return GetRuleContext<Fixed_size_buffer_declaratorContext>(i);
		}
		public Struct_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_member_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterStruct_member_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitStruct_member_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_member_declarationContext struct_member_declaration() {
		Struct_member_declarationContext _localctx = new Struct_member_declarationContext(Context, State);
		EnterRule(_localctx, 324, RULE_struct_member_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2001;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2000;
				attributes();
				}
			}

			State = 2004;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,237,Context) ) {
			case 1:
				{
				State = 2003;
				all_member_modifiers();
				}
				break;
			}
			State = 2016;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SINGLE_LINE_DOC_COMMENT:
			case EMPTY_DELIMITED_DOC_COMMENT:
			case DELIMITED_DOC_COMMENT:
			case SINGLE_LINE_COMMENT:
			case DELIMITED_COMMENT:
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CONST:
			case DECIMAL:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case ENUM:
			case EQUALS:
			case EVENT:
			case EXPLICIT:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case IMPLICIT:
			case INT:
			case INTERFACE:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case OBJECT:
			case ON:
			case ORDERBY:
			case READONLY:
			case REF:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case STRING:
			case STRUCT:
			case UINT:
			case ULONG:
			case UNMANAGED:
			case USHORT:
			case VAR:
			case VOID:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case OPEN_PARENS:
				{
				State = 2006;
				common_member_declaration();
				}
				break;
			case FIXED:
				{
				State = 2007;
				Match(FIXED);
				State = 2008;
				type_();
				State = 2010;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 2009;
					fixed_size_buffer_declarator();
					}
					}
					State = 2012;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & -8285849179792019844L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 932276351493L) != 0) );
				State = 2014;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Base_typeContext base_type() {
			return GetRuleContext<Base_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rank_specifierContext[] rank_specifier() {
			return GetRuleContexts<Rank_specifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rank_specifierContext rank_specifier(int i) {
			return GetRuleContext<Rank_specifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STAR() { return GetTokens(NotCParser.STAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR(int i) {
			return GetToken(NotCParser.STAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTERR() { return GetTokens(NotCParser.INTERR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERR(int i) {
			return GetToken(NotCParser.INTERR, i);
		}
		public Array_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterArray_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitArray_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_typeContext array_type() {
		Array_typeContext _localctx = new Array_typeContext(Context, State);
		EnterRule(_localctx, 326, RULE_array_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2018;
			base_type();
			State = 2026;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2022;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==STAR || _la==INTERR) {
					{
					{
					State = 2019;
					_la = TokenStream.LA(1);
					if ( !(_la==STAR || _la==INTERR) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 2024;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2025;
				rank_specifier();
				}
				}
				State = 2028;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 2098177L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rank_specifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(NotCParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(NotCParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(NotCParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(NotCParser.COMMA, i);
		}
		public Rank_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rank_specifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterRank_specifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitRank_specifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRank_specifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rank_specifierContext rank_specifier() {
		Rank_specifierContext _localctx = new Rank_specifierContext(Context, State);
		EnterRule(_localctx, 328, RULE_rank_specifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2030;
			Match(OPEN_BRACKET);
			State = 2034;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2031;
				Match(COMMA);
				}
				}
				State = 2036;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2037;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_initializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(NotCParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(NotCParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_initializerContext[] variable_initializer() {
			return GetRuleContexts<Variable_initializerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_initializerContext variable_initializer(int i) {
			return GetRuleContext<Variable_initializerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(NotCParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(NotCParser.COMMA, i);
		}
		public Array_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterArray_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitArray_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_initializerContext array_initializer() {
		Array_initializerContext _localctx = new Array_initializerContext(Context, State);
		EnterRule(_localctx, 330, RULE_array_initializer);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2039;
			Match(OPEN_BRACE);
			State = 2051;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5970989070458032516L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & -9061243777512384465L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 34359837139L) != 0)) {
				{
				State = 2040;
				variable_initializer();
				State = 2045;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,243,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2041;
						Match(COMMA);
						State = 2042;
						variable_initializer();
						}
						} 
					}
					State = 2047;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,243,Context);
				}
				State = 2049;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2048;
					Match(COMMA);
					}
				}

				}
			}

			State = 2053;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variant_type_parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(NotCParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variant_type_parameterContext[] variant_type_parameter() {
			return GetRuleContexts<Variant_type_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variant_type_parameterContext variant_type_parameter(int i) {
			return GetRuleContext<Variant_type_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(NotCParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(NotCParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(NotCParser.COMMA, i);
		}
		public Variant_type_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variant_type_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterVariant_type_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitVariant_type_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariant_type_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variant_type_parameter_listContext variant_type_parameter_list() {
		Variant_type_parameter_listContext _localctx = new Variant_type_parameter_listContext(Context, State);
		EnterRule(_localctx, 332, RULE_variant_type_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2055;
			Match(LT);
			State = 2056;
			variant_type_parameter();
			State = 2061;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2057;
				Match(COMMA);
				State = 2058;
				variant_type_parameter();
				}
				}
				State = 2063;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2064;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variant_type_parameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variance_annotationContext variance_annotation() {
			return GetRuleContext<Variance_annotationContext>(0);
		}
		public Variant_type_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variant_type_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterVariant_type_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitVariant_type_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariant_type_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variant_type_parameterContext variant_type_parameter() {
		Variant_type_parameterContext _localctx = new Variant_type_parameterContext(Context, State);
		EnterRule(_localctx, 334, RULE_variant_type_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2067;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2066;
				attributes();
				}
			}

			State = 2070;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IN || _la==OUT) {
				{
				State = 2069;
				variance_annotation();
				}
			}

			State = 2072;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variance_annotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(NotCParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(NotCParser.OUT, 0); }
		public Variance_annotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variance_annotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterVariance_annotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitVariance_annotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariance_annotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variance_annotationContext variance_annotation() {
		Variance_annotationContext _localctx = new Variance_annotationContext(Context, State);
		EnterRule(_localctx, 336, RULE_variance_annotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2074;
			_la = TokenStream.LA(1);
			if ( !(_la==IN || _la==OUT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_baseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(NotCParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Interface_type_listContext interface_type_list() {
			return GetRuleContext<Interface_type_listContext>(0);
		}
		public Interface_baseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_base; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterInterface_base(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitInterface_base(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_base(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_baseContext interface_base() {
		Interface_baseContext _localctx = new Interface_baseContext(Context, State);
		EnterRule(_localctx, 338, RULE_interface_base);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2076;
			Match(COLON);
			State = 2077;
			interface_type_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(NotCParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(NotCParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Interface_member_declarationContext[] interface_member_declaration() {
			return GetRuleContexts<Interface_member_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_member_declarationContext interface_member_declaration(int i) {
			return GetRuleContext<Interface_member_declarationContext>(i);
		}
		public Interface_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterInterface_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitInterface_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_bodyContext interface_body() {
		Interface_bodyContext _localctx = new Interface_bodyContext(Context, State);
		EnterRule(_localctx, 340, RULE_interface_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2079;
			Match(OPEN_BRACE);
			State = 2083;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5970990033352855940L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 180151525717564461L) != 0)) {
				{
				{
				State = 2080;
				interface_member_declaration();
				}
				}
				State = 2085;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2086;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_member_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(NotCParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(NotCParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(NotCParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(NotCParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(NotCParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(NotCParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(NotCParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Interface_accessorsContext interface_accessors() {
			return GetRuleContext<Interface_accessorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(NotCParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSAFE() { return GetToken(NotCParser.UNSAFE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(NotCParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READONLY() { return GetToken(NotCParser.READONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public Interface_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_member_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterInterface_member_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitInterface_member_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_member_declarationContext interface_member_declaration() {
		Interface_member_declarationContext _localctx = new Interface_member_declarationContext(Context, State);
		EnterRule(_localctx, 342, RULE_interface_member_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2089;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2088;
				attributes();
				}
			}

			State = 2092;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEW) {
				{
				State = 2091;
				Match(NEW);
				}
			}

			State = 2149;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,262,Context) ) {
			case 1:
				{
				State = 2095;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNSAFE) {
					{
					State = 2094;
					Match(UNSAFE);
					}
				}

				State = 2102;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,253,Context) ) {
				case 1:
					{
					State = 2097;
					Match(REF);
					}
					break;
				case 2:
					{
					State = 2098;
					Match(REF);
					State = 2099;
					Match(READONLY);
					}
					break;
				case 3:
					{
					State = 2100;
					Match(READONLY);
					State = 2101;
					Match(REF);
					}
					break;
				}
				State = 2104;
				type_();
				State = 2124;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,257,Context) ) {
				case 1:
					{
					State = 2105;
					identifier();
					State = 2107;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LT) {
						{
						State = 2106;
						type_parameter_list();
						}
					}

					State = 2109;
					Match(OPEN_PARENS);
					State = 2111;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5966486571164438916L) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 45037880355649083L) != 0)) {
						{
						State = 2110;
						formal_parameter_list();
						}
					}

					State = 2113;
					Match(CLOSE_PARENS);
					State = 2115;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WHERE) {
						{
						State = 2114;
						type_parameter_constraints_clauses();
						}
					}

					State = 2117;
					Match(SEMICOLON);
					}
					break;
				case 2:
					{
					State = 2119;
					identifier();
					State = 2120;
					Match(OPEN_BRACE);
					State = 2121;
					interface_accessors();
					State = 2122;
					Match(CLOSE_BRACE);
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 2127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNSAFE) {
					{
					State = 2126;
					Match(UNSAFE);
					}
				}

				State = 2129;
				Match(VOID);
				State = 2130;
				identifier();
				State = 2132;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2131;
					type_parameter_list();
					}
				}

				State = 2134;
				Match(OPEN_PARENS);
				State = 2136;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5966486571164438916L) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 45037880355649083L) != 0)) {
					{
					State = 2135;
					formal_parameter_list();
					}
				}

				State = 2138;
				Match(CLOSE_PARENS);
				State = 2140;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 2139;
					type_parameter_constraints_clauses();
					}
				}

				State = 2142;
				Match(SEMICOLON);
				}
				break;
			case 3:
				{
				State = 2144;
				Match(EVENT);
				State = 2145;
				type_();
				State = 2146;
				identifier();
				State = 2147;
				Match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_accessorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET() { return GetToken(NotCParser.GET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(NotCParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(NotCParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(NotCParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext[] attributes() {
			return GetRuleContexts<AttributesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes(int i) {
			return GetRuleContext<AttributesContext>(i);
		}
		public Interface_accessorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_accessors; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterInterface_accessors(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitInterface_accessors(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_accessors(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_accessorsContext interface_accessors() {
		Interface_accessorsContext _localctx = new Interface_accessorsContext(Context, State);
		EnterRule(_localctx, 344, RULE_interface_accessors);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2151;
				attributes();
				}
			}

			State = 2172;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GET:
				{
				State = 2154;
				Match(GET);
				State = 2155;
				Match(SEMICOLON);
				State = 2161;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SET || _la==OPEN_BRACKET) {
					{
					State = 2157;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==OPEN_BRACKET) {
						{
						State = 2156;
						attributes();
						}
					}

					State = 2159;
					Match(SET);
					State = 2160;
					Match(SEMICOLON);
					}
				}

				}
				break;
			case SET:
				{
				State = 2163;
				Match(SET);
				State = 2164;
				Match(SEMICOLON);
				State = 2170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GET || _la==OPEN_BRACKET) {
					{
					State = 2166;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==OPEN_BRACKET) {
						{
						State = 2165;
						attributes();
						}
					}

					State = 2168;
					Match(GET);
					State = 2169;
					Match(SEMICOLON);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_baseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(NotCParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public Enum_baseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_base; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterEnum_base(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitEnum_base(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_base(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_baseContext enum_base() {
		Enum_baseContext _localctx = new Enum_baseContext(Context, State);
		EnterRule(_localctx, 346, RULE_enum_base);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2174;
			Match(COLON);
			State = 2175;
			type_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(NotCParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(NotCParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Enum_member_declarationContext[] enum_member_declaration() {
			return GetRuleContexts<Enum_member_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_member_declarationContext enum_member_declaration(int i) {
			return GetRuleContext<Enum_member_declarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(NotCParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(NotCParser.COMMA, i);
		}
		public Enum_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterEnum_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitEnum_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_bodyContext enum_body() {
		Enum_bodyContext _localctx = new Enum_bodyContext(Context, State);
		EnterRule(_localctx, 348, RULE_enum_body);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2177;
			Match(OPEN_BRACE);
			State = 2189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8285849179792019844L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 4504531903721989L) != 0)) {
				{
				State = 2178;
				enum_member_declaration();
				State = 2183;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,269,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2179;
						Match(COMMA);
						State = 2180;
						enum_member_declaration();
						}
						} 
					}
					State = 2185;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,269,Context);
				}
				State = 2187;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2186;
					Match(COMMA);
					}
				}

				}
			}

			State = 2191;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_member_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(NotCParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Enum_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_member_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterEnum_member_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitEnum_member_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_member_declarationContext enum_member_declaration() {
		Enum_member_declarationContext _localctx = new Enum_member_declarationContext(Context, State);
		EnterRule(_localctx, 350, RULE_enum_member_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2194;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2193;
				attributes();
				}
			}

			State = 2196;
			identifier();
			State = 2199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGNMENT) {
				{
				State = 2197;
				Match(ASSIGNMENT);
				State = 2198;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_attribute_sectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(NotCParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Global_attribute_targetContext global_attribute_target() {
			return GetRuleContext<Global_attribute_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(NotCParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(NotCParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(NotCParser.COMMA, 0); }
		public Global_attribute_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_attribute_section; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterGlobal_attribute_section(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitGlobal_attribute_section(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobal_attribute_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Global_attribute_sectionContext global_attribute_section() {
		Global_attribute_sectionContext _localctx = new Global_attribute_sectionContext(Context, State);
		EnterRule(_localctx, 352, RULE_global_attribute_section);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2201;
			Match(OPEN_BRACKET);
			State = 2202;
			global_attribute_target();
			State = 2203;
			Match(COLON);
			State = 2204;
			attribute_list();
			State = 2206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 2205;
				Match(COMMA);
				}
			}

			State = 2208;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_attribute_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Global_attribute_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_attribute_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterGlobal_attribute_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitGlobal_attribute_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobal_attribute_target(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Global_attribute_targetContext global_attribute_target() {
		Global_attribute_targetContext _localctx = new Global_attribute_targetContext(Context, State);
		EnterRule(_localctx, 354, RULE_global_attribute_target);
		try {
			State = 2212;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,275,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2210;
				keyword();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2211;
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_sectionContext[] attribute_section() {
			return GetRuleContexts<Attribute_sectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_sectionContext attribute_section(int i) {
			return GetRuleContext<Attribute_sectionContext>(i);
		}
		public AttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterAttributes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitAttributes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributesContext attributes() {
		AttributesContext _localctx = new AttributesContext(Context, State);
		EnterRule(_localctx, 356, RULE_attributes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2215;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2214;
				attribute_section();
				}
				}
				State = 2217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==OPEN_BRACKET );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_sectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(NotCParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(NotCParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_targetContext attribute_target() {
			return GetRuleContext<Attribute_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(NotCParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(NotCParser.COMMA, 0); }
		public Attribute_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_section; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterAttribute_section(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitAttribute_section(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_sectionContext attribute_section() {
		Attribute_sectionContext _localctx = new Attribute_sectionContext(Context, State);
		EnterRule(_localctx, 358, RULE_attribute_section);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2219;
			Match(OPEN_BRACKET);
			State = 2223;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,277,Context) ) {
			case 1:
				{
				State = 2220;
				attribute_target();
				State = 2221;
				Match(COLON);
				}
				break;
			}
			State = 2225;
			attribute_list();
			State = 2227;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 2226;
				Match(COMMA);
				}
			}

			State = 2229;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Attribute_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterAttribute_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitAttribute_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_target(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_targetContext attribute_target() {
		Attribute_targetContext _localctx = new Attribute_targetContext(Context, State);
		EnterRule(_localctx, 360, RULE_attribute_target);
		try {
			State = 2233;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,279,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2231;
				keyword();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2232;
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(NotCParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(NotCParser.COMMA, i);
		}
		public Attribute_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterAttribute_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitAttribute_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_listContext attribute_list() {
		Attribute_listContext _localctx = new Attribute_listContext(Context, State);
		EnterRule(_localctx, 362, RULE_attribute_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2235;
			attribute();
			State = 2240;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,280,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2236;
					Match(COMMA);
					State = 2237;
					attribute();
					}
					} 
				}
				State = 2242;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,280,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_or_type_nameContext namespace_or_type_name() {
			return GetRuleContext<Namespace_or_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(NotCParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(NotCParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_argumentContext[] attribute_argument() {
			return GetRuleContexts<Attribute_argumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_argumentContext attribute_argument(int i) {
			return GetRuleContext<Attribute_argumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(NotCParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(NotCParser.COMMA, i);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 364, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2243;
			namespace_or_type_name();
			State = 2256;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PARENS) {
				{
				State = 2244;
				Match(OPEN_PARENS);
				State = 2253;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5970989070458032516L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & -9070250976767125457L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 34359837139L) != 0)) {
					{
					State = 2245;
					attribute_argument();
					State = 2250;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 2246;
						Match(COMMA);
						State = 2247;
						attribute_argument();
						}
						}
						State = 2252;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 2255;
				Match(CLOSE_PARENS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_argumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(NotCParser.COLON, 0); }
		public Attribute_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterAttribute_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitAttribute_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_argument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_argumentContext attribute_argument() {
		Attribute_argumentContext _localctx = new Attribute_argumentContext(Context, State);
		EnterRule(_localctx, 366, RULE_attribute_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2261;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,284,Context) ) {
			case 1:
				{
				State = 2258;
				identifier();
				State = 2259;
				Match(COLON);
				}
				break;
			}
			State = 2263;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pointer_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(NotCParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Simple_typeContext simple_type() {
			return GetRuleContext<Simple_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rank_specifierContext[] rank_specifier() {
			return GetRuleContexts<Rank_specifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rank_specifierContext rank_specifier(int i) {
			return GetRuleContext<Rank_specifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTERR() { return GetTokens(NotCParser.INTERR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERR(int i) {
			return GetToken(NotCParser.INTERR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(NotCParser.VOID, 0); }
		public Pointer_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointer_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterPointer_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitPointer_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointer_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pointer_typeContext pointer_type() {
		Pointer_typeContext _localctx = new Pointer_typeContext(Context, State);
		EnterRule(_localctx, 368, RULE_pointer_type);
		int _la;
		try {
			State = 2280;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SINGLE_LINE_DOC_COMMENT:
			case EMPTY_DELIMITED_DOC_COMMENT:
			case DELIMITED_DOC_COMMENT:
			case SINGLE_LINE_COMMENT:
			case DELIMITED_COMMENT:
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case DECIMAL:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case OBJECT:
			case ON:
			case ORDERBY:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case STRING:
			case UINT:
			case ULONG:
			case UNMANAGED:
			case USHORT:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2267;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BOOL:
				case BYTE:
				case CHAR:
				case DECIMAL:
				case DOUBLE:
				case FLOAT:
				case INT:
				case LONG:
				case SBYTE:
				case SHORT:
				case UINT:
				case ULONG:
				case USHORT:
					{
					State = 2265;
					simple_type();
					}
					break;
				case SINGLE_LINE_DOC_COMMENT:
				case EMPTY_DELIMITED_DOC_COMMENT:
				case DELIMITED_DOC_COMMENT:
				case SINGLE_LINE_COMMENT:
				case DELIMITED_COMMENT:
				case ADD:
				case ALIAS:
				case ARGLIST:
				case ASCENDING:
				case ASYNC:
				case AWAIT:
				case BY:
				case DESCENDING:
				case DYNAMIC:
				case EQUALS:
				case FROM:
				case GET:
				case GROUP:
				case INTO:
				case JOIN:
				case LET:
				case NAMEOF:
				case OBJECT:
				case ON:
				case ORDERBY:
				case REMOVE:
				case SELECT:
				case SET:
				case STRING:
				case UNMANAGED:
				case VAR:
				case WHEN:
				case WHERE:
				case YIELD:
				case IDENTIFIER:
					{
					State = 2266;
					class_type();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==OPEN_BRACKET || _la==INTERR) {
					{
					State = 2271;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case OPEN_BRACKET:
						{
						State = 2269;
						rank_specifier();
						}
						break;
					case INTERR:
						{
						State = 2270;
						Match(INTERR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 2275;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2276;
				Match(STAR);
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2278;
				Match(VOID);
				State = 2279;
				Match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_pointer_declaratorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fixed_pointer_declaratorContext[] fixed_pointer_declarator() {
			return GetRuleContexts<Fixed_pointer_declaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fixed_pointer_declaratorContext fixed_pointer_declarator(int i) {
			return GetRuleContext<Fixed_pointer_declaratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(NotCParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(NotCParser.COMMA, i);
		}
		public Fixed_pointer_declaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_pointer_declarators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterFixed_pointer_declarators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitFixed_pointer_declarators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_pointer_declarators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_pointer_declaratorsContext fixed_pointer_declarators() {
		Fixed_pointer_declaratorsContext _localctx = new Fixed_pointer_declaratorsContext(Context, State);
		EnterRule(_localctx, 370, RULE_fixed_pointer_declarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2282;
			fixed_pointer_declarator();
			State = 2287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2283;
				Match(COMMA);
				State = 2284;
				fixed_pointer_declarator();
				}
				}
				State = 2289;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_pointer_declaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(NotCParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Fixed_pointer_initializerContext fixed_pointer_initializer() {
			return GetRuleContext<Fixed_pointer_initializerContext>(0);
		}
		public Fixed_pointer_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_pointer_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterFixed_pointer_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitFixed_pointer_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_pointer_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_pointer_declaratorContext fixed_pointer_declarator() {
		Fixed_pointer_declaratorContext _localctx = new Fixed_pointer_declaratorContext(Context, State);
		EnterRule(_localctx, 372, RULE_fixed_pointer_declarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2290;
			identifier();
			State = 2291;
			Match(ASSIGNMENT);
			State = 2292;
			fixed_pointer_initializer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_pointer_initializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP() { return GetToken(NotCParser.AMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Stackalloc_initializerContext stackalloc_initializer() {
			return GetRuleContext<Stackalloc_initializerContext>(0);
		}
		public Fixed_pointer_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_pointer_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterFixed_pointer_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitFixed_pointer_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_pointer_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_pointer_initializerContext fixed_pointer_initializer() {
		Fixed_pointer_initializerContext _localctx = new Fixed_pointer_initializerContext(Context, State);
		EnterRule(_localctx, 374, RULE_fixed_pointer_initializer);
		try {
			State = 2299;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SINGLE_LINE_DOC_COMMENT:
			case EMPTY_DELIMITED_DOC_COMMENT:
			case DELIMITED_DOC_COMMENT:
			case SINGLE_LINE_COMMENT:
			case DELIMITED_COMMENT:
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL_:
			case OBJECT:
			case ON:
			case ORDERBY:
			case REF:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNMANAGED:
			case USHORT:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case CARET:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
			case OP_RANGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2295;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,290,Context) ) {
				case 1:
					{
					State = 2294;
					Match(AMP);
					}
					break;
				}
				State = 2297;
				expression();
				}
				break;
			case STACKALLOC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2298;
				stackalloc_initializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_size_buffer_declaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(NotCParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(NotCParser.CLOSE_BRACKET, 0); }
		public Fixed_size_buffer_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_size_buffer_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterFixed_size_buffer_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitFixed_size_buffer_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_size_buffer_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_size_buffer_declaratorContext fixed_size_buffer_declarator() {
		Fixed_size_buffer_declaratorContext _localctx = new Fixed_size_buffer_declaratorContext(Context, State);
		EnterRule(_localctx, 376, RULE_fixed_size_buffer_declarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2301;
			identifier();
			State = 2302;
			Match(OPEN_BRACKET);
			State = 2303;
			expression();
			State = 2304;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stackalloc_initializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STACKALLOC() { return GetToken(NotCParser.STACKALLOC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(NotCParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(NotCParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(NotCParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(NotCParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(NotCParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(NotCParser.COMMA, i);
		}
		public Stackalloc_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stackalloc_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterStackalloc_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitStackalloc_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStackalloc_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stackalloc_initializerContext stackalloc_initializer() {
		Stackalloc_initializerContext _localctx = new Stackalloc_initializerContext(Context, State);
		EnterRule(_localctx, 378, RULE_stackalloc_initializer);
		int _la;
		try {
			int _alt;
			State = 2335;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,296,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2306;
				Match(STACKALLOC);
				State = 2307;
				type_();
				State = 2308;
				Match(OPEN_BRACKET);
				State = 2309;
				expression();
				State = 2310;
				Match(CLOSE_BRACKET);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2312;
				Match(STACKALLOC);
				State = 2314;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5970990170791809412L) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 36030681100907531L) != 0)) {
					{
					State = 2313;
					type_();
					}
				}

				State = 2316;
				Match(OPEN_BRACKET);
				State = 2318;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5970989070458032516L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & -9070250976767125457L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 34359837139L) != 0)) {
					{
					State = 2317;
					expression();
					}
				}

				State = 2320;
				Match(CLOSE_BRACKET);
				State = 2321;
				Match(OPEN_BRACE);
				State = 2322;
				expression();
				State = 2327;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,294,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2323;
						Match(COMMA);
						State = 2324;
						expression();
						}
						} 
					}
					State = 2329;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,294,Context);
				}
				State = 2331;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2330;
					Match(COMMA);
					}
				}

				State = 2333;
				Match(CLOSE_BRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Right_arrowContext : ParserRuleContext {
		public IToken first;
		public IToken second;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(NotCParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(NotCParser.GT, 0); }
		public Right_arrowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_right_arrow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterRight_arrow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitRight_arrow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRight_arrow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Right_arrowContext right_arrow() {
		Right_arrowContext _localctx = new Right_arrowContext(Context, State);
		EnterRule(_localctx, 380, RULE_right_arrow);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2337;
			_localctx.first = Match(ASSIGNMENT);
			State = 2338;
			_localctx.second = Match(GT);
			State = 2339;
			if (!((_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0))) throw new FailedPredicateException(this, "$first.index + 1 == $second.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Right_shiftContext : ParserRuleContext {
		public IToken first;
		public IToken second;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GT() { return GetTokens(NotCParser.GT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT(int i) {
			return GetToken(NotCParser.GT, i);
		}
		public Right_shiftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_right_shift; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterRight_shift(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitRight_shift(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRight_shift(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Right_shiftContext right_shift() {
		Right_shiftContext _localctx = new Right_shiftContext(Context, State);
		EnterRule(_localctx, 382, RULE_right_shift);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2341;
			_localctx.first = Match(GT);
			State = 2342;
			_localctx.second = Match(GT);
			State = 2343;
			if (!((_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0))) throw new FailedPredicateException(this, "$first.index + 1 == $second.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Right_shift_assignmentContext : ParserRuleContext {
		public IToken first;
		public IToken second;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(NotCParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GE() { return GetToken(NotCParser.OP_GE, 0); }
		public Right_shift_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_right_shift_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterRight_shift_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitRight_shift_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRight_shift_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Right_shift_assignmentContext right_shift_assignment() {
		Right_shift_assignmentContext _localctx = new Right_shift_assignmentContext(Context, State);
		EnterRule(_localctx, 384, RULE_right_shift_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2345;
			_localctx.first = Match(GT);
			State = 2346;
			_localctx.second = Match(OP_GE);
			State = 2347;
			if (!((_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0))) throw new FailedPredicateException(this, "$first.index + 1 == $second.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Boolean_literalContext boolean_literal() {
			return GetRuleContext<Boolean_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(NotCParser.INTEGER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_INTEGER_LITERAL() { return GetToken(NotCParser.HEX_INTEGER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN_INTEGER_LITERAL() { return GetToken(NotCParser.BIN_INTEGER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_LITERAL() { return GetToken(NotCParser.REAL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER_LITERAL() { return GetToken(NotCParser.CHARACTER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_() { return GetToken(NotCParser.NULL_, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 386, RULE_literal);
		try {
			State = 2357;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FALSE:
			case TRUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2349;
				boolean_literal();
				}
				break;
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2350;
				string_literal();
				}
				break;
			case INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2351;
				Match(INTEGER_LITERAL);
				}
				break;
			case HEX_INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2352;
				Match(HEX_INTEGER_LITERAL);
				}
				break;
			case BIN_INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2353;
				Match(BIN_INTEGER_LITERAL);
				}
				break;
			case REAL_LITERAL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2354;
				Match(REAL_LITERAL);
				}
				break;
			case CHARACTER_LITERAL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2355;
				Match(CHARACTER_LITERAL);
				}
				break;
			case NULL_:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2356;
				Match(NULL_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(NotCParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(NotCParser.FALSE, 0); }
		public Boolean_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterBoolean_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitBoolean_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_literalContext boolean_literal() {
		Boolean_literalContext _localctx = new Boolean_literalContext(Context, State);
		EnterRule(_localctx, 388, RULE_boolean_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2359;
			_la = TokenStream.LA(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Interpolated_regular_stringContext interpolated_regular_string() {
			return GetRuleContext<Interpolated_regular_stringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interpolated_verbatium_stringContext interpolated_verbatium_string() {
			return GetRuleContext<Interpolated_verbatium_stringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGULAR_STRING() { return GetToken(NotCParser.REGULAR_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERBATIUM_STRING() { return GetToken(NotCParser.VERBATIUM_STRING, 0); }
		public String_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterString_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitString_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_literalContext string_literal() {
		String_literalContext _localctx = new String_literalContext(Context, State);
		EnterRule(_localctx, 390, RULE_string_literal);
		try {
			State = 2365;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTERPOLATED_REGULAR_STRING_START:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2361;
				interpolated_regular_string();
				}
				break;
			case INTERPOLATED_VERBATIUM_STRING_START:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2362;
				interpolated_verbatium_string();
				}
				break;
			case REGULAR_STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2363;
				Match(REGULAR_STRING);
				}
				break;
			case VERBATIUM_STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2364;
				Match(VERBATIUM_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interpolated_regular_stringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERPOLATED_REGULAR_STRING_START() { return GetToken(NotCParser.INTERPOLATED_REGULAR_STRING_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_QUOTE_INSIDE() { return GetToken(NotCParser.DOUBLE_QUOTE_INSIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Interpolated_regular_string_partContext[] interpolated_regular_string_part() {
			return GetRuleContexts<Interpolated_regular_string_partContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interpolated_regular_string_partContext interpolated_regular_string_part(int i) {
			return GetRuleContext<Interpolated_regular_string_partContext>(i);
		}
		public Interpolated_regular_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolated_regular_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterInterpolated_regular_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitInterpolated_regular_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterpolated_regular_string(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interpolated_regular_stringContext interpolated_regular_string() {
		Interpolated_regular_stringContext _localctx = new Interpolated_regular_stringContext(Context, State);
		EnterRule(_localctx, 392, RULE_interpolated_regular_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2367;
			Match(INTERPOLATED_REGULAR_STRING_START);
			State = 2371;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5970989070458032516L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & -9070250976767125457L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 2576980476371L) != 0)) {
				{
				{
				State = 2368;
				interpolated_regular_string_part();
				}
				}
				State = 2373;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2374;
			Match(DOUBLE_QUOTE_INSIDE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interpolated_verbatium_stringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERPOLATED_VERBATIUM_STRING_START() { return GetToken(NotCParser.INTERPOLATED_VERBATIUM_STRING_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_QUOTE_INSIDE() { return GetToken(NotCParser.DOUBLE_QUOTE_INSIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Interpolated_verbatium_string_partContext[] interpolated_verbatium_string_part() {
			return GetRuleContexts<Interpolated_verbatium_string_partContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interpolated_verbatium_string_partContext interpolated_verbatium_string_part(int i) {
			return GetRuleContext<Interpolated_verbatium_string_partContext>(i);
		}
		public Interpolated_verbatium_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolated_verbatium_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterInterpolated_verbatium_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitInterpolated_verbatium_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterpolated_verbatium_string(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interpolated_verbatium_stringContext interpolated_verbatium_string() {
		Interpolated_verbatium_stringContext _localctx = new Interpolated_verbatium_stringContext(Context, State);
		EnterRule(_localctx, 394, RULE_interpolated_verbatium_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2376;
			Match(INTERPOLATED_VERBATIUM_STRING_START);
			State = 2380;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5970989070458032516L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & -9070250976767125457L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 5050881638867L) != 0)) {
				{
				{
				State = 2377;
				interpolated_verbatium_string_part();
				}
				}
				State = 2382;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2383;
			Match(DOUBLE_QUOTE_INSIDE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interpolated_regular_string_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Interpolated_string_expressionContext interpolated_string_expression() {
			return GetRuleContext<Interpolated_string_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_CURLY_INSIDE() { return GetToken(NotCParser.DOUBLE_CURLY_INSIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGULAR_CHAR_INSIDE() { return GetToken(NotCParser.REGULAR_CHAR_INSIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGULAR_STRING_INSIDE() { return GetToken(NotCParser.REGULAR_STRING_INSIDE, 0); }
		public Interpolated_regular_string_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolated_regular_string_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterInterpolated_regular_string_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitInterpolated_regular_string_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterpolated_regular_string_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interpolated_regular_string_partContext interpolated_regular_string_part() {
		Interpolated_regular_string_partContext _localctx = new Interpolated_regular_string_partContext(Context, State);
		EnterRule(_localctx, 396, RULE_interpolated_regular_string_part);
		try {
			State = 2389;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SINGLE_LINE_DOC_COMMENT:
			case EMPTY_DELIMITED_DOC_COMMENT:
			case DELIMITED_DOC_COMMENT:
			case SINGLE_LINE_COMMENT:
			case DELIMITED_COMMENT:
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL_:
			case OBJECT:
			case ON:
			case ORDERBY:
			case REF:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNMANAGED:
			case USHORT:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case CARET:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
			case OP_RANGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2385;
				interpolated_string_expression();
				}
				break;
			case DOUBLE_CURLY_INSIDE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2386;
				Match(DOUBLE_CURLY_INSIDE);
				}
				break;
			case REGULAR_CHAR_INSIDE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2387;
				Match(REGULAR_CHAR_INSIDE);
				}
				break;
			case REGULAR_STRING_INSIDE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2388;
				Match(REGULAR_STRING_INSIDE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interpolated_verbatium_string_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Interpolated_string_expressionContext interpolated_string_expression() {
			return GetRuleContext<Interpolated_string_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_CURLY_INSIDE() { return GetToken(NotCParser.DOUBLE_CURLY_INSIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERBATIUM_DOUBLE_QUOTE_INSIDE() { return GetToken(NotCParser.VERBATIUM_DOUBLE_QUOTE_INSIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERBATIUM_INSIDE_STRING() { return GetToken(NotCParser.VERBATIUM_INSIDE_STRING, 0); }
		public Interpolated_verbatium_string_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolated_verbatium_string_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterInterpolated_verbatium_string_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitInterpolated_verbatium_string_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterpolated_verbatium_string_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interpolated_verbatium_string_partContext interpolated_verbatium_string_part() {
		Interpolated_verbatium_string_partContext _localctx = new Interpolated_verbatium_string_partContext(Context, State);
		EnterRule(_localctx, 398, RULE_interpolated_verbatium_string_part);
		try {
			State = 2395;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SINGLE_LINE_DOC_COMMENT:
			case EMPTY_DELIMITED_DOC_COMMENT:
			case DELIMITED_DOC_COMMENT:
			case SINGLE_LINE_COMMENT:
			case DELIMITED_COMMENT:
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL_:
			case OBJECT:
			case ON:
			case ORDERBY:
			case REF:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNMANAGED:
			case USHORT:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case CARET:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
			case OP_RANGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2391;
				interpolated_string_expression();
				}
				break;
			case DOUBLE_CURLY_INSIDE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2392;
				Match(DOUBLE_CURLY_INSIDE);
				}
				break;
			case VERBATIUM_DOUBLE_QUOTE_INSIDE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2393;
				Match(VERBATIUM_DOUBLE_QUOTE_INSIDE);
				}
				break;
			case VERBATIUM_INSIDE_STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2394;
				Match(VERBATIUM_INSIDE_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interpolated_string_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(NotCParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(NotCParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(NotCParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FORMAT_STRING() { return GetTokens(NotCParser.FORMAT_STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT_STRING(int i) {
			return GetToken(NotCParser.FORMAT_STRING, i);
		}
		public Interpolated_string_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolated_string_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterInterpolated_string_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitInterpolated_string_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterpolated_string_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interpolated_string_expressionContext interpolated_string_expression() {
		Interpolated_string_expressionContext _localctx = new Interpolated_string_expressionContext(Context, State);
		EnterRule(_localctx, 400, RULE_interpolated_string_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2397;
			expression();
			State = 2402;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2398;
				Match(COMMA);
				State = 2399;
				expression();
				}
				}
				State = 2404;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2411;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 2405;
				Match(COLON);
				State = 2407;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 2406;
					Match(FORMAT_STRING);
					}
					}
					State = 2409;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==FORMAT_STRING );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(NotCParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BASE() { return GetToken(NotCParser.BASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(NotCParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(NotCParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTE() { return GetToken(NotCParser.BYTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(NotCParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH() { return GetToken(NotCParser.CATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(NotCParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKED() { return GetToken(NotCParser.CHECKED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(NotCParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(NotCParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(NotCParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(NotCParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELEGATE() { return GetToken(NotCParser.DELEGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(NotCParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(NotCParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(NotCParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(NotCParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(NotCParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPLICIT() { return GetToken(NotCParser.EXPLICIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERN() { return GetToken(NotCParser.EXTERN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(NotCParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINALLY() { return GetToken(NotCParser.FINALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED() { return GetToken(NotCParser.FIXED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(NotCParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(NotCParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREACH() { return GetToken(NotCParser.FOREACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO() { return GetToken(NotCParser.GOTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(NotCParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLICIT() { return GetToken(NotCParser.IMPLICIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(NotCParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(NotCParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERFACE() { return GetToken(NotCParser.INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERNAL() { return GetToken(NotCParser.INTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(NotCParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK() { return GetToken(NotCParser.LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG() { return GetToken(NotCParser.LONG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULE() { return GetToken(NotCParser.MODULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMESPACE() { return GetToken(NotCParser.NAMESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(NotCParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_() { return GetToken(NotCParser.NULL_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT() { return GetToken(NotCParser.OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(NotCParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(NotCParser.OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAMS() { return GetToken(NotCParser.PARAMS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(NotCParser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(NotCParser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READONLY() { return GetToken(NotCParser.READONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(NotCParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(NotCParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SBYTE() { return GetToken(NotCParser.SBYTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHORT() { return GetToken(NotCParser.SHORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIZEOF() { return GetToken(NotCParser.SIZEOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STACKALLOC() { return GetToken(NotCParser.STACKALLOC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(NotCParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(NotCParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(NotCParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(NotCParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROW() { return GetToken(NotCParser.THROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(NotCParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY() { return GetToken(NotCParser.TRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPEOF() { return GetToken(NotCParser.TYPEOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINT() { return GetToken(NotCParser.UINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ULONG() { return GetToken(NotCParser.ULONG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCHECKED() { return GetToken(NotCParser.UNCHECKED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNMANAGED() { return GetToken(NotCParser.UNMANAGED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSAFE() { return GetToken(NotCParser.UNSAFE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USHORT() { return GetToken(NotCParser.USHORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(NotCParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(NotCParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOLATILE() { return GetToken(NotCParser.VOLATILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(NotCParser.WHILE, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 402, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2413;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8285849179792019456L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2680059387823L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(NotCParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_bodyContext struct_body() {
			return GetRuleContext<Struct_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_interfacesContext struct_interfaces() {
			return GetRuleContext<Struct_interfacesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(NotCParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READONLY() { return GetToken(NotCParser.READONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(NotCParser.REF, 0); }
		public Struct_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterStruct_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitStruct_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_definitionContext struct_definition() {
		Struct_definitionContext _localctx = new Struct_definitionContext(Context, State);
		EnterRule(_localctx, 404, RULE_struct_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2416;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==READONLY || _la==REF) {
				{
				State = 2415;
				_la = TokenStream.LA(1);
				if ( !(_la==READONLY || _la==REF) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2418;
			Match(STRUCT);
			State = 2419;
			identifier();
			State = 2421;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 2420;
				type_parameter_list();
				}
			}

			State = 2424;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 2423;
				struct_interfaces();
				}
			}

			State = 2427;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 2426;
				type_parameter_constraints_clauses();
				}
			}

			State = 2429;
			struct_body();
			State = 2431;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 2430;
				Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERFACE() { return GetToken(NotCParser.INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_bodyContext class_body() {
			return GetRuleContext<Class_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variant_type_parameter_listContext variant_type_parameter_list() {
			return GetRuleContext<Variant_type_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_baseContext interface_base() {
			return GetRuleContext<Interface_baseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(NotCParser.SEMICOLON, 0); }
		public Interface_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterInterface_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitInterface_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_definitionContext interface_definition() {
		Interface_definitionContext _localctx = new Interface_definitionContext(Context, State);
		EnterRule(_localctx, 406, RULE_interface_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2433;
			Match(INTERFACE);
			State = 2434;
			identifier();
			State = 2436;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 2435;
				variant_type_parameter_list();
				}
			}

			State = 2439;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 2438;
				interface_base();
				}
			}

			State = 2442;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 2441;
				type_parameter_constraints_clauses();
				}
			}

			State = 2444;
			class_body();
			State = 2446;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 2445;
				Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(NotCParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_bodyContext enum_body() {
			return GetRuleContext<Enum_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_baseContext enum_base() {
			return GetRuleContext<Enum_baseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(NotCParser.SEMICOLON, 0); }
		public Enum_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterEnum_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitEnum_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_definitionContext enum_definition() {
		Enum_definitionContext _localctx = new Enum_definitionContext(Context, State);
		EnterRule(_localctx, 408, RULE_enum_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2448;
			Match(ENUM);
			State = 2449;
			identifier();
			State = 2451;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 2450;
				enum_base();
				}
			}

			State = 2453;
			enum_body();
			State = 2455;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 2454;
				Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delegate_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELEGATE() { return GetToken(NotCParser.DELEGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Return_typeContext return_type() {
			return GetRuleContext<Return_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(NotCParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(NotCParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(NotCParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variant_type_parameter_listContext variant_type_parameter_list() {
			return GetRuleContext<Variant_type_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public Delegate_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegate_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterDelegate_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitDelegate_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelegate_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delegate_definitionContext delegate_definition() {
		Delegate_definitionContext _localctx = new Delegate_definitionContext(Context, State);
		EnterRule(_localctx, 410, RULE_delegate_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2457;
			Match(DELEGATE);
			State = 2458;
			return_type();
			State = 2459;
			identifier();
			State = 2461;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 2460;
				variant_type_parameter_list();
				}
			}

			State = 2463;
			Match(OPEN_PARENS);
			State = 2465;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5966486571164438916L) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 45037880355649083L) != 0)) {
				{
				State = 2464;
				formal_parameter_list();
				}
			}

			State = 2467;
			Match(CLOSE_PARENS);
			State = 2469;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 2468;
				type_parameter_constraints_clauses();
				}
			}

			State = 2471;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(NotCParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declaratorsContext variable_declarators() {
			return GetRuleContext<Variable_declaratorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(NotCParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Member_nameContext member_name() {
			return GetRuleContext<Member_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(NotCParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Event_accessor_declarationsContext event_accessor_declarations() {
			return GetRuleContext<Event_accessor_declarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(NotCParser.CLOSE_BRACE, 0); }
		public Event_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterEvent_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitEvent_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvent_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Event_declarationContext event_declaration() {
		Event_declarationContext _localctx = new Event_declarationContext(Context, State);
		EnterRule(_localctx, 412, RULE_event_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2473;
			Match(EVENT);
			State = 2474;
			type_();
			State = 2483;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,320,Context) ) {
			case 1:
				{
				State = 2475;
				variable_declarators();
				State = 2476;
				Match(SEMICOLON);
				}
				break;
			case 2:
				{
				State = 2478;
				member_name();
				State = 2479;
				Match(OPEN_BRACE);
				State = 2480;
				event_accessor_declarations();
				State = 2481;
				Match(CLOSE_BRACE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declaratorsContext variable_declarators() {
			return GetRuleContext<Variable_declaratorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(NotCParser.SEMICOLON, 0); }
		public Field_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterField_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitField_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Field_declarationContext field_declaration() {
		Field_declarationContext _localctx = new Field_declarationContext(Context, State);
		EnterRule(_localctx, 414, RULE_field_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2485;
			variable_declarators();
			State = 2486;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Member_nameContext member_name() {
			return GetRuleContext<Member_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(NotCParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Accessor_declarationsContext accessor_declarations() {
			return GetRuleContext<Accessor_declarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(NotCParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Right_arrowContext right_arrow() {
			return GetRuleContext<Right_arrowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Throwable_expressionContext throwable_expression() {
			return GetRuleContext<Throwable_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(NotCParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(NotCParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_initializerContext variable_initializer() {
			return GetRuleContext<Variable_initializerContext>(0);
		}
		public Property_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterProperty_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitProperty_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Property_declarationContext property_declaration() {
		Property_declarationContext _localctx = new Property_declarationContext(Context, State);
		EnterRule(_localctx, 416, RULE_property_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2488;
			member_name();
			State = 2502;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				{
				State = 2489;
				Match(OPEN_BRACE);
				State = 2490;
				accessor_declarations();
				State = 2491;
				Match(CLOSE_BRACE);
				State = 2496;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGNMENT) {
					{
					State = 2492;
					Match(ASSIGNMENT);
					State = 2493;
					variable_initializer();
					State = 2494;
					Match(SEMICOLON);
					}
				}

				}
				break;
			case ASSIGNMENT:
				{
				State = 2498;
				right_arrow();
				State = 2499;
				throwable_expression();
				State = 2500;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(NotCParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Constant_declaratorsContext constant_declarators() {
			return GetRuleContext<Constant_declaratorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(NotCParser.SEMICOLON, 0); }
		public Constant_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterConstant_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitConstant_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constant_declarationContext constant_declaration() {
		Constant_declarationContext _localctx = new Constant_declarationContext(Context, State);
		EnterRule(_localctx, 418, RULE_constant_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2504;
			Match(CONST);
			State = 2505;
			type_();
			State = 2506;
			constant_declarators();
			State = 2507;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Destructor_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(NotCParser.TILDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(NotCParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(NotCParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public Destructor_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destructor_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterDestructor_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitDestructor_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestructor_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Destructor_definitionContext destructor_definition() {
		Destructor_definitionContext _localctx = new Destructor_definitionContext(Context, State);
		EnterRule(_localctx, 420, RULE_destructor_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2509;
			Match(TILDE);
			State = 2510;
			identifier();
			State = 2511;
			Match(OPEN_PARENS);
			State = 2512;
			Match(CLOSE_PARENS);
			State = 2513;
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(NotCParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(NotCParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Constructor_initializerContext constructor_initializer() {
			return GetRuleContext<Constructor_initializerContext>(0);
		}
		public Constructor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterConstructor_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitConstructor_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_declarationContext constructor_declaration() {
		Constructor_declarationContext _localctx = new Constructor_declarationContext(Context, State);
		EnterRule(_localctx, 422, RULE_constructor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2515;
			identifier();
			State = 2516;
			Match(OPEN_PARENS);
			State = 2518;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5966486571164438916L) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 45037880355649083L) != 0)) {
				{
				State = 2517;
				formal_parameter_list();
				}
			}

			State = 2520;
			Match(CLOSE_PARENS);
			State = 2522;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 2521;
				constructor_initializer();
				}
			}

			State = 2524;
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Method_member_nameContext method_member_name() {
			return GetRuleContext<Method_member_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(NotCParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(NotCParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Method_bodyContext method_body() {
			return GetRuleContext<Method_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Right_arrowContext right_arrow() {
			return GetRuleContext<Right_arrowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Throwable_expressionContext throwable_expression() {
			return GetRuleContext<Throwable_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(NotCParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public Method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterMethod_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitMethod_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_declarationContext method_declaration() {
		Method_declarationContext _localctx = new Method_declarationContext(Context, State);
		EnterRule(_localctx, 424, RULE_method_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2526;
			method_member_name();
			State = 2528;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 2527;
				type_parameter_list();
				}
			}

			State = 2530;
			Match(OPEN_PARENS);
			State = 2532;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5966486571164438916L) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 45037880355649083L) != 0)) {
				{
				State = 2531;
				formal_parameter_list();
				}
			}

			State = 2534;
			Match(CLOSE_PARENS);
			State = 2536;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 2535;
				type_parameter_constraints_clauses();
				}
			}

			State = 2543;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
			case SEMICOLON:
				{
				State = 2538;
				method_body();
				}
				break;
			case ASSIGNMENT:
				{
				State = 2539;
				right_arrow();
				State = 2540;
				throwable_expression();
				State = 2541;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_member_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_COLON() { return GetToken(NotCParser.DOUBLE_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(NotCParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(NotCParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_argument_listContext[] type_argument_list() {
			return GetRuleContexts<Type_argument_listContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_argument_listContext type_argument_list(int i) {
			return GetRuleContext<Type_argument_listContext>(i);
		}
		public Method_member_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_member_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterMethod_member_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitMethod_member_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_member_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_member_nameContext method_member_name() {
		Method_member_nameContext _localctx = new Method_member_nameContext(Context, State);
		EnterRule(_localctx, 426, RULE_method_member_name);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2550;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,329,Context) ) {
			case 1:
				{
				State = 2545;
				identifier();
				}
				break;
			case 2:
				{
				State = 2546;
				identifier();
				State = 2547;
				Match(DOUBLE_COLON);
				State = 2548;
				identifier();
				}
				break;
			}
			State = 2559;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,331,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2553;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LT) {
						{
						State = 2552;
						type_argument_list();
						}
					}

					State = 2555;
					Match(DOT);
					State = 2556;
					identifier();
					}
					} 
				}
				State = 2561;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,331,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(NotCParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Overloadable_operatorContext overloadable_operator() {
			return GetRuleContext<Overloadable_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(NotCParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arg_declarationContext[] arg_declaration() {
			return GetRuleContexts<Arg_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arg_declarationContext arg_declaration(int i) {
			return GetRuleContext<Arg_declarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(NotCParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Right_arrowContext right_arrow() {
			return GetRuleContext<Right_arrowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Throwable_expressionContext throwable_expression() {
			return GetRuleContext<Throwable_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(NotCParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IN() { return GetTokens(NotCParser.IN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN(int i) {
			return GetToken(NotCParser.IN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(NotCParser.COMMA, 0); }
		public Operator_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterOperator_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitOperator_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_declarationContext operator_declaration() {
		Operator_declarationContext _localctx = new Operator_declarationContext(Context, State);
		EnterRule(_localctx, 428, RULE_operator_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2562;
			Match(OPERATOR);
			State = 2563;
			overloadable_operator();
			State = 2564;
			Match(OPEN_PARENS);
			State = 2566;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IN) {
				{
				State = 2565;
				Match(IN);
				}
			}

			State = 2568;
			arg_declaration();
			State = 2574;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 2569;
				Match(COMMA);
				State = 2571;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IN) {
					{
					State = 2570;
					Match(IN);
					}
				}

				State = 2573;
				arg_declaration();
				}
			}

			State = 2576;
			Match(CLOSE_PARENS);
			State = 2582;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
			case SEMICOLON:
				{
				State = 2577;
				body();
				}
				break;
			case ASSIGNMENT:
				{
				State = 2578;
				right_arrow();
				State = 2579;
				throwable_expression();
				State = 2580;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arg_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(NotCParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Arg_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterArg_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitArg_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arg_declarationContext arg_declaration() {
		Arg_declarationContext _localctx = new Arg_declarationContext(Context, State);
		EnterRule(_localctx, 430, RULE_arg_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2584;
			type_();
			State = 2585;
			identifier();
			State = 2588;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGNMENT) {
				{
				State = 2586;
				Match(ASSIGNMENT);
				State = 2587;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_invocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(NotCParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(NotCParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Method_invocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_invocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterMethod_invocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitMethod_invocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_invocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_invocationContext method_invocation() {
		Method_invocationContext _localctx = new Method_invocationContext(Context, State);
		EnterRule(_localctx, 432, RULE_method_invocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2590;
			Match(OPEN_PARENS);
			State = 2592;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5966485470830662020L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & -9070250908047648657L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 34359837139L) != 0)) {
				{
				State = 2591;
				argument_list();
				}
			}

			State = 2594;
			Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_creation_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(NotCParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(NotCParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_or_collection_initializerContext object_or_collection_initializer() {
			return GetRuleContext<Object_or_collection_initializerContext>(0);
		}
		public Object_creation_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_creation_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterObject_creation_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitObject_creation_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_creation_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_creation_expressionContext object_creation_expression() {
		Object_creation_expressionContext _localctx = new Object_creation_expressionContext(Context, State);
		EnterRule(_localctx, 434, RULE_object_creation_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2596;
			Match(OPEN_PARENS);
			State = 2598;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5966485470830662020L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & -9070250908047648657L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 34359837139L) != 0)) {
				{
				State = 2597;
				argument_list();
				}
			}

			State = 2600;
			Match(CLOSE_PARENS);
			State = 2602;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,339,Context) ) {
			case 1:
				{
				State = 2601;
				object_or_collection_initializer();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(NotCParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(NotCParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALIAS() { return GetToken(NotCParser.ALIAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARGLIST() { return GetToken(NotCParser.ARGLIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASCENDING() { return GetToken(NotCParser.ASCENDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYNC() { return GetToken(NotCParser.ASYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AWAIT() { return GetToken(NotCParser.AWAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(NotCParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext[] comment() {
			return GetRuleContexts<CommentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext comment(int i) {
			return GetRuleContext<CommentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCENDING() { return GetToken(NotCParser.DESCENDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DYNAMIC() { return GetToken(NotCParser.DYNAMIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(NotCParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(NotCParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET() { return GetToken(NotCParser.GET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(NotCParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(NotCParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(NotCParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(NotCParser.LET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMEOF() { return GetToken(NotCParser.NAMEOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(NotCParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDERBY() { return GetToken(NotCParser.ORDERBY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOVE() { return GetToken(NotCParser.REMOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(NotCParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(NotCParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNMANAGED() { return GetToken(NotCParser.UNMANAGED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(NotCParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(NotCParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(NotCParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YIELD() { return GetToken(NotCParser.YIELD, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INotCParserListener typedListener = listener as INotCParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INotCParserVisitor<TResult> typedVisitor = visitor as INotCParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 436, RULE_identifier);
		try {
			int _alt;
			State = 2637;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2604;
				Match(IDENTIFIER);
				}
				break;
			case ADD:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2605;
				Match(ADD);
				}
				break;
			case ALIAS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2606;
				Match(ALIAS);
				}
				break;
			case ARGLIST:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2607;
				Match(ARGLIST);
				}
				break;
			case ASCENDING:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2608;
				Match(ASCENDING);
				}
				break;
			case ASYNC:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2609;
				Match(ASYNC);
				}
				break;
			case AWAIT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2610;
				Match(AWAIT);
				}
				break;
			case BY:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2611;
				Match(BY);
				}
				break;
			case SINGLE_LINE_DOC_COMMENT:
			case EMPTY_DELIMITED_DOC_COMMENT:
			case DELIMITED_DOC_COMMENT:
			case SINGLE_LINE_COMMENT:
			case DELIMITED_COMMENT:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2613;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2612;
						comment();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2615;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,340,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case DESCENDING:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2617;
				Match(DESCENDING);
				}
				break;
			case DYNAMIC:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2618;
				Match(DYNAMIC);
				}
				break;
			case EQUALS:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2619;
				Match(EQUALS);
				}
				break;
			case FROM:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2620;
				Match(FROM);
				}
				break;
			case GET:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2621;
				Match(GET);
				}
				break;
			case GROUP:
				EnterOuterAlt(_localctx, 15);
				{
				State = 2622;
				Match(GROUP);
				}
				break;
			case INTO:
				EnterOuterAlt(_localctx, 16);
				{
				State = 2623;
				Match(INTO);
				}
				break;
			case JOIN:
				EnterOuterAlt(_localctx, 17);
				{
				State = 2624;
				Match(JOIN);
				}
				break;
			case LET:
				EnterOuterAlt(_localctx, 18);
				{
				State = 2625;
				Match(LET);
				}
				break;
			case NAMEOF:
				EnterOuterAlt(_localctx, 19);
				{
				State = 2626;
				Match(NAMEOF);
				}
				break;
			case ON:
				EnterOuterAlt(_localctx, 20);
				{
				State = 2627;
				Match(ON);
				}
				break;
			case ORDERBY:
				EnterOuterAlt(_localctx, 21);
				{
				State = 2628;
				Match(ORDERBY);
				}
				break;
			case REMOVE:
				EnterOuterAlt(_localctx, 22);
				{
				State = 2629;
				Match(REMOVE);
				}
				break;
			case SELECT:
				EnterOuterAlt(_localctx, 23);
				{
				State = 2630;
				Match(SELECT);
				}
				break;
			case SET:
				EnterOuterAlt(_localctx, 24);
				{
				State = 2631;
				Match(SET);
				}
				break;
			case UNMANAGED:
				EnterOuterAlt(_localctx, 25);
				{
				State = 2632;
				Match(UNMANAGED);
				}
				break;
			case VAR:
				EnterOuterAlt(_localctx, 26);
				{
				State = 2633;
				Match(VAR);
				}
				break;
			case WHEN:
				EnterOuterAlt(_localctx, 27);
				{
				State = 2634;
				Match(WHEN);
				}
				break;
			case WHERE:
				EnterOuterAlt(_localctx, 28);
				{
				State = 2635;
				Match(WHERE);
				}
				break;
			case YIELD:
				EnterOuterAlt(_localctx, 29);
				{
				State = 2636;
				Match(YIELD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 87: return local_variable_declaration_sempred((Local_variable_declarationContext)_localctx, predIndex);
		case 190: return right_arrow_sempred((Right_arrowContext)_localctx, predIndex);
		case 191: return right_shift_sempred((Right_shiftContext)_localctx, predIndex);
		case 192: return right_shift_assignment_sempred((Right_shift_assignmentContext)_localctx, predIndex);
		}
		return true;
	}
	private bool local_variable_declaration_sempred(Local_variable_declarationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return  this.IsLocalVariableDeclaration() ;
		}
		return true;
	}
	private bool right_arrow_sempred(Right_arrowContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return (_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0);
		}
		return true;
	}
	private bool right_shift_sempred(Right_shiftContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return (_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0);
		}
		return true;
	}
	private bool right_shift_assignment_sempred(Right_shift_assignmentContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return (_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,191,2640,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,
		2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,
		2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
		2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
		2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,
		2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,
		2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,
		2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,
		2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,
		2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,
		2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,
		2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,
		2,207,7,207,2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,
		2,213,7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,
		1,0,3,0,440,8,0,1,0,3,0,443,8,0,1,0,3,0,446,8,0,1,0,5,0,449,8,0,10,0,12,
		0,452,9,0,1,0,3,0,455,8,0,1,0,3,0,458,8,0,1,0,1,0,1,1,1,1,3,1,464,8,1,
		1,1,3,1,467,8,1,1,1,1,1,1,1,3,1,472,8,1,5,1,474,8,1,10,1,12,1,477,9,1,
		1,2,1,2,1,2,1,2,5,2,483,8,2,10,2,12,2,486,9,2,1,3,1,3,1,3,1,3,1,3,3,3,
		493,8,3,1,4,1,4,1,4,1,4,4,4,499,8,4,11,4,12,4,500,1,4,1,4,1,5,1,5,3,5,
		507,8,5,1,6,1,6,3,6,511,8,6,1,7,1,7,1,7,3,7,516,8,7,1,8,1,8,1,9,1,9,1,
		10,1,10,1,10,1,10,3,10,526,8,10,1,11,1,11,1,11,1,11,5,11,532,8,11,10,11,
		12,11,535,9,11,1,11,1,11,1,12,1,12,1,12,5,12,542,8,12,10,12,12,12,545,
		9,12,1,13,1,13,1,13,3,13,550,8,13,1,13,3,13,553,8,13,1,13,1,13,1,13,3,
		13,558,8,13,1,13,3,13,561,8,13,1,14,1,14,1,14,1,14,3,14,567,8,14,1,15,
		1,15,1,15,3,15,572,8,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,582,
		8,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,595,8,
		17,1,18,1,18,1,18,1,18,1,18,1,18,3,18,603,8,18,1,19,1,19,1,19,1,19,3,19,
		609,8,19,3,19,611,8,19,1,20,1,20,1,20,5,20,616,8,20,10,20,12,20,619,9,
		20,1,21,1,21,1,21,5,21,624,8,21,10,21,12,21,627,9,21,1,22,1,22,1,22,5,
		22,632,8,22,10,22,12,22,635,9,22,1,23,1,23,1,23,5,23,640,8,23,10,23,12,
		23,643,9,23,1,24,1,24,1,24,5,24,648,8,24,10,24,12,24,651,9,24,1,25,1,25,
		1,25,5,25,656,8,25,10,25,12,25,659,9,25,1,26,1,26,1,26,1,26,1,26,1,26,
		1,26,5,26,668,8,26,10,26,12,26,671,9,26,1,27,1,27,1,27,3,27,676,8,27,1,
		27,5,27,679,8,27,10,27,12,27,682,9,27,1,28,1,28,1,28,5,28,687,8,28,10,
		28,12,28,690,9,28,1,29,1,29,1,29,5,29,695,8,29,10,29,12,29,698,9,29,1,
		30,1,30,1,30,1,30,1,30,3,30,705,8,30,3,30,707,8,30,1,30,3,30,710,8,30,
		1,31,1,31,1,31,5,31,715,8,31,10,31,12,31,718,9,31,1,32,1,32,3,32,722,8,
		32,1,32,1,32,1,32,1,33,1,33,3,33,729,8,33,1,33,1,33,3,33,733,8,33,3,33,
		735,8,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
		34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,759,8,34,1,35,1,35,
		1,35,1,35,1,35,1,36,1,36,3,36,768,8,36,1,36,5,36,771,8,36,10,36,12,36,
		774,9,36,1,36,3,36,777,8,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,785,8,36,
		1,36,3,36,788,8,36,1,36,5,36,791,8,36,10,36,12,36,794,9,36,1,36,3,36,797,
		8,36,5,36,799,8,36,10,36,12,36,802,9,36,1,37,1,37,1,37,3,37,807,8,37,1,
		37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,820,8,37,1,37,
		1,37,1,37,1,37,3,37,826,8,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,5,
		37,836,8,37,10,37,12,37,839,9,37,1,37,3,37,842,8,37,1,37,4,37,845,8,37,
		11,37,12,37,846,1,37,1,37,3,37,851,8,37,1,37,1,37,1,37,1,37,3,37,857,8,
		37,1,37,1,37,1,37,1,37,4,37,863,8,37,11,37,12,37,864,1,37,1,37,1,37,1,
		37,1,37,1,37,1,37,3,37,874,8,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
		1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,892,8,37,1,37,3,37,895,8,
		37,1,37,1,37,1,37,3,37,900,8,37,1,37,3,37,903,8,37,1,37,1,37,1,37,1,37,
		1,37,1,37,1,37,1,37,1,37,1,37,1,37,5,37,916,8,37,10,37,12,37,919,9,37,
		1,37,1,37,1,37,3,37,924,8,37,1,38,1,38,3,38,928,8,38,1,39,1,39,1,39,1,
		40,3,40,934,8,40,1,40,1,40,1,40,3,40,939,8,40,1,41,3,41,942,8,41,1,41,
		1,41,1,41,1,41,5,41,948,8,41,10,41,12,41,951,9,41,1,41,1,41,1,42,1,42,
		1,42,3,42,958,8,42,1,42,1,42,1,43,1,43,1,44,1,44,1,44,5,44,967,8,44,10,
		44,12,44,970,9,44,1,45,1,45,3,45,974,8,45,1,46,1,46,1,46,3,46,979,8,46,
		3,46,981,8,46,1,46,1,46,1,47,1,47,1,47,5,47,988,8,47,10,47,12,47,991,9,
		47,1,48,1,48,1,48,1,48,1,48,3,48,998,8,48,1,48,1,48,1,48,1,49,1,49,3,49,
		1005,8,49,1,50,1,50,1,50,1,50,5,50,1011,8,50,10,50,12,50,1014,9,50,1,50,
		3,50,1017,8,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,3,51,1026,8,51,1,52,
		1,52,1,52,3,52,1031,8,52,3,52,1033,8,52,1,52,1,52,1,53,1,53,1,53,5,53,
		1040,8,53,10,53,12,53,1043,9,53,1,54,1,54,1,54,1,54,1,54,3,54,1050,8,54,
		1,55,1,55,3,55,1054,8,55,1,55,1,55,1,55,3,55,1059,8,55,3,55,1061,8,55,
		1,55,1,55,1,55,3,55,1066,8,55,5,55,1068,8,55,10,55,12,55,1071,9,55,1,56,
		1,56,5,56,1075,8,56,10,56,12,56,1078,9,56,1,56,1,56,1,57,1,57,1,57,5,57,
		1085,8,57,10,57,12,57,1088,9,57,1,57,3,57,1091,8,57,1,57,3,57,1094,8,57,
		1,57,3,57,1097,8,57,1,58,1,58,1,58,1,58,5,58,1103,8,58,10,58,12,58,1106,
		9,58,1,58,1,58,1,59,1,59,1,59,1,59,1,60,3,60,1115,8,60,1,60,1,60,1,60,
		1,60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,1132,
		8,61,1,62,1,62,1,62,5,62,1137,8,62,10,62,12,62,1140,9,62,1,63,3,63,1143,
		8,63,1,63,1,63,1,63,1,64,1,64,1,64,5,64,1151,8,64,10,64,12,64,1154,9,64,
		1,65,1,65,3,65,1158,8,65,1,66,1,66,1,66,1,67,1,67,3,67,1165,8,67,1,67,
		1,67,1,67,1,67,1,68,5,68,1172,8,68,10,68,12,68,1175,9,68,1,68,1,68,3,68,
		1179,8,68,1,69,1,69,1,69,1,69,1,69,3,69,1186,8,69,1,70,1,70,1,70,1,70,
		1,70,1,71,1,71,1,71,1,72,1,72,3,72,1198,8,72,1,72,1,72,1,72,1,72,1,72,
		1,72,1,72,1,72,1,72,3,72,1209,8,72,1,73,1,73,1,73,1,73,5,73,1215,8,73,
		10,73,12,73,1218,9,73,1,74,1,74,3,74,1222,8,74,1,75,1,75,1,75,1,75,1,75,
		1,75,1,75,3,75,1231,8,75,1,76,1,76,1,76,1,76,1,77,1,77,1,77,1,77,3,77,
		1241,8,77,1,78,1,78,1,78,1,78,1,78,1,78,1,78,3,78,1250,8,78,1,79,1,79,
		1,79,1,80,3,80,1256,8,80,1,80,1,80,1,80,3,80,1261,8,80,1,80,1,80,3,80,
		1265,8,80,1,80,1,80,3,80,1269,8,80,1,81,1,81,3,81,1273,8,81,1,81,1,81,
		3,81,1277,8,81,1,82,1,82,1,82,1,82,1,82,3,82,1284,8,82,1,83,1,83,1,83,
		1,83,1,84,1,84,3,84,1292,8,84,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,
		1,85,1,85,1,85,3,85,1305,8,85,1,85,1,85,1,85,1,85,1,85,1,85,5,85,1313,
		8,85,10,85,12,85,1316,9,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,
		1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,1337,8,85,1,85,
		1,85,3,85,1341,8,85,1,85,1,85,3,85,1345,8,85,1,85,1,85,1,85,3,85,1350,
		8,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,
		1,85,1,85,1,85,1,85,1,85,3,85,1370,8,85,1,85,1,85,1,85,3,85,1375,8,85,
		1,85,1,85,1,85,3,85,1380,8,85,1,85,1,85,1,85,1,85,1,85,3,85,1387,8,85,
		1,85,3,85,1390,8,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,
		1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,1412,8,85,1,85,
		1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,1424,8,85,1,86,1,86,
		3,86,1428,8,86,1,86,1,86,1,87,1,87,1,87,1,87,3,87,1436,8,87,1,87,1,87,
		1,87,1,87,1,87,1,87,5,87,1444,8,87,10,87,12,87,1447,9,87,1,87,1,87,1,87,
		1,87,3,87,1453,8,87,1,88,1,88,3,88,1457,8,88,1,89,1,89,1,89,3,89,1462,
		8,89,1,89,3,89,1465,8,89,1,90,1,90,1,90,3,90,1470,8,90,1,91,1,91,1,91,
		1,91,1,92,1,92,3,92,1478,8,92,1,93,4,93,1481,8,93,11,93,12,93,1482,1,93,
		1,93,1,94,1,94,1,94,3,94,1490,8,94,1,94,1,94,1,94,1,94,3,94,1496,8,94,
		1,95,1,95,1,95,1,96,4,96,1502,8,96,11,96,12,96,1503,1,97,1,97,1,97,1,97,
		5,97,1510,8,97,10,97,12,97,1513,9,97,3,97,1515,8,97,1,98,1,98,1,98,5,98,
		1520,8,98,10,98,12,98,1523,9,98,1,99,1,99,5,99,1527,8,99,10,99,12,99,1530,
		9,99,1,99,3,99,1533,8,99,1,99,3,99,1536,8,99,1,100,1,100,1,100,1,100,3,
		100,1542,8,100,1,100,1,100,3,100,1546,8,100,1,100,1,100,1,101,1,101,3,
		101,1552,8,101,1,101,1,101,1,102,1,102,1,102,1,102,1,102,1,103,1,103,1,
		103,1,104,1,104,3,104,1566,8,104,1,105,1,105,1,105,1,105,3,105,1572,8,
		105,1,106,1,106,1,106,5,106,1577,8,106,10,106,12,106,1580,9,106,1,107,
		1,107,3,107,1584,8,107,1,107,3,107,1587,8,107,1,107,3,107,1590,8,107,1,
		107,1,107,1,108,4,108,1595,8,108,11,108,12,108,1596,1,109,1,109,1,109,
		1,109,1,109,1,110,4,110,1605,8,110,11,110,12,110,1606,1,111,1,111,1,111,
		1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,
		1,111,1,111,1,111,1,111,1,111,3,111,1629,8,111,1,112,4,112,1632,8,112,
		11,112,12,112,1633,1,113,1,113,3,113,1638,8,113,1,114,3,114,1641,8,114,
		1,114,3,114,1644,8,114,1,114,1,114,1,114,1,114,3,114,1650,8,114,1,115,
		1,115,1,115,1,115,3,115,1656,8,115,1,116,1,116,1,116,1,116,5,116,1662,
		8,116,10,116,12,116,1665,9,116,1,116,1,116,1,117,3,117,1670,8,117,1,117,
		1,117,1,118,1,118,1,118,1,118,5,118,1678,8,118,10,118,12,118,1681,9,118,
		1,119,1,119,1,119,5,119,1686,8,119,10,119,12,119,1689,9,119,1,120,4,120,
		1692,8,120,11,120,12,120,1693,1,121,1,121,1,121,1,121,1,121,1,122,1,122,
		1,122,1,122,3,122,1705,8,122,1,122,1,122,3,122,1709,8,122,3,122,1711,8,
		122,1,123,1,123,1,123,3,123,1716,8,123,1,124,1,124,1,124,5,124,1721,8,
		124,10,124,12,124,1724,9,124,1,125,1,125,1,125,1,125,1,126,1,126,3,126,
		1732,8,126,1,126,1,126,1,127,4,127,1737,8,127,11,127,12,127,1738,1,128,
		3,128,1742,8,128,1,128,3,128,1745,8,128,1,128,1,128,3,128,1749,8,128,1,
		128,3,128,1752,8,128,1,129,4,129,1755,8,129,11,129,12,129,1756,1,130,1,
		130,1,131,4,131,1762,8,131,11,131,12,131,1763,1,132,1,132,1,133,1,133,
		1,133,1,133,1,133,1,133,1,133,1,133,1,133,3,133,1777,8,133,1,133,1,133,
		1,133,1,133,1,133,1,133,1,133,3,133,1786,8,133,1,134,1,134,1,134,1,134,
		1,134,3,134,1793,8,134,1,134,1,134,1,134,1,134,1,134,1,134,1,134,1,134,
		3,134,1803,8,134,1,135,1,135,1,135,5,135,1808,8,135,10,135,12,135,1811,
		9,135,1,136,1,136,1,136,1,136,1,137,1,137,1,137,5,137,1820,8,137,10,137,
		12,137,1823,9,137,1,138,1,138,1,138,3,138,1828,8,138,1,139,1,139,3,139,
		1832,8,139,1,140,1,140,3,140,1836,8,140,1,141,1,141,1,142,1,142,3,142,
		1842,8,142,1,143,1,143,1,143,1,143,3,143,1848,8,143,3,143,1850,8,143,1,
		144,1,144,1,144,5,144,1855,8,144,10,144,12,144,1858,9,144,1,145,3,145,
		1861,8,145,1,145,3,145,1864,8,145,1,145,1,145,3,145,1868,8,145,1,146,1,
		146,1,147,3,147,1873,8,147,1,147,1,147,1,147,1,147,1,148,3,148,1880,8,
		148,1,148,3,148,1883,8,148,1,148,1,148,1,148,3,148,1888,8,148,1,148,1,
		148,1,148,3,148,1893,8,148,3,148,1895,8,148,1,149,3,149,1898,8,149,1,149,
		3,149,1901,8,149,1,149,1,149,1,149,1,150,3,150,1907,8,150,1,150,3,150,
		1910,8,150,1,150,1,150,1,150,1,151,1,151,1,152,1,152,3,152,1919,8,152,
		1,153,3,153,1922,8,153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,
		3,153,1932,8,153,1,154,3,154,1935,8,154,1,154,1,154,1,154,1,155,3,155,
		1941,8,155,1,155,1,155,1,155,1,156,1,156,1,156,1,156,1,156,1,156,1,156,
		1,156,1,156,1,156,1,156,1,156,1,156,1,156,1,156,1,156,1,156,1,156,1,156,
		1,156,1,156,1,156,3,156,1968,8,156,1,157,1,157,1,157,1,157,1,157,1,157,
		1,157,1,158,1,158,1,158,1,158,3,158,1981,8,158,1,158,1,158,1,159,1,159,
		3,159,1987,8,159,1,160,1,160,1,160,1,161,1,161,5,161,1994,8,161,10,161,
		12,161,1997,9,161,1,161,1,161,1,162,3,162,2002,8,162,1,162,3,162,2005,
		8,162,1,162,1,162,1,162,1,162,4,162,2011,8,162,11,162,12,162,2012,1,162,
		1,162,3,162,2017,8,162,1,163,1,163,5,163,2021,8,163,10,163,12,163,2024,
		9,163,1,163,4,163,2027,8,163,11,163,12,163,2028,1,164,1,164,5,164,2033,
		8,164,10,164,12,164,2036,9,164,1,164,1,164,1,165,1,165,1,165,1,165,5,165,
		2044,8,165,10,165,12,165,2047,9,165,1,165,3,165,2050,8,165,3,165,2052,
		8,165,1,165,1,165,1,166,1,166,1,166,1,166,5,166,2060,8,166,10,166,12,166,
		2063,9,166,1,166,1,166,1,167,3,167,2068,8,167,1,167,3,167,2071,8,167,1,
		167,1,167,1,168,1,168,1,169,1,169,1,169,1,170,1,170,5,170,2082,8,170,10,
		170,12,170,2085,9,170,1,170,1,170,1,171,3,171,2090,8,171,1,171,3,171,2093,
		8,171,1,171,3,171,2096,8,171,1,171,1,171,1,171,1,171,1,171,3,171,2103,
		8,171,1,171,1,171,1,171,3,171,2108,8,171,1,171,1,171,3,171,2112,8,171,
		1,171,1,171,3,171,2116,8,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,
		3,171,2125,8,171,1,171,3,171,2128,8,171,1,171,1,171,1,171,3,171,2133,8,
		171,1,171,1,171,3,171,2137,8,171,1,171,1,171,3,171,2141,8,171,1,171,1,
		171,1,171,1,171,1,171,1,171,1,171,3,171,2150,8,171,1,172,3,172,2153,8,
		172,1,172,1,172,1,172,3,172,2158,8,172,1,172,1,172,3,172,2162,8,172,1,
		172,1,172,1,172,3,172,2167,8,172,1,172,1,172,3,172,2171,8,172,3,172,2173,
		8,172,1,173,1,173,1,173,1,174,1,174,1,174,1,174,5,174,2182,8,174,10,174,
		12,174,2185,9,174,1,174,3,174,2188,8,174,3,174,2190,8,174,1,174,1,174,
		1,175,3,175,2195,8,175,1,175,1,175,1,175,3,175,2200,8,175,1,176,1,176,
		1,176,1,176,1,176,3,176,2207,8,176,1,176,1,176,1,177,1,177,3,177,2213,
		8,177,1,178,4,178,2216,8,178,11,178,12,178,2217,1,179,1,179,1,179,1,179,
		3,179,2224,8,179,1,179,1,179,3,179,2228,8,179,1,179,1,179,1,180,1,180,
		3,180,2234,8,180,1,181,1,181,1,181,5,181,2239,8,181,10,181,12,181,2242,
		9,181,1,182,1,182,1,182,1,182,1,182,5,182,2249,8,182,10,182,12,182,2252,
		9,182,3,182,2254,8,182,1,182,3,182,2257,8,182,1,183,1,183,1,183,3,183,
		2262,8,183,1,183,1,183,1,184,1,184,3,184,2268,8,184,1,184,1,184,5,184,
		2272,8,184,10,184,12,184,2275,9,184,1,184,1,184,1,184,1,184,3,184,2281,
		8,184,1,185,1,185,1,185,5,185,2286,8,185,10,185,12,185,2289,9,185,1,186,
		1,186,1,186,1,186,1,187,3,187,2296,8,187,1,187,1,187,3,187,2300,8,187,
		1,188,1,188,1,188,1,188,1,188,1,189,1,189,1,189,1,189,1,189,1,189,1,189,
		1,189,3,189,2315,8,189,1,189,1,189,3,189,2319,8,189,1,189,1,189,1,189,
		1,189,1,189,5,189,2326,8,189,10,189,12,189,2329,9,189,1,189,3,189,2332,
		8,189,1,189,1,189,3,189,2336,8,189,1,190,1,190,1,190,1,190,1,191,1,191,
		1,191,1,191,1,192,1,192,1,192,1,192,1,193,1,193,1,193,1,193,1,193,1,193,
		1,193,1,193,3,193,2358,8,193,1,194,1,194,1,195,1,195,1,195,1,195,3,195,
		2366,8,195,1,196,1,196,5,196,2370,8,196,10,196,12,196,2373,9,196,1,196,
		1,196,1,197,1,197,5,197,2379,8,197,10,197,12,197,2382,9,197,1,197,1,197,
		1,198,1,198,1,198,1,198,3,198,2390,8,198,1,199,1,199,1,199,1,199,3,199,
		2396,8,199,1,200,1,200,1,200,5,200,2401,8,200,10,200,12,200,2404,9,200,
		1,200,1,200,4,200,2408,8,200,11,200,12,200,2409,3,200,2412,8,200,1,201,
		1,201,1,202,3,202,2417,8,202,1,202,1,202,1,202,3,202,2422,8,202,1,202,
		3,202,2425,8,202,1,202,3,202,2428,8,202,1,202,1,202,3,202,2432,8,202,1,
		203,1,203,1,203,3,203,2437,8,203,1,203,3,203,2440,8,203,1,203,3,203,2443,
		8,203,1,203,1,203,3,203,2447,8,203,1,204,1,204,1,204,3,204,2452,8,204,
		1,204,1,204,3,204,2456,8,204,1,205,1,205,1,205,1,205,3,205,2462,8,205,
		1,205,1,205,3,205,2466,8,205,1,205,1,205,3,205,2470,8,205,1,205,1,205,
		1,206,1,206,1,206,1,206,1,206,1,206,1,206,1,206,1,206,1,206,3,206,2484,
		8,206,1,207,1,207,1,207,1,208,1,208,1,208,1,208,1,208,1,208,1,208,1,208,
		3,208,2497,8,208,1,208,1,208,1,208,1,208,3,208,2503,8,208,1,209,1,209,
		1,209,1,209,1,209,1,210,1,210,1,210,1,210,1,210,1,210,1,211,1,211,1,211,
		3,211,2519,8,211,1,211,1,211,3,211,2523,8,211,1,211,1,211,1,212,1,212,
		3,212,2529,8,212,1,212,1,212,3,212,2533,8,212,1,212,1,212,3,212,2537,8,
		212,1,212,1,212,1,212,1,212,1,212,3,212,2544,8,212,1,213,1,213,1,213,1,
		213,1,213,3,213,2551,8,213,1,213,3,213,2554,8,213,1,213,1,213,5,213,2558,
		8,213,10,213,12,213,2561,9,213,1,214,1,214,1,214,1,214,3,214,2567,8,214,
		1,214,1,214,1,214,3,214,2572,8,214,1,214,3,214,2575,8,214,1,214,1,214,
		1,214,1,214,1,214,1,214,3,214,2583,8,214,1,215,1,215,1,215,1,215,3,215,
		2589,8,215,1,216,1,216,3,216,2593,8,216,1,216,1,216,1,217,1,217,3,217,
		2599,8,217,1,217,1,217,3,217,2603,8,217,1,218,1,218,1,218,1,218,1,218,
		1,218,1,218,1,218,1,218,4,218,2614,8,218,11,218,12,218,2615,1,218,1,218,
		1,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,
		1,218,1,218,1,218,1,218,1,218,1,218,3,218,2638,8,218,1,218,0,0,219,0,2,
		4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,
		54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
		102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,
		138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,
		174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,
		210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,
		246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,
		282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,314,316,
		318,320,322,324,326,328,330,332,334,336,338,340,342,344,346,348,350,352,
		354,356,358,360,362,364,366,368,370,372,374,376,378,380,382,384,386,388,
		390,392,394,396,398,400,402,404,406,408,410,412,414,416,418,420,422,424,
		426,428,430,432,434,436,0,19,8,0,20,20,23,23,53,53,61,61,79,79,82,82,93,
		94,98,98,2,0,32,32,43,43,3,0,52,52,71,71,76,76,1,0,149,150,2,0,139,140,
		151,152,1,0,128,129,1,0,130,132,14,0,17,17,20,20,23,23,27,27,32,32,43,
		43,53,53,61,61,67,67,79,79,82,82,86,86,93,94,98,98,2,0,13,13,30,30,2,0,
		14,14,97,97,1,0,2,6,8,0,14,14,39,39,55,55,65,65,73,75,85,85,97,97,102,
		102,2,0,55,55,73,73,2,0,38,38,51,51,2,0,130,130,141,141,2,0,52,52,71,71,
		2,0,40,40,90,90,17,0,12,12,16,18,20,29,31,32,34,35,37,45,48,48,50,55,57,
		57,60,62,64,67,69,69,71,76,78,79,82,99,101,102,105,105,1,0,75,76,2922,
		0,439,1,0,0,0,2,466,1,0,0,0,4,478,1,0,0,0,6,492,1,0,0,0,8,494,1,0,0,0,
		10,504,1,0,0,0,12,510,1,0,0,0,14,515,1,0,0,0,16,517,1,0,0,0,18,519,1,0,
		0,0,20,525,1,0,0,0,22,527,1,0,0,0,24,538,1,0,0,0,26,549,1,0,0,0,28,566,
		1,0,0,0,30,571,1,0,0,0,32,581,1,0,0,0,34,594,1,0,0,0,36,596,1,0,0,0,38,
		604,1,0,0,0,40,612,1,0,0,0,42,620,1,0,0,0,44,628,1,0,0,0,46,636,1,0,0,
		0,48,644,1,0,0,0,50,652,1,0,0,0,52,660,1,0,0,0,54,672,1,0,0,0,56,683,1,
		0,0,0,58,691,1,0,0,0,60,699,1,0,0,0,62,711,1,0,0,0,64,719,1,0,0,0,66,734,
		1,0,0,0,68,758,1,0,0,0,70,760,1,0,0,0,72,765,1,0,0,0,74,923,1,0,0,0,76,
		927,1,0,0,0,78,929,1,0,0,0,80,933,1,0,0,0,82,941,1,0,0,0,84,957,1,0,0,
		0,86,961,1,0,0,0,88,963,1,0,0,0,90,973,1,0,0,0,92,975,1,0,0,0,94,984,1,
		0,0,0,96,997,1,0,0,0,98,1004,1,0,0,0,100,1006,1,0,0,0,102,1025,1,0,0,0,
		104,1027,1,0,0,0,106,1036,1,0,0,0,108,1049,1,0,0,0,110,1051,1,0,0,0,112,
		1072,1,0,0,0,114,1081,1,0,0,0,116,1098,1,0,0,0,118,1109,1,0,0,0,120,1114,
		1,0,0,0,122,1131,1,0,0,0,124,1133,1,0,0,0,126,1142,1,0,0,0,128,1147,1,
		0,0,0,130,1157,1,0,0,0,132,1159,1,0,0,0,134,1162,1,0,0,0,136,1173,1,0,
		0,0,138,1185,1,0,0,0,140,1187,1,0,0,0,142,1192,1,0,0,0,144,1195,1,0,0,
		0,146,1210,1,0,0,0,148,1219,1,0,0,0,150,1230,1,0,0,0,152,1232,1,0,0,0,
		154,1240,1,0,0,0,156,1249,1,0,0,0,158,1251,1,0,0,0,160,1255,1,0,0,0,162,
		1276,1,0,0,0,164,1283,1,0,0,0,166,1285,1,0,0,0,168,1291,1,0,0,0,170,1423,
		1,0,0,0,172,1425,1,0,0,0,174,1452,1,0,0,0,176,1456,1,0,0,0,178,1458,1,
		0,0,0,180,1469,1,0,0,0,182,1471,1,0,0,0,184,1477,1,0,0,0,186,1480,1,0,
		0,0,188,1495,1,0,0,0,190,1497,1,0,0,0,192,1501,1,0,0,0,194,1514,1,0,0,
		0,196,1516,1,0,0,0,198,1535,1,0,0,0,200,1537,1,0,0,0,202,1549,1,0,0,0,
		204,1555,1,0,0,0,206,1560,1,0,0,0,208,1565,1,0,0,0,210,1567,1,0,0,0,212,
		1573,1,0,0,0,214,1581,1,0,0,0,216,1594,1,0,0,0,218,1598,1,0,0,0,220,1604,
		1,0,0,0,222,1628,1,0,0,0,224,1631,1,0,0,0,226,1637,1,0,0,0,228,1640,1,
		0,0,0,230,1651,1,0,0,0,232,1657,1,0,0,0,234,1669,1,0,0,0,236,1673,1,0,
		0,0,238,1682,1,0,0,0,240,1691,1,0,0,0,242,1695,1,0,0,0,244,1710,1,0,0,
		0,246,1715,1,0,0,0,248,1717,1,0,0,0,250,1725,1,0,0,0,252,1729,1,0,0,0,
		254,1736,1,0,0,0,256,1751,1,0,0,0,258,1754,1,0,0,0,260,1758,1,0,0,0,262,
		1761,1,0,0,0,264,1765,1,0,0,0,266,1785,1,0,0,0,268,1792,1,0,0,0,270,1804,
		1,0,0,0,272,1812,1,0,0,0,274,1816,1,0,0,0,276,1824,1,0,0,0,278,1831,1,
		0,0,0,280,1835,1,0,0,0,282,1837,1,0,0,0,284,1841,1,0,0,0,286,1849,1,0,
		0,0,288,1851,1,0,0,0,290,1867,1,0,0,0,292,1869,1,0,0,0,294,1872,1,0,0,
		0,296,1879,1,0,0,0,298,1897,1,0,0,0,300,1906,1,0,0,0,302,1914,1,0,0,0,
		304,1918,1,0,0,0,306,1921,1,0,0,0,308,1934,1,0,0,0,310,1940,1,0,0,0,312,
		1967,1,0,0,0,314,1969,1,0,0,0,316,1976,1,0,0,0,318,1986,1,0,0,0,320,1988,
		1,0,0,0,322,1991,1,0,0,0,324,2001,1,0,0,0,326,2018,1,0,0,0,328,2030,1,
		0,0,0,330,2039,1,0,0,0,332,2055,1,0,0,0,334,2067,1,0,0,0,336,2074,1,0,
		0,0,338,2076,1,0,0,0,340,2079,1,0,0,0,342,2089,1,0,0,0,344,2152,1,0,0,
		0,346,2174,1,0,0,0,348,2177,1,0,0,0,350,2194,1,0,0,0,352,2201,1,0,0,0,
		354,2212,1,0,0,0,356,2215,1,0,0,0,358,2219,1,0,0,0,360,2233,1,0,0,0,362,
		2235,1,0,0,0,364,2243,1,0,0,0,366,2261,1,0,0,0,368,2280,1,0,0,0,370,2282,
		1,0,0,0,372,2290,1,0,0,0,374,2299,1,0,0,0,376,2301,1,0,0,0,378,2335,1,
		0,0,0,380,2337,1,0,0,0,382,2341,1,0,0,0,384,2345,1,0,0,0,386,2357,1,0,
		0,0,388,2359,1,0,0,0,390,2365,1,0,0,0,392,2367,1,0,0,0,394,2376,1,0,0,
		0,396,2389,1,0,0,0,398,2395,1,0,0,0,400,2397,1,0,0,0,402,2413,1,0,0,0,
		404,2416,1,0,0,0,406,2433,1,0,0,0,408,2448,1,0,0,0,410,2457,1,0,0,0,412,
		2473,1,0,0,0,414,2485,1,0,0,0,416,2488,1,0,0,0,418,2504,1,0,0,0,420,2509,
		1,0,0,0,422,2515,1,0,0,0,424,2526,1,0,0,0,426,2550,1,0,0,0,428,2562,1,
		0,0,0,430,2584,1,0,0,0,432,2590,1,0,0,0,434,2596,1,0,0,0,436,2637,1,0,
		0,0,438,440,5,1,0,0,439,438,1,0,0,0,439,440,1,0,0,0,440,442,1,0,0,0,441,
		443,3,216,108,0,442,441,1,0,0,0,442,443,1,0,0,0,443,445,1,0,0,0,444,446,
		3,220,110,0,445,444,1,0,0,0,445,446,1,0,0,0,446,450,1,0,0,0,447,449,3,
		352,176,0,448,447,1,0,0,0,449,452,1,0,0,0,450,448,1,0,0,0,450,451,1,0,
		0,0,451,454,1,0,0,0,452,450,1,0,0,0,453,455,3,224,112,0,454,453,1,0,0,
		0,454,455,1,0,0,0,455,457,1,0,0,0,456,458,3,254,127,0,457,456,1,0,0,0,
		457,458,1,0,0,0,458,459,1,0,0,0,459,460,5,0,0,1,460,1,1,0,0,0,461,463,
		3,436,218,0,462,464,3,22,11,0,463,462,1,0,0,0,463,464,1,0,0,0,464,467,
		1,0,0,0,465,467,3,230,115,0,466,461,1,0,0,0,466,465,1,0,0,0,467,475,1,
		0,0,0,468,469,5,124,0,0,469,471,3,436,218,0,470,472,3,22,11,0,471,470,
		1,0,0,0,471,472,1,0,0,0,472,474,1,0,0,0,473,468,1,0,0,0,474,477,1,0,0,
		0,475,473,1,0,0,0,475,476,1,0,0,0,476,3,1,0,0,0,477,475,1,0,0,0,478,484,
		3,6,3,0,479,483,5,141,0,0,480,483,3,328,164,0,481,483,5,130,0,0,482,479,
		1,0,0,0,482,480,1,0,0,0,482,481,1,0,0,0,483,486,1,0,0,0,484,482,1,0,0,
		0,484,485,1,0,0,0,485,5,1,0,0,0,486,484,1,0,0,0,487,493,3,12,6,0,488,493,
		3,20,10,0,489,490,5,101,0,0,490,493,5,130,0,0,491,493,3,8,4,0,492,487,
		1,0,0,0,492,488,1,0,0,0,492,489,1,0,0,0,492,491,1,0,0,0,493,7,1,0,0,0,
		494,495,5,122,0,0,495,498,3,10,5,0,496,497,5,125,0,0,497,499,3,10,5,0,
		498,496,1,0,0,0,499,500,1,0,0,0,500,498,1,0,0,0,500,501,1,0,0,0,501,502,
		1,0,0,0,502,503,5,123,0,0,503,9,1,0,0,0,504,506,3,4,2,0,505,507,3,436,
		218,0,506,505,1,0,0,0,506,507,1,0,0,0,507,11,1,0,0,0,508,511,3,14,7,0,
		509,511,5,17,0,0,510,508,1,0,0,0,510,509,1,0,0,0,511,13,1,0,0,0,512,516,
		3,16,8,0,513,516,3,18,9,0,514,516,5,27,0,0,515,512,1,0,0,0,515,513,1,0,
		0,0,515,514,1,0,0,0,516,15,1,0,0,0,517,518,7,0,0,0,518,17,1,0,0,0,519,
		520,7,1,0,0,520,19,1,0,0,0,521,526,3,2,1,0,522,526,5,67,0,0,523,526,5,
		33,0,0,524,526,5,86,0,0,525,521,1,0,0,0,525,522,1,0,0,0,525,523,1,0,0,
		0,525,524,1,0,0,0,526,21,1,0,0,0,527,528,5,139,0,0,528,533,3,4,2,0,529,
		530,5,125,0,0,530,532,3,4,2,0,531,529,1,0,0,0,532,535,1,0,0,0,533,531,
		1,0,0,0,533,534,1,0,0,0,534,536,1,0,0,0,535,533,1,0,0,0,536,537,5,140,
		0,0,537,23,1,0,0,0,538,543,3,26,13,0,539,540,5,125,0,0,540,542,3,26,13,
		0,541,539,1,0,0,0,542,545,1,0,0,0,543,541,1,0,0,0,543,544,1,0,0,0,544,
		25,1,0,0,0,545,543,1,0,0,0,546,547,3,436,218,0,547,548,5,126,0,0,548,550,
		1,0,0,0,549,546,1,0,0,0,549,550,1,0,0,0,550,552,1,0,0,0,551,553,7,2,0,
		0,552,551,1,0,0,0,552,553,1,0,0,0,553,560,1,0,0,0,554,561,3,28,14,0,555,
		558,5,100,0,0,556,558,3,4,2,0,557,555,1,0,0,0,557,556,1,0,0,0,558,559,
		1,0,0,0,559,561,3,28,14,0,560,554,1,0,0,0,560,557,1,0,0,0,561,27,1,0,0,
		0,562,567,3,32,16,0,563,567,3,30,15,0,564,565,5,76,0,0,565,567,3,30,15,
		0,566,562,1,0,0,0,566,563,1,0,0,0,566,564,1,0,0,0,567,29,1,0,0,0,568,572,
		3,120,60,0,569,572,3,132,66,0,570,572,3,36,18,0,571,568,1,0,0,0,571,569,
		1,0,0,0,571,570,1,0,0,0,572,31,1,0,0,0,573,574,3,68,34,0,574,575,3,34,
		17,0,575,576,3,28,14,0,576,582,1,0,0,0,577,578,3,68,34,0,578,579,5,163,
		0,0,579,580,3,76,38,0,580,582,1,0,0,0,581,573,1,0,0,0,581,577,1,0,0,0,
		582,33,1,0,0,0,583,595,5,138,0,0,584,595,5,153,0,0,585,595,5,154,0,0,586,
		595,5,155,0,0,587,595,5,156,0,0,588,595,5,157,0,0,589,595,5,158,0,0,590,
		595,5,159,0,0,591,595,5,160,0,0,592,595,5,162,0,0,593,595,3,384,192,0,
		594,583,1,0,0,0,594,584,1,0,0,0,594,585,1,0,0,0,594,586,1,0,0,0,594,587,
		1,0,0,0,594,588,1,0,0,0,594,589,1,0,0,0,594,590,1,0,0,0,594,591,1,0,0,
		0,594,592,1,0,0,0,594,593,1,0,0,0,595,35,1,0,0,0,596,602,3,38,19,0,597,
		598,5,141,0,0,598,599,3,76,38,0,599,600,5,126,0,0,600,601,3,76,38,0,601,
		603,1,0,0,0,602,597,1,0,0,0,602,603,1,0,0,0,603,37,1,0,0,0,604,610,3,40,
		20,0,605,608,5,143,0,0,606,609,3,38,19,0,607,609,3,78,39,0,608,606,1,0,
		0,0,608,607,1,0,0,0,609,611,1,0,0,0,610,605,1,0,0,0,610,611,1,0,0,0,611,
		39,1,0,0,0,612,617,3,42,21,0,613,614,5,147,0,0,614,616,3,42,21,0,615,613,
		1,0,0,0,616,619,1,0,0,0,617,615,1,0,0,0,617,618,1,0,0,0,618,41,1,0,0,0,
		619,617,1,0,0,0,620,625,3,44,22,0,621,622,5,146,0,0,622,624,3,44,22,0,
		623,621,1,0,0,0,624,627,1,0,0,0,625,623,1,0,0,0,625,626,1,0,0,0,626,43,
		1,0,0,0,627,625,1,0,0,0,628,633,3,46,23,0,629,630,5,134,0,0,630,632,3,
		46,23,0,631,629,1,0,0,0,632,635,1,0,0,0,633,631,1,0,0,0,633,634,1,0,0,
		0,634,45,1,0,0,0,635,633,1,0,0,0,636,641,3,48,24,0,637,638,5,135,0,0,638,
		640,3,48,24,0,639,637,1,0,0,0,640,643,1,0,0,0,641,639,1,0,0,0,641,642,
		1,0,0,0,642,47,1,0,0,0,643,641,1,0,0,0,644,649,3,50,25,0,645,646,5,133,
		0,0,646,648,3,50,25,0,647,645,1,0,0,0,648,651,1,0,0,0,649,647,1,0,0,0,
		649,650,1,0,0,0,650,49,1,0,0,0,651,649,1,0,0,0,652,657,3,52,26,0,653,654,
		7,3,0,0,654,656,3,52,26,0,655,653,1,0,0,0,656,659,1,0,0,0,657,655,1,0,
		0,0,657,658,1,0,0,0,658,51,1,0,0,0,659,657,1,0,0,0,660,669,3,54,27,0,661,
		662,7,4,0,0,662,668,3,54,27,0,663,664,5,57,0,0,664,668,3,114,57,0,665,
		666,5,12,0,0,666,668,3,4,2,0,667,661,1,0,0,0,667,663,1,0,0,0,667,665,1,
		0,0,0,668,671,1,0,0,0,669,667,1,0,0,0,669,670,1,0,0,0,670,53,1,0,0,0,671,
		669,1,0,0,0,672,680,3,56,28,0,673,676,5,161,0,0,674,676,3,382,191,0,675,
		673,1,0,0,0,675,674,1,0,0,0,676,677,1,0,0,0,677,679,3,56,28,0,678,675,
		1,0,0,0,679,682,1,0,0,0,680,678,1,0,0,0,680,681,1,0,0,0,681,55,1,0,0,0,
		682,680,1,0,0,0,683,688,3,58,29,0,684,685,7,5,0,0,685,687,3,58,29,0,686,
		684,1,0,0,0,687,690,1,0,0,0,688,686,1,0,0,0,688,689,1,0,0,0,689,57,1,0,
		0,0,690,688,1,0,0,0,691,696,3,60,30,0,692,693,7,6,0,0,693,695,3,60,30,
		0,694,692,1,0,0,0,695,698,1,0,0,0,696,694,1,0,0,0,696,697,1,0,0,0,697,
		59,1,0,0,0,698,696,1,0,0,0,699,709,3,66,33,0,700,701,5,88,0,0,701,706,
		5,118,0,0,702,704,3,62,31,0,703,705,5,125,0,0,704,703,1,0,0,0,704,705,
		1,0,0,0,705,707,1,0,0,0,706,702,1,0,0,0,706,707,1,0,0,0,707,708,1,0,0,
		0,708,710,5,119,0,0,709,700,1,0,0,0,709,710,1,0,0,0,710,61,1,0,0,0,711,
		716,3,64,32,0,712,713,5,125,0,0,713,715,3,64,32,0,714,712,1,0,0,0,715,
		718,1,0,0,0,716,714,1,0,0,0,716,717,1,0,0,0,717,63,1,0,0,0,718,716,1,0,
		0,0,719,721,3,28,14,0,720,722,3,190,95,0,721,720,1,0,0,0,721,722,1,0,0,
		0,722,723,1,0,0,0,723,724,3,380,190,0,724,725,3,76,38,0,725,65,1,0,0,0,
		726,735,3,68,34,0,727,729,3,68,34,0,728,727,1,0,0,0,728,729,1,0,0,0,729,
		730,1,0,0,0,730,732,5,164,0,0,731,733,3,68,34,0,732,731,1,0,0,0,732,733,
		1,0,0,0,733,735,1,0,0,0,734,726,1,0,0,0,734,728,1,0,0,0,735,67,1,0,0,0,
		736,759,3,70,35,0,737,759,3,72,36,0,738,739,5,128,0,0,739,759,3,68,34,
		0,740,741,5,129,0,0,741,759,3,68,34,0,742,743,5,136,0,0,743,759,3,68,34,
		0,744,745,5,137,0,0,745,759,3,68,34,0,746,747,5,144,0,0,747,759,3,68,34,
		0,748,749,5,145,0,0,749,759,3,68,34,0,750,751,5,15,0,0,751,759,3,68,34,
		0,752,753,5,133,0,0,753,759,3,68,34,0,754,755,5,130,0,0,755,759,3,68,34,
		0,756,757,5,135,0,0,757,759,3,68,34,0,758,736,1,0,0,0,758,737,1,0,0,0,
		758,738,1,0,0,0,758,740,1,0,0,0,758,742,1,0,0,0,758,744,1,0,0,0,758,746,
		1,0,0,0,758,748,1,0,0,0,758,750,1,0,0,0,758,752,1,0,0,0,758,754,1,0,0,
		0,758,756,1,0,0,0,759,69,1,0,0,0,760,761,5,122,0,0,761,762,3,4,2,0,762,
		763,5,123,0,0,763,764,3,68,34,0,764,71,1,0,0,0,765,767,3,74,37,0,766,768,
		5,136,0,0,767,766,1,0,0,0,767,768,1,0,0,0,768,772,1,0,0,0,769,771,3,82,
		41,0,770,769,1,0,0,0,771,774,1,0,0,0,772,770,1,0,0,0,772,773,1,0,0,0,773,
		776,1,0,0,0,774,772,1,0,0,0,775,777,5,136,0,0,776,775,1,0,0,0,776,777,
		1,0,0,0,777,800,1,0,0,0,778,785,3,80,40,0,779,785,3,432,216,0,780,785,
		5,144,0,0,781,785,5,145,0,0,782,783,5,148,0,0,783,785,3,436,218,0,784,
		778,1,0,0,0,784,779,1,0,0,0,784,780,1,0,0,0,784,781,1,0,0,0,784,782,1,
		0,0,0,785,787,1,0,0,0,786,788,5,136,0,0,787,786,1,0,0,0,787,788,1,0,0,
		0,788,792,1,0,0,0,789,791,3,82,41,0,790,789,1,0,0,0,791,794,1,0,0,0,792,
		790,1,0,0,0,792,793,1,0,0,0,793,796,1,0,0,0,794,792,1,0,0,0,795,797,5,
		136,0,0,796,795,1,0,0,0,796,797,1,0,0,0,797,799,1,0,0,0,798,784,1,0,0,
		0,799,802,1,0,0,0,800,798,1,0,0,0,800,801,1,0,0,0,801,73,1,0,0,0,802,800,
		1,0,0,0,803,924,3,386,193,0,804,806,3,436,218,0,805,807,3,22,11,0,806,
		805,1,0,0,0,806,807,1,0,0,0,807,924,1,0,0,0,808,809,5,122,0,0,809,810,
		3,28,14,0,810,811,5,123,0,0,811,924,1,0,0,0,812,924,3,86,43,0,813,924,
		3,230,115,0,814,924,5,108,0,0,815,825,5,16,0,0,816,817,5,124,0,0,817,819,
		3,436,218,0,818,820,3,22,11,0,819,818,1,0,0,0,819,820,1,0,0,0,820,826,
		1,0,0,0,821,822,5,120,0,0,822,823,3,88,44,0,823,824,5,121,0,0,824,826,
		1,0,0,0,825,816,1,0,0,0,825,821,1,0,0,0,826,924,1,0,0,0,827,856,5,65,0,
		0,828,850,3,4,2,0,829,851,3,434,217,0,830,851,3,90,45,0,831,832,5,120,
		0,0,832,833,3,88,44,0,833,837,5,121,0,0,834,836,3,328,164,0,835,834,1,
		0,0,0,836,839,1,0,0,0,837,835,1,0,0,0,837,838,1,0,0,0,838,841,1,0,0,0,
		839,837,1,0,0,0,840,842,3,330,165,0,841,840,1,0,0,0,841,842,1,0,0,0,842,
		851,1,0,0,0,843,845,3,328,164,0,844,843,1,0,0,0,845,846,1,0,0,0,846,844,
		1,0,0,0,846,847,1,0,0,0,847,848,1,0,0,0,848,849,3,330,165,0,849,851,1,
		0,0,0,850,829,1,0,0,0,850,830,1,0,0,0,850,831,1,0,0,0,850,844,1,0,0,0,
		851,857,1,0,0,0,852,857,3,104,52,0,853,854,3,328,164,0,854,855,3,330,165,
		0,855,857,1,0,0,0,856,828,1,0,0,0,856,852,1,0,0,0,856,853,1,0,0,0,857,
		924,1,0,0,0,858,859,5,122,0,0,859,862,3,26,13,0,860,861,5,125,0,0,861,
		863,3,26,13,0,862,860,1,0,0,0,863,864,1,0,0,0,864,862,1,0,0,0,864,865,
		1,0,0,0,865,866,1,0,0,0,866,867,5,123,0,0,867,924,1,0,0,0,868,869,5,92,
		0,0,869,873,5,122,0,0,870,874,3,110,55,0,871,874,3,4,2,0,872,874,5,101,
		0,0,873,870,1,0,0,0,873,871,1,0,0,0,873,872,1,0,0,0,874,875,1,0,0,0,875,
		924,5,123,0,0,876,877,5,24,0,0,877,878,5,122,0,0,878,879,3,28,14,0,879,
		880,5,123,0,0,880,924,1,0,0,0,881,882,5,95,0,0,882,883,5,122,0,0,883,884,
		3,28,14,0,884,885,5,123,0,0,885,924,1,0,0,0,886,891,5,28,0,0,887,888,5,
		122,0,0,888,889,3,4,2,0,889,890,5,123,0,0,890,892,1,0,0,0,891,887,1,0,
		0,0,891,892,1,0,0,0,892,924,1,0,0,0,893,895,5,14,0,0,894,893,1,0,0,0,894,
		895,1,0,0,0,895,896,1,0,0,0,896,902,5,29,0,0,897,899,5,122,0,0,898,900,
		3,124,62,0,899,898,1,0,0,0,899,900,1,0,0,0,900,901,1,0,0,0,901,903,5,123,
		0,0,902,897,1,0,0,0,902,903,1,0,0,0,903,904,1,0,0,0,904,924,3,172,86,0,
		905,906,5,83,0,0,906,907,5,122,0,0,907,908,3,4,2,0,908,909,5,123,0,0,909,
		924,1,0,0,0,910,911,5,63,0,0,911,917,5,122,0,0,912,913,3,436,218,0,913,
		914,5,124,0,0,914,916,1,0,0,0,915,912,1,0,0,0,916,919,1,0,0,0,917,915,
		1,0,0,0,917,918,1,0,0,0,918,920,1,0,0,0,919,917,1,0,0,0,920,921,3,436,
		218,0,921,922,5,123,0,0,922,924,1,0,0,0,923,803,1,0,0,0,923,804,1,0,0,
		0,923,808,1,0,0,0,923,812,1,0,0,0,923,813,1,0,0,0,923,814,1,0,0,0,923,
		815,1,0,0,0,923,827,1,0,0,0,923,858,1,0,0,0,923,868,1,0,0,0,923,876,1,
		0,0,0,923,881,1,0,0,0,923,886,1,0,0,0,923,894,1,0,0,0,923,905,1,0,0,0,
		923,910,1,0,0,0,924,75,1,0,0,0,925,928,3,28,14,0,926,928,3,78,39,0,927,
		925,1,0,0,0,927,926,1,0,0,0,928,77,1,0,0,0,929,930,5,89,0,0,930,931,3,
		28,14,0,931,79,1,0,0,0,932,934,5,141,0,0,933,932,1,0,0,0,933,934,1,0,0,
		0,934,935,1,0,0,0,935,936,5,124,0,0,936,938,3,436,218,0,937,939,3,22,11,
		0,938,937,1,0,0,0,938,939,1,0,0,0,939,81,1,0,0,0,940,942,5,141,0,0,941,
		940,1,0,0,0,941,942,1,0,0,0,942,943,1,0,0,0,943,944,5,120,0,0,944,949,
		3,84,42,0,945,946,5,125,0,0,946,948,3,84,42,0,947,945,1,0,0,0,948,951,
		1,0,0,0,949,947,1,0,0,0,949,950,1,0,0,0,950,952,1,0,0,0,951,949,1,0,0,
		0,952,953,5,121,0,0,953,83,1,0,0,0,954,955,3,436,218,0,955,956,5,126,0,
		0,956,958,1,0,0,0,957,954,1,0,0,0,957,958,1,0,0,0,958,959,1,0,0,0,959,
		960,3,28,14,0,960,85,1,0,0,0,961,962,7,7,0,0,962,87,1,0,0,0,963,968,3,
		28,14,0,964,965,5,125,0,0,965,967,3,28,14,0,966,964,1,0,0,0,967,970,1,
		0,0,0,968,966,1,0,0,0,968,969,1,0,0,0,969,89,1,0,0,0,970,968,1,0,0,0,971,
		974,3,92,46,0,972,974,3,100,50,0,973,971,1,0,0,0,973,972,1,0,0,0,974,91,
		1,0,0,0,975,980,5,118,0,0,976,978,3,94,47,0,977,979,5,125,0,0,978,977,
		1,0,0,0,978,979,1,0,0,0,979,981,1,0,0,0,980,976,1,0,0,0,980,981,1,0,0,
		0,981,982,1,0,0,0,982,983,5,119,0,0,983,93,1,0,0,0,984,989,3,96,48,0,985,
		986,5,125,0,0,986,988,3,96,48,0,987,985,1,0,0,0,988,991,1,0,0,0,989,987,
		1,0,0,0,989,990,1,0,0,0,990,95,1,0,0,0,991,989,1,0,0,0,992,998,3,436,218,
		0,993,994,5,120,0,0,994,995,3,28,14,0,995,996,5,121,0,0,996,998,1,0,0,
		0,997,992,1,0,0,0,997,993,1,0,0,0,998,999,1,0,0,0,999,1000,5,138,0,0,1000,
		1001,3,98,49,0,1001,97,1,0,0,0,1002,1005,3,28,14,0,1003,1005,3,90,45,0,
		1004,1002,1,0,0,0,1004,1003,1,0,0,0,1005,99,1,0,0,0,1006,1007,5,118,0,
		0,1007,1012,3,102,51,0,1008,1009,5,125,0,0,1009,1011,3,102,51,0,1010,1008,
		1,0,0,0,1011,1014,1,0,0,0,1012,1010,1,0,0,0,1012,1013,1,0,0,0,1013,1016,
		1,0,0,0,1014,1012,1,0,0,0,1015,1017,5,125,0,0,1016,1015,1,0,0,0,1016,1017,
		1,0,0,0,1017,1018,1,0,0,0,1018,1019,5,119,0,0,1019,101,1,0,0,0,1020,1026,
		3,30,15,0,1021,1022,5,118,0,0,1022,1023,3,88,44,0,1023,1024,5,119,0,0,
		1024,1026,1,0,0,0,1025,1020,1,0,0,0,1025,1021,1,0,0,0,1026,103,1,0,0,0,
		1027,1032,5,118,0,0,1028,1030,3,106,53,0,1029,1031,5,125,0,0,1030,1029,
		1,0,0,0,1030,1031,1,0,0,0,1031,1033,1,0,0,0,1032,1028,1,0,0,0,1032,1033,
		1,0,0,0,1033,1034,1,0,0,0,1034,1035,5,119,0,0,1035,105,1,0,0,0,1036,1041,
		3,108,54,0,1037,1038,5,125,0,0,1038,1040,3,108,54,0,1039,1037,1,0,0,0,
		1040,1043,1,0,0,0,1041,1039,1,0,0,0,1041,1042,1,0,0,0,1042,107,1,0,0,0,
		1043,1041,1,0,0,0,1044,1050,3,72,36,0,1045,1046,3,436,218,0,1046,1047,
		5,138,0,0,1047,1048,3,28,14,0,1048,1050,1,0,0,0,1049,1044,1,0,0,0,1049,
		1045,1,0,0,0,1050,109,1,0,0,0,1051,1060,3,436,218,0,1052,1054,3,112,56,
		0,1053,1052,1,0,0,0,1053,1054,1,0,0,0,1054,1061,1,0,0,0,1055,1056,5,142,
		0,0,1056,1058,3,436,218,0,1057,1059,3,112,56,0,1058,1057,1,0,0,0,1058,
		1059,1,0,0,0,1059,1061,1,0,0,0,1060,1053,1,0,0,0,1060,1055,1,0,0,0,1061,
		1069,1,0,0,0,1062,1063,5,124,0,0,1063,1065,3,436,218,0,1064,1066,3,112,
		56,0,1065,1064,1,0,0,0,1065,1066,1,0,0,0,1066,1068,1,0,0,0,1067,1062,1,
		0,0,0,1068,1071,1,0,0,0,1069,1067,1,0,0,0,1069,1070,1,0,0,0,1070,111,1,
		0,0,0,1071,1069,1,0,0,0,1072,1076,5,139,0,0,1073,1075,5,125,0,0,1074,1073,
		1,0,0,0,1075,1078,1,0,0,0,1076,1074,1,0,0,0,1076,1077,1,0,0,0,1077,1079,
		1,0,0,0,1078,1076,1,0,0,0,1079,1080,5,140,0,0,1080,113,1,0,0,0,1081,1086,
		3,6,3,0,1082,1085,3,328,164,0,1083,1085,5,130,0,0,1084,1082,1,0,0,0,1084,
		1083,1,0,0,0,1085,1088,1,0,0,0,1086,1084,1,0,0,0,1086,1087,1,0,0,0,1087,
		1090,1,0,0,0,1088,1086,1,0,0,0,1089,1091,5,141,0,0,1090,1089,1,0,0,0,1090,
		1091,1,0,0,0,1091,1093,1,0,0,0,1092,1094,3,116,58,0,1093,1092,1,0,0,0,
		1093,1094,1,0,0,0,1094,1096,1,0,0,0,1095,1097,3,436,218,0,1096,1095,1,
		0,0,0,1096,1097,1,0,0,0,1097,115,1,0,0,0,1098,1099,5,118,0,0,1099,1104,
		3,118,59,0,1100,1101,5,125,0,0,1101,1103,3,118,59,0,1102,1100,1,0,0,0,
		1103,1106,1,0,0,0,1104,1102,1,0,0,0,1104,1105,1,0,0,0,1105,1107,1,0,0,
		0,1106,1104,1,0,0,0,1107,1108,5,119,0,0,1108,117,1,0,0,0,1109,1110,3,436,
		218,0,1110,1111,5,126,0,0,1111,1112,3,28,14,0,1112,119,1,0,0,0,1113,1115,
		5,14,0,0,1114,1113,1,0,0,0,1114,1115,1,0,0,0,1115,1116,1,0,0,0,1116,1117,
		3,122,61,0,1117,1118,3,380,190,0,1118,1119,3,130,65,0,1119,121,1,0,0,0,
		1120,1121,5,122,0,0,1121,1132,5,123,0,0,1122,1123,5,122,0,0,1123,1124,
		3,124,62,0,1124,1125,5,123,0,0,1125,1132,1,0,0,0,1126,1127,5,122,0,0,1127,
		1128,3,128,64,0,1128,1129,5,123,0,0,1129,1132,1,0,0,0,1130,1132,3,436,
		218,0,1131,1120,1,0,0,0,1131,1122,1,0,0,0,1131,1126,1,0,0,0,1131,1130,
		1,0,0,0,1132,123,1,0,0,0,1133,1138,3,126,63,0,1134,1135,5,125,0,0,1135,
		1137,3,126,63,0,1136,1134,1,0,0,0,1137,1140,1,0,0,0,1138,1136,1,0,0,0,
		1138,1139,1,0,0,0,1139,125,1,0,0,0,1140,1138,1,0,0,0,1141,1143,7,2,0,0,
		1142,1141,1,0,0,0,1142,1143,1,0,0,0,1143,1144,1,0,0,0,1144,1145,3,4,2,
		0,1145,1146,3,436,218,0,1146,127,1,0,0,0,1147,1152,3,436,218,0,1148,1149,
		5,125,0,0,1149,1151,3,436,218,0,1150,1148,1,0,0,0,1151,1154,1,0,0,0,1152,
		1150,1,0,0,0,1152,1153,1,0,0,0,1153,129,1,0,0,0,1154,1152,1,0,0,0,1155,
		1158,3,76,38,0,1156,1158,3,172,86,0,1157,1155,1,0,0,0,1157,1156,1,0,0,
		0,1158,131,1,0,0,0,1159,1160,3,134,67,0,1160,1161,3,136,68,0,1161,133,
		1,0,0,0,1162,1164,5,46,0,0,1163,1165,3,4,2,0,1164,1163,1,0,0,0,1164,1165,
		1,0,0,0,1165,1166,1,0,0,0,1166,1167,3,436,218,0,1167,1168,5,52,0,0,1168,
		1169,3,28,14,0,1169,135,1,0,0,0,1170,1172,3,138,69,0,1171,1170,1,0,0,0,
		1172,1175,1,0,0,0,1173,1171,1,0,0,0,1173,1174,1,0,0,0,1174,1176,1,0,0,
		0,1175,1173,1,0,0,0,1176,1178,3,150,75,0,1177,1179,3,152,76,0,1178,1177,
		1,0,0,0,1178,1179,1,0,0,0,1179,137,1,0,0,0,1180,1186,3,134,67,0,1181,1186,
		3,140,70,0,1182,1186,3,142,71,0,1183,1186,3,144,72,0,1184,1186,3,146,73,
		0,1185,1180,1,0,0,0,1185,1181,1,0,0,0,1185,1182,1,0,0,0,1185,1183,1,0,
		0,0,1185,1184,1,0,0,0,1186,139,1,0,0,0,1187,1188,5,59,0,0,1188,1189,3,
		436,218,0,1189,1190,5,138,0,0,1190,1191,3,28,14,0,1191,141,1,0,0,0,1192,
		1193,5,104,0,0,1193,1194,3,28,14,0,1194,143,1,0,0,0,1195,1197,5,58,0,0,
		1196,1198,3,4,2,0,1197,1196,1,0,0,0,1197,1198,1,0,0,0,1198,1199,1,0,0,
		0,1199,1200,3,436,218,0,1200,1201,5,52,0,0,1201,1202,3,28,14,0,1202,1203,
		5,68,0,0,1203,1204,3,28,14,0,1204,1205,5,36,0,0,1205,1208,3,28,14,0,1206,
		1207,5,56,0,0,1207,1209,3,436,218,0,1208,1206,1,0,0,0,1208,1209,1,0,0,
		0,1209,145,1,0,0,0,1210,1211,5,70,0,0,1211,1216,3,148,74,0,1212,1213,5,
		125,0,0,1213,1215,3,148,74,0,1214,1212,1,0,0,0,1215,1218,1,0,0,0,1216,
		1214,1,0,0,0,1216,1217,1,0,0,0,1217,147,1,0,0,0,1218,1216,1,0,0,0,1219,
		1221,3,28,14,0,1220,1222,7,8,0,0,1221,1220,1,0,0,0,1221,1222,1,0,0,0,1222,
		149,1,0,0,0,1223,1224,5,80,0,0,1224,1231,3,28,14,0,1225,1226,5,49,0,0,
		1226,1227,3,28,14,0,1227,1228,5,19,0,0,1228,1229,3,28,14,0,1229,1231,1,
		0,0,0,1230,1223,1,0,0,0,1230,1225,1,0,0,0,1231,151,1,0,0,0,1232,1233,5,
		56,0,0,1233,1234,3,436,218,0,1234,1235,3,136,68,0,1235,153,1,0,0,0,1236,
		1241,3,166,83,0,1237,1241,3,156,78,0,1238,1241,3,168,84,0,1239,1241,3,
		260,130,0,1240,1236,1,0,0,0,1240,1237,1,0,0,0,1240,1238,1,0,0,0,1240,1239,
		1,0,0,0,1241,155,1,0,0,0,1242,1243,3,174,87,0,1243,1244,5,127,0,0,1244,
		1250,1,0,0,0,1245,1246,3,182,91,0,1246,1247,5,127,0,0,1247,1250,1,0,0,
		0,1248,1250,3,158,79,0,1249,1242,1,0,0,0,1249,1245,1,0,0,0,1249,1248,1,
		0,0,0,1250,157,1,0,0,0,1251,1252,3,160,80,0,1252,1253,3,164,82,0,1253,
		159,1,0,0,0,1254,1256,3,162,81,0,1255,1254,1,0,0,0,1255,1256,1,0,0,0,1256,
		1257,1,0,0,0,1257,1258,3,280,140,0,1258,1260,3,436,218,0,1259,1261,3,232,
		116,0,1260,1259,1,0,0,0,1260,1261,1,0,0,0,1261,1262,1,0,0,0,1262,1264,
		5,122,0,0,1263,1265,3,286,143,0,1264,1263,1,0,0,0,1264,1265,1,0,0,0,1265,
		1266,1,0,0,0,1266,1268,5,123,0,0,1267,1269,3,240,120,0,1268,1267,1,0,0,
		0,1268,1269,1,0,0,0,1269,161,1,0,0,0,1270,1272,7,9,0,0,1271,1273,5,85,
		0,0,1272,1271,1,0,0,0,1272,1273,1,0,0,0,1273,1277,1,0,0,0,1274,1275,5,
		85,0,0,1275,1277,7,9,0,0,1276,1270,1,0,0,0,1276,1274,1,0,0,0,1277,163,
		1,0,0,0,1278,1284,3,172,86,0,1279,1280,3,380,190,0,1280,1281,3,76,38,0,
		1281,1282,5,127,0,0,1282,1284,1,0,0,0,1283,1278,1,0,0,0,1283,1279,1,0,
		0,0,1284,165,1,0,0,0,1285,1286,3,436,218,0,1286,1287,5,126,0,0,1287,1288,
		3,154,77,0,1288,167,1,0,0,0,1289,1292,3,172,86,0,1290,1292,3,170,85,0,
		1291,1289,1,0,0,0,1291,1290,1,0,0,0,1292,169,1,0,0,0,1293,1424,5,127,0,
		0,1294,1295,3,28,14,0,1295,1296,5,127,0,0,1296,1424,1,0,0,0,1297,1298,
		5,50,0,0,1298,1299,5,122,0,0,1299,1300,3,28,14,0,1300,1301,5,123,0,0,1301,
		1304,3,184,92,0,1302,1303,5,34,0,0,1303,1305,3,184,92,0,1304,1302,1,0,
		0,0,1304,1305,1,0,0,0,1305,1424,1,0,0,0,1306,1307,5,88,0,0,1307,1308,5,
		122,0,0,1308,1309,3,28,14,0,1309,1310,5,123,0,0,1310,1314,5,118,0,0,1311,
		1313,3,186,93,0,1312,1311,1,0,0,0,1313,1316,1,0,0,0,1314,1312,1,0,0,0,
		1314,1315,1,0,0,0,1315,1317,1,0,0,0,1316,1314,1,0,0,0,1317,1318,5,119,
		0,0,1318,1424,1,0,0,0,1319,1320,5,105,0,0,1320,1321,5,122,0,0,1321,1322,
		3,28,14,0,1322,1323,5,123,0,0,1323,1324,3,168,84,0,1324,1424,1,0,0,0,1325,
		1326,5,31,0,0,1326,1327,3,168,84,0,1327,1328,5,105,0,0,1328,1329,5,122,
		0,0,1329,1330,3,28,14,0,1330,1331,5,123,0,0,1331,1332,5,127,0,0,1332,1424,
		1,0,0,0,1333,1334,5,44,0,0,1334,1336,5,122,0,0,1335,1337,3,194,97,0,1336,
		1335,1,0,0,0,1336,1337,1,0,0,0,1337,1338,1,0,0,0,1338,1340,5,127,0,0,1339,
		1341,3,28,14,0,1340,1339,1,0,0,0,1340,1341,1,0,0,0,1341,1342,1,0,0,0,1342,
		1344,5,127,0,0,1343,1345,3,196,98,0,1344,1343,1,0,0,0,1344,1345,1,0,0,
		0,1345,1346,1,0,0,0,1346,1347,5,123,0,0,1347,1424,3,168,84,0,1348,1350,
		5,15,0,0,1349,1348,1,0,0,0,1349,1350,1,0,0,0,1350,1351,1,0,0,0,1351,1352,
		5,45,0,0,1352,1353,5,122,0,0,1353,1354,3,176,88,0,1354,1355,3,436,218,
		0,1355,1356,5,52,0,0,1356,1357,3,28,14,0,1357,1358,5,123,0,0,1358,1359,
		3,168,84,0,1359,1424,1,0,0,0,1360,1361,5,18,0,0,1361,1424,5,127,0,0,1362,
		1363,5,26,0,0,1363,1424,5,127,0,0,1364,1369,5,48,0,0,1365,1370,3,436,218,
		0,1366,1367,5,21,0,0,1367,1370,3,28,14,0,1368,1370,5,28,0,0,1369,1365,
		1,0,0,0,1369,1366,1,0,0,0,1369,1368,1,0,0,0,1370,1371,1,0,0,0,1371,1424,
		5,127,0,0,1372,1374,5,78,0,0,1373,1375,3,28,14,0,1374,1373,1,0,0,0,1374,
		1375,1,0,0,0,1375,1376,1,0,0,0,1376,1424,5,127,0,0,1377,1379,5,89,0,0,
		1378,1380,3,28,14,0,1379,1378,1,0,0,0,1379,1380,1,0,0,0,1380,1381,1,0,
		0,0,1381,1424,5,127,0,0,1382,1383,5,91,0,0,1383,1389,3,172,86,0,1384,1386,
		3,198,99,0,1385,1387,3,206,103,0,1386,1385,1,0,0,0,1386,1387,1,0,0,0,1387,
		1390,1,0,0,0,1388,1390,3,206,103,0,1389,1384,1,0,0,0,1389,1388,1,0,0,0,
		1390,1424,1,0,0,0,1391,1392,5,24,0,0,1392,1424,3,172,86,0,1393,1394,5,
		95,0,0,1394,1424,3,172,86,0,1395,1396,5,60,0,0,1396,1397,5,122,0,0,1397,
		1398,3,28,14,0,1398,1399,5,123,0,0,1399,1400,3,168,84,0,1400,1424,1,0,
		0,0,1401,1402,5,99,0,0,1402,1403,5,122,0,0,1403,1404,3,208,104,0,1404,
		1405,5,123,0,0,1405,1406,3,168,84,0,1406,1424,1,0,0,0,1407,1411,5,106,
		0,0,1408,1409,5,78,0,0,1409,1412,3,28,14,0,1410,1412,5,18,0,0,1411,1408,
		1,0,0,0,1411,1410,1,0,0,0,1412,1413,1,0,0,0,1413,1424,5,127,0,0,1414,1415,
		5,97,0,0,1415,1424,3,172,86,0,1416,1417,5,42,0,0,1417,1418,5,122,0,0,1418,
		1419,3,368,184,0,1419,1420,3,370,185,0,1420,1421,5,123,0,0,1421,1422,3,
		168,84,0,1422,1424,1,0,0,0,1423,1293,1,0,0,0,1423,1294,1,0,0,0,1423,1297,
		1,0,0,0,1423,1306,1,0,0,0,1423,1319,1,0,0,0,1423,1325,1,0,0,0,1423,1333,
		1,0,0,0,1423,1349,1,0,0,0,1423,1360,1,0,0,0,1423,1362,1,0,0,0,1423,1364,
		1,0,0,0,1423,1372,1,0,0,0,1423,1377,1,0,0,0,1423,1382,1,0,0,0,1423,1391,
		1,0,0,0,1423,1393,1,0,0,0,1423,1395,1,0,0,0,1423,1401,1,0,0,0,1423,1407,
		1,0,0,0,1423,1414,1,0,0,0,1423,1416,1,0,0,0,1424,171,1,0,0,0,1425,1427,
		5,118,0,0,1426,1428,3,192,96,0,1427,1426,1,0,0,0,1427,1428,1,0,0,0,1428,
		1429,1,0,0,0,1429,1430,5,119,0,0,1430,173,1,0,0,0,1431,1436,5,99,0,0,1432,
		1436,5,76,0,0,1433,1434,5,76,0,0,1434,1436,5,75,0,0,1435,1431,1,0,0,0,
		1435,1432,1,0,0,0,1435,1433,1,0,0,0,1435,1436,1,0,0,0,1436,1437,1,0,0,
		0,1437,1438,3,176,88,0,1438,1445,3,178,89,0,1439,1440,5,125,0,0,1440,1441,
		3,178,89,0,1441,1442,4,87,0,0,1442,1444,1,0,0,0,1443,1439,1,0,0,0,1444,
		1447,1,0,0,0,1445,1443,1,0,0,0,1445,1446,1,0,0,0,1446,1453,1,0,0,0,1447,
		1445,1,0,0,0,1448,1449,5,42,0,0,1449,1450,3,368,184,0,1450,1451,3,370,
		185,0,1451,1453,1,0,0,0,1452,1435,1,0,0,0,1452,1448,1,0,0,0,1453,175,1,
		0,0,0,1454,1457,5,100,0,0,1455,1457,3,4,2,0,1456,1454,1,0,0,0,1456,1455,
		1,0,0,0,1457,177,1,0,0,0,1458,1464,3,436,218,0,1459,1461,5,138,0,0,1460,
		1462,5,76,0,0,1461,1460,1,0,0,0,1461,1462,1,0,0,0,1462,1463,1,0,0,0,1463,
		1465,3,180,90,0,1464,1459,1,0,0,0,1464,1465,1,0,0,0,1465,179,1,0,0,0,1466,
		1470,3,28,14,0,1467,1470,3,330,165,0,1468,1470,3,378,189,0,1469,1466,1,
		0,0,0,1469,1467,1,0,0,0,1469,1468,1,0,0,0,1470,181,1,0,0,0,1471,1472,5,
		25,0,0,1472,1473,3,4,2,0,1473,1474,3,270,135,0,1474,183,1,0,0,0,1475,1478,
		3,172,86,0,1476,1478,3,170,85,0,1477,1475,1,0,0,0,1477,1476,1,0,0,0,1478,
		185,1,0,0,0,1479,1481,3,188,94,0,1480,1479,1,0,0,0,1481,1482,1,0,0,0,1482,
		1480,1,0,0,0,1482,1483,1,0,0,0,1483,1484,1,0,0,0,1484,1485,3,192,96,0,
		1485,187,1,0,0,0,1486,1487,5,21,0,0,1487,1489,3,28,14,0,1488,1490,3,190,
		95,0,1489,1488,1,0,0,0,1489,1490,1,0,0,0,1490,1491,1,0,0,0,1491,1492,5,
		126,0,0,1492,1496,1,0,0,0,1493,1494,5,28,0,0,1494,1496,5,126,0,0,1495,
		1486,1,0,0,0,1495,1493,1,0,0,0,1496,189,1,0,0,0,1497,1498,5,103,0,0,1498,
		1499,3,28,14,0,1499,191,1,0,0,0,1500,1502,3,154,77,0,1501,1500,1,0,0,0,
		1502,1503,1,0,0,0,1503,1501,1,0,0,0,1503,1504,1,0,0,0,1504,193,1,0,0,0,
		1505,1515,3,174,87,0,1506,1511,3,28,14,0,1507,1508,5,125,0,0,1508,1510,
		3,28,14,0,1509,1507,1,0,0,0,1510,1513,1,0,0,0,1511,1509,1,0,0,0,1511,1512,
		1,0,0,0,1512,1515,1,0,0,0,1513,1511,1,0,0,0,1514,1505,1,0,0,0,1514,1506,
		1,0,0,0,1515,195,1,0,0,0,1516,1521,3,28,14,0,1517,1518,5,125,0,0,1518,
		1520,3,28,14,0,1519,1517,1,0,0,0,1520,1523,1,0,0,0,1521,1519,1,0,0,0,1521,
		1522,1,0,0,0,1522,197,1,0,0,0,1523,1521,1,0,0,0,1524,1528,3,200,100,0,
		1525,1527,3,200,100,0,1526,1525,1,0,0,0,1527,1530,1,0,0,0,1528,1526,1,
		0,0,0,1528,1529,1,0,0,0,1529,1532,1,0,0,0,1530,1528,1,0,0,0,1531,1533,
		3,202,101,0,1532,1531,1,0,0,0,1532,1533,1,0,0,0,1533,1536,1,0,0,0,1534,
		1536,3,202,101,0,1535,1524,1,0,0,0,1535,1534,1,0,0,0,1536,199,1,0,0,0,
		1537,1538,5,22,0,0,1538,1539,5,122,0,0,1539,1541,3,20,10,0,1540,1542,3,
		436,218,0,1541,1540,1,0,0,0,1541,1542,1,0,0,0,1542,1543,1,0,0,0,1543,1545,
		5,123,0,0,1544,1546,3,204,102,0,1545,1544,1,0,0,0,1545,1546,1,0,0,0,1546,
		1547,1,0,0,0,1547,1548,3,172,86,0,1548,201,1,0,0,0,1549,1551,5,22,0,0,
		1550,1552,3,204,102,0,1551,1550,1,0,0,0,1551,1552,1,0,0,0,1552,1553,1,
		0,0,0,1553,1554,3,172,86,0,1554,203,1,0,0,0,1555,1556,5,103,0,0,1556,1557,
		5,122,0,0,1557,1558,3,28,14,0,1558,1559,5,123,0,0,1559,205,1,0,0,0,1560,
		1561,5,41,0,0,1561,1562,3,172,86,0,1562,207,1,0,0,0,1563,1566,3,174,87,
		0,1564,1566,3,28,14,0,1565,1563,1,0,0,0,1565,1564,1,0,0,0,1566,209,1,0,
		0,0,1567,1568,5,64,0,0,1568,1569,3,212,106,0,1569,1571,3,214,107,0,1570,
		1572,5,127,0,0,1571,1570,1,0,0,0,1571,1572,1,0,0,0,1572,211,1,0,0,0,1573,
		1578,3,436,218,0,1574,1575,5,124,0,0,1575,1577,3,436,218,0,1576,1574,1,
		0,0,0,1577,1580,1,0,0,0,1578,1576,1,0,0,0,1578,1579,1,0,0,0,1579,213,1,
		0,0,0,1580,1578,1,0,0,0,1581,1583,5,118,0,0,1582,1584,3,216,108,0,1583,
		1582,1,0,0,0,1583,1584,1,0,0,0,1584,1586,1,0,0,0,1585,1587,3,220,110,0,
		1586,1585,1,0,0,0,1586,1587,1,0,0,0,1587,1589,1,0,0,0,1588,1590,3,224,
		112,0,1589,1588,1,0,0,0,1589,1590,1,0,0,0,1590,1591,1,0,0,0,1591,1592,
		5,119,0,0,1592,215,1,0,0,0,1593,1595,3,218,109,0,1594,1593,1,0,0,0,1595,
		1596,1,0,0,0,1596,1594,1,0,0,0,1596,1597,1,0,0,0,1597,217,1,0,0,0,1598,
		1599,5,39,0,0,1599,1600,5,10,0,0,1600,1601,3,436,218,0,1601,1602,5,127,
		0,0,1602,219,1,0,0,0,1603,1605,3,222,111,0,1604,1603,1,0,0,0,1605,1606,
		1,0,0,0,1606,1604,1,0,0,0,1606,1607,1,0,0,0,1607,221,1,0,0,0,1608,1609,
		5,99,0,0,1609,1610,3,436,218,0,1610,1611,5,138,0,0,1611,1612,3,2,1,0,1612,
		1613,5,127,0,0,1613,1629,1,0,0,0,1614,1615,5,99,0,0,1615,1616,3,2,1,0,
		1616,1617,5,127,0,0,1617,1629,1,0,0,0,1618,1619,5,99,0,0,1619,1620,5,85,
		0,0,1620,1621,3,2,1,0,1621,1622,5,127,0,0,1622,1629,1,0,0,0,1623,1624,
		5,99,0,0,1624,1625,5,62,0,0,1625,1626,3,2,1,0,1626,1627,5,127,0,0,1627,
		1629,1,0,0,0,1628,1608,1,0,0,0,1628,1614,1,0,0,0,1628,1618,1,0,0,0,1628,
		1623,1,0,0,0,1629,223,1,0,0,0,1630,1632,3,226,113,0,1631,1630,1,0,0,0,
		1632,1633,1,0,0,0,1633,1631,1,0,0,0,1633,1634,1,0,0,0,1634,225,1,0,0,0,
		1635,1638,3,210,105,0,1636,1638,3,228,114,0,1637,1635,1,0,0,0,1637,1636,
		1,0,0,0,1638,227,1,0,0,0,1639,1641,3,356,178,0,1640,1639,1,0,0,0,1640,
		1641,1,0,0,0,1641,1643,1,0,0,0,1642,1644,3,262,131,0,1643,1642,1,0,0,0,
		1643,1644,1,0,0,0,1644,1649,1,0,0,0,1645,1650,3,404,202,0,1646,1650,3,
		406,203,0,1647,1650,3,408,204,0,1648,1650,3,410,205,0,1649,1645,1,0,0,
		0,1649,1646,1,0,0,0,1649,1647,1,0,0,0,1649,1648,1,0,0,0,1650,229,1,0,0,
		0,1651,1652,3,436,218,0,1652,1653,5,142,0,0,1653,1655,3,436,218,0,1654,
		1656,3,22,11,0,1655,1654,1,0,0,0,1655,1656,1,0,0,0,1656,231,1,0,0,0,1657,
		1658,5,139,0,0,1658,1663,3,234,117,0,1659,1660,5,125,0,0,1660,1662,3,234,
		117,0,1661,1659,1,0,0,0,1662,1665,1,0,0,0,1663,1661,1,0,0,0,1663,1664,
		1,0,0,0,1664,1666,1,0,0,0,1665,1663,1,0,0,0,1666,1667,5,140,0,0,1667,233,
		1,0,0,0,1668,1670,3,356,178,0,1669,1668,1,0,0,0,1669,1670,1,0,0,0,1670,
		1671,1,0,0,0,1671,1672,3,436,218,0,1672,235,1,0,0,0,1673,1674,5,126,0,
		0,1674,1679,3,20,10,0,1675,1676,5,125,0,0,1676,1678,3,2,1,0,1677,1675,
		1,0,0,0,1678,1681,1,0,0,0,1679,1677,1,0,0,0,1679,1680,1,0,0,0,1680,237,
		1,0,0,0,1681,1679,1,0,0,0,1682,1687,3,2,1,0,1683,1684,5,125,0,0,1684,1686,
		3,2,1,0,1685,1683,1,0,0,0,1686,1689,1,0,0,0,1687,1685,1,0,0,0,1687,1688,
		1,0,0,0,1688,239,1,0,0,0,1689,1687,1,0,0,0,1690,1692,3,242,121,0,1691,
		1690,1,0,0,0,1692,1693,1,0,0,0,1693,1691,1,0,0,0,1693,1694,1,0,0,0,1694,
		241,1,0,0,0,1695,1696,5,104,0,0,1696,1697,3,436,218,0,1697,1698,5,126,
		0,0,1698,1699,3,244,122,0,1699,243,1,0,0,0,1700,1711,3,250,125,0,1701,
		1704,3,246,123,0,1702,1703,5,125,0,0,1703,1705,3,248,124,0,1704,1702,1,
		0,0,0,1704,1705,1,0,0,0,1705,1708,1,0,0,0,1706,1707,5,125,0,0,1707,1709,
		3,250,125,0,1708,1706,1,0,0,0,1708,1709,1,0,0,0,1709,1711,1,0,0,0,1710,
		1700,1,0,0,0,1710,1701,1,0,0,0,1711,245,1,0,0,0,1712,1716,3,20,10,0,1713,
		1716,5,87,0,0,1714,1716,5,96,0,0,1715,1712,1,0,0,0,1715,1713,1,0,0,0,1715,
		1714,1,0,0,0,1716,247,1,0,0,0,1717,1722,3,2,1,0,1718,1719,5,125,0,0,1719,
		1721,3,2,1,0,1720,1718,1,0,0,0,1721,1724,1,0,0,0,1722,1720,1,0,0,0,1722,
		1723,1,0,0,0,1723,249,1,0,0,0,1724,1722,1,0,0,0,1725,1726,5,65,0,0,1726,
		1727,5,122,0,0,1727,1728,5,123,0,0,1728,251,1,0,0,0,1729,1731,5,118,0,
		0,1730,1732,3,254,127,0,1731,1730,1,0,0,0,1731,1732,1,0,0,0,1732,1733,
		1,0,0,0,1733,1734,5,119,0,0,1734,253,1,0,0,0,1735,1737,3,256,128,0,1736,
		1735,1,0,0,0,1737,1738,1,0,0,0,1738,1736,1,0,0,0,1738,1739,1,0,0,0,1739,
		255,1,0,0,0,1740,1742,3,356,178,0,1741,1740,1,0,0,0,1741,1742,1,0,0,0,
		1742,1744,1,0,0,0,1743,1745,3,262,131,0,1744,1743,1,0,0,0,1744,1745,1,
		0,0,0,1745,1748,1,0,0,0,1746,1749,3,266,133,0,1747,1749,3,420,210,0,1748,
		1746,1,0,0,0,1748,1747,1,0,0,0,1749,1752,1,0,0,0,1750,1752,3,258,129,0,
		1751,1741,1,0,0,0,1751,1750,1,0,0,0,1752,257,1,0,0,0,1753,1755,3,260,130,
		0,1754,1753,1,0,0,0,1755,1756,1,0,0,0,1756,1754,1,0,0,0,1756,1757,1,0,
		0,0,1757,259,1,0,0,0,1758,1759,7,10,0,0,1759,261,1,0,0,0,1760,1762,3,264,
		132,0,1761,1760,1,0,0,0,1762,1763,1,0,0,0,1763,1761,1,0,0,0,1763,1764,
		1,0,0,0,1764,263,1,0,0,0,1765,1766,7,11,0,0,1766,265,1,0,0,0,1767,1786,
		3,418,209,0,1768,1786,3,268,134,0,1769,1786,3,412,206,0,1770,1776,3,314,
		157,0,1771,1777,3,318,159,0,1772,1773,3,380,190,0,1773,1774,3,76,38,0,
		1774,1775,5,127,0,0,1775,1777,1,0,0,0,1776,1771,1,0,0,0,1776,1772,1,0,
		0,0,1777,1786,1,0,0,0,1778,1786,3,422,211,0,1779,1780,5,101,0,0,1780,1786,
		3,424,212,0,1781,1786,3,404,202,0,1782,1786,3,406,203,0,1783,1786,3,408,
		204,0,1784,1786,3,410,205,0,1785,1767,1,0,0,0,1785,1768,1,0,0,0,1785,1769,
		1,0,0,0,1785,1770,1,0,0,0,1785,1778,1,0,0,0,1785,1779,1,0,0,0,1785,1781,
		1,0,0,0,1785,1782,1,0,0,0,1785,1783,1,0,0,0,1785,1784,1,0,0,0,1786,267,
		1,0,0,0,1787,1793,5,76,0,0,1788,1789,5,75,0,0,1789,1793,5,76,0,0,1790,
		1791,5,76,0,0,1791,1793,5,75,0,0,1792,1787,1,0,0,0,1792,1788,1,0,0,0,1792,
		1790,1,0,0,0,1792,1793,1,0,0,0,1793,1794,1,0,0,0,1794,1802,3,4,2,0,1795,
		1796,3,2,1,0,1796,1797,5,124,0,0,1797,1803,1,0,0,0,1798,1803,3,424,212,
		0,1799,1803,3,416,208,0,1800,1803,3,428,214,0,1801,1803,3,414,207,0,1802,
		1795,1,0,0,0,1802,1798,1,0,0,0,1802,1799,1,0,0,0,1802,1800,1,0,0,0,1802,
		1801,1,0,0,0,1803,269,1,0,0,0,1804,1809,3,272,136,0,1805,1806,5,125,0,
		0,1806,1808,3,272,136,0,1807,1805,1,0,0,0,1808,1811,1,0,0,0,1809,1807,
		1,0,0,0,1809,1810,1,0,0,0,1810,271,1,0,0,0,1811,1809,1,0,0,0,1812,1813,
		3,436,218,0,1813,1814,5,138,0,0,1814,1815,3,28,14,0,1815,273,1,0,0,0,1816,
		1821,3,276,138,0,1817,1818,5,125,0,0,1818,1820,3,276,138,0,1819,1817,1,
		0,0,0,1820,1823,1,0,0,0,1821,1819,1,0,0,0,1821,1822,1,0,0,0,1822,275,1,
		0,0,0,1823,1821,1,0,0,0,1824,1827,3,436,218,0,1825,1826,5,138,0,0,1826,
		1828,3,278,139,0,1827,1825,1,0,0,0,1827,1828,1,0,0,0,1828,277,1,0,0,0,
		1829,1832,3,28,14,0,1830,1832,3,330,165,0,1831,1829,1,0,0,0,1831,1830,
		1,0,0,0,1832,279,1,0,0,0,1833,1836,3,4,2,0,1834,1836,5,101,0,0,1835,1833,
		1,0,0,0,1835,1834,1,0,0,0,1836,281,1,0,0,0,1837,1838,3,2,1,0,1838,283,
		1,0,0,0,1839,1842,3,172,86,0,1840,1842,5,127,0,0,1841,1839,1,0,0,0,1841,
		1840,1,0,0,0,1842,285,1,0,0,0,1843,1850,3,294,147,0,1844,1847,3,288,144,
		0,1845,1846,5,125,0,0,1846,1848,3,294,147,0,1847,1845,1,0,0,0,1847,1848,
		1,0,0,0,1848,1850,1,0,0,0,1849,1843,1,0,0,0,1849,1844,1,0,0,0,1850,287,
		1,0,0,0,1851,1856,3,290,145,0,1852,1853,5,125,0,0,1853,1855,3,290,145,
		0,1854,1852,1,0,0,0,1855,1858,1,0,0,0,1856,1854,1,0,0,0,1856,1857,1,0,
		0,0,1857,289,1,0,0,0,1858,1856,1,0,0,0,1859,1861,3,356,178,0,1860,1859,
		1,0,0,0,1860,1861,1,0,0,0,1861,1863,1,0,0,0,1862,1864,3,292,146,0,1863,
		1862,1,0,0,0,1863,1864,1,0,0,0,1864,1865,1,0,0,0,1865,1868,3,430,215,0,
		1866,1868,5,11,0,0,1867,1860,1,0,0,0,1867,1866,1,0,0,0,1868,291,1,0,0,
		0,1869,1870,7,2,0,0,1870,293,1,0,0,0,1871,1873,3,356,178,0,1872,1871,1,
		0,0,0,1872,1873,1,0,0,0,1873,1874,1,0,0,0,1874,1875,5,72,0,0,1875,1876,
		3,326,163,0,1876,1877,3,436,218,0,1877,295,1,0,0,0,1878,1880,3,356,178,
		0,1879,1878,1,0,0,0,1879,1880,1,0,0,0,1880,1882,1,0,0,0,1881,1883,3,302,
		151,0,1882,1881,1,0,0,0,1882,1883,1,0,0,0,1883,1894,1,0,0,0,1884,1885,
		5,47,0,0,1885,1887,3,304,152,0,1886,1888,3,300,150,0,1887,1886,1,0,0,0,
		1887,1888,1,0,0,0,1888,1895,1,0,0,0,1889,1890,5,81,0,0,1890,1892,3,304,
		152,0,1891,1893,3,298,149,0,1892,1891,1,0,0,0,1892,1893,1,0,0,0,1893,1895,
		1,0,0,0,1894,1884,1,0,0,0,1894,1889,1,0,0,0,1895,297,1,0,0,0,1896,1898,
		3,356,178,0,1897,1896,1,0,0,0,1897,1898,1,0,0,0,1898,1900,1,0,0,0,1899,
		1901,3,302,151,0,1900,1899,1,0,0,0,1900,1901,1,0,0,0,1901,1902,1,0,0,0,
		1902,1903,5,47,0,0,1903,1904,3,304,152,0,1904,299,1,0,0,0,1905,1907,3,
		356,178,0,1906,1905,1,0,0,0,1906,1907,1,0,0,0,1907,1909,1,0,0,0,1908,1910,
		3,302,151,0,1909,1908,1,0,0,0,1909,1910,1,0,0,0,1910,1911,1,0,0,0,1911,
		1912,5,81,0,0,1912,1913,3,304,152,0,1913,301,1,0,0,0,1914,1915,7,12,0,
		0,1915,303,1,0,0,0,1916,1919,3,172,86,0,1917,1919,5,127,0,0,1918,1916,
		1,0,0,0,1918,1917,1,0,0,0,1919,305,1,0,0,0,1920,1922,3,356,178,0,1921,
		1920,1,0,0,0,1921,1922,1,0,0,0,1922,1931,1,0,0,0,1923,1924,5,9,0,0,1924,
		1925,3,172,86,0,1925,1926,3,310,155,0,1926,1932,1,0,0,0,1927,1928,5,77,
		0,0,1928,1929,3,172,86,0,1929,1930,3,308,154,0,1930,1932,1,0,0,0,1931,
		1923,1,0,0,0,1931,1927,1,0,0,0,1932,307,1,0,0,0,1933,1935,3,356,178,0,
		1934,1933,1,0,0,0,1934,1935,1,0,0,0,1935,1936,1,0,0,0,1936,1937,5,9,0,
		0,1937,1938,3,172,86,0,1938,309,1,0,0,0,1939,1941,3,356,178,0,1940,1939,
		1,0,0,0,1940,1941,1,0,0,0,1941,1942,1,0,0,0,1942,1943,5,77,0,0,1943,1944,
		3,172,86,0,1944,311,1,0,0,0,1945,1968,5,128,0,0,1946,1968,5,129,0,0,1947,
		1968,5,136,0,0,1948,1968,5,137,0,0,1949,1968,5,144,0,0,1950,1968,5,145,
		0,0,1951,1968,5,90,0,0,1952,1968,5,40,0,0,1953,1968,5,130,0,0,1954,1968,
		5,131,0,0,1955,1968,5,132,0,0,1956,1968,5,133,0,0,1957,1968,5,134,0,0,
		1958,1968,5,135,0,0,1959,1968,5,161,0,0,1960,1968,3,382,191,0,1961,1968,
		5,149,0,0,1962,1968,5,150,0,0,1963,1968,5,140,0,0,1964,1968,5,139,0,0,
		1965,1968,5,152,0,0,1966,1968,5,151,0,0,1967,1945,1,0,0,0,1967,1946,1,
		0,0,0,1967,1947,1,0,0,0,1967,1948,1,0,0,0,1967,1949,1,0,0,0,1967,1950,
		1,0,0,0,1967,1951,1,0,0,0,1967,1952,1,0,0,0,1967,1953,1,0,0,0,1967,1954,
		1,0,0,0,1967,1955,1,0,0,0,1967,1956,1,0,0,0,1967,1957,1,0,0,0,1967,1958,
		1,0,0,0,1967,1959,1,0,0,0,1967,1960,1,0,0,0,1967,1961,1,0,0,0,1967,1962,
		1,0,0,0,1967,1963,1,0,0,0,1967,1964,1,0,0,0,1967,1965,1,0,0,0,1967,1966,
		1,0,0,0,1968,313,1,0,0,0,1969,1970,7,13,0,0,1970,1971,5,69,0,0,1971,1972,
		3,4,2,0,1972,1973,5,122,0,0,1973,1974,3,430,215,0,1974,1975,5,123,0,0,
		1975,315,1,0,0,0,1976,1977,5,126,0,0,1977,1978,5,16,0,0,1978,1980,5,122,
		0,0,1979,1981,3,24,12,0,1980,1979,1,0,0,0,1980,1981,1,0,0,0,1981,1982,
		1,0,0,0,1982,1983,5,123,0,0,1983,317,1,0,0,0,1984,1987,3,172,86,0,1985,
		1987,5,127,0,0,1986,1984,1,0,0,0,1986,1985,1,0,0,0,1987,319,1,0,0,0,1988,
		1989,5,126,0,0,1989,1990,3,238,119,0,1990,321,1,0,0,0,1991,1995,5,118,
		0,0,1992,1994,3,324,162,0,1993,1992,1,0,0,0,1994,1997,1,0,0,0,1995,1993,
		1,0,0,0,1995,1996,1,0,0,0,1996,1998,1,0,0,0,1997,1995,1,0,0,0,1998,1999,
		5,119,0,0,1999,323,1,0,0,0,2000,2002,3,356,178,0,2001,2000,1,0,0,0,2001,
		2002,1,0,0,0,2002,2004,1,0,0,0,2003,2005,3,262,131,0,2004,2003,1,0,0,0,
		2004,2005,1,0,0,0,2005,2016,1,0,0,0,2006,2017,3,266,133,0,2007,2008,5,
		42,0,0,2008,2010,3,4,2,0,2009,2011,3,376,188,0,2010,2009,1,0,0,0,2011,
		2012,1,0,0,0,2012,2010,1,0,0,0,2012,2013,1,0,0,0,2013,2014,1,0,0,0,2014,
		2015,5,127,0,0,2015,2017,1,0,0,0,2016,2006,1,0,0,0,2016,2007,1,0,0,0,2017,
		325,1,0,0,0,2018,2026,3,6,3,0,2019,2021,7,14,0,0,2020,2019,1,0,0,0,2021,
		2024,1,0,0,0,2022,2020,1,0,0,0,2022,2023,1,0,0,0,2023,2025,1,0,0,0,2024,
		2022,1,0,0,0,2025,2027,3,328,164,0,2026,2022,1,0,0,0,2027,2028,1,0,0,0,
		2028,2026,1,0,0,0,2028,2029,1,0,0,0,2029,327,1,0,0,0,2030,2034,5,120,0,
		0,2031,2033,5,125,0,0,2032,2031,1,0,0,0,2033,2036,1,0,0,0,2034,2032,1,
		0,0,0,2034,2035,1,0,0,0,2035,2037,1,0,0,0,2036,2034,1,0,0,0,2037,2038,
		5,121,0,0,2038,329,1,0,0,0,2039,2051,5,118,0,0,2040,2045,3,278,139,0,2041,
		2042,5,125,0,0,2042,2044,3,278,139,0,2043,2041,1,0,0,0,2044,2047,1,0,0,
		0,2045,2043,1,0,0,0,2045,2046,1,0,0,0,2046,2049,1,0,0,0,2047,2045,1,0,
		0,0,2048,2050,5,125,0,0,2049,2048,1,0,0,0,2049,2050,1,0,0,0,2050,2052,
		1,0,0,0,2051,2040,1,0,0,0,2051,2052,1,0,0,0,2052,2053,1,0,0,0,2053,2054,
		5,119,0,0,2054,331,1,0,0,0,2055,2056,5,139,0,0,2056,2061,3,334,167,0,2057,
		2058,5,125,0,0,2058,2060,3,334,167,0,2059,2057,1,0,0,0,2060,2063,1,0,0,
		0,2061,2059,1,0,0,0,2061,2062,1,0,0,0,2062,2064,1,0,0,0,2063,2061,1,0,
		0,0,2064,2065,5,140,0,0,2065,333,1,0,0,0,2066,2068,3,356,178,0,2067,2066,
		1,0,0,0,2067,2068,1,0,0,0,2068,2070,1,0,0,0,2069,2071,3,336,168,0,2070,
		2069,1,0,0,0,2070,2071,1,0,0,0,2071,2072,1,0,0,0,2072,2073,3,436,218,0,
		2073,335,1,0,0,0,2074,2075,7,15,0,0,2075,337,1,0,0,0,2076,2077,5,126,0,
		0,2077,2078,3,238,119,0,2078,339,1,0,0,0,2079,2083,5,118,0,0,2080,2082,
		3,342,171,0,2081,2080,1,0,0,0,2082,2085,1,0,0,0,2083,2081,1,0,0,0,2083,
		2084,1,0,0,0,2084,2086,1,0,0,0,2085,2083,1,0,0,0,2086,2087,5,119,0,0,2087,
		341,1,0,0,0,2088,2090,3,356,178,0,2089,2088,1,0,0,0,2089,2090,1,0,0,0,
		2090,2092,1,0,0,0,2091,2093,5,65,0,0,2092,2091,1,0,0,0,2092,2093,1,0,0,
		0,2093,2149,1,0,0,0,2094,2096,5,97,0,0,2095,2094,1,0,0,0,2095,2096,1,0,
		0,0,2096,2102,1,0,0,0,2097,2103,5,76,0,0,2098,2099,5,76,0,0,2099,2103,
		5,75,0,0,2100,2101,5,75,0,0,2101,2103,5,76,0,0,2102,2097,1,0,0,0,2102,
		2098,1,0,0,0,2102,2100,1,0,0,0,2102,2103,1,0,0,0,2103,2104,1,0,0,0,2104,
		2124,3,4,2,0,2105,2107,3,436,218,0,2106,2108,3,232,116,0,2107,2106,1,0,
		0,0,2107,2108,1,0,0,0,2108,2109,1,0,0,0,2109,2111,5,122,0,0,2110,2112,
		3,286,143,0,2111,2110,1,0,0,0,2111,2112,1,0,0,0,2112,2113,1,0,0,0,2113,
		2115,5,123,0,0,2114,2116,3,240,120,0,2115,2114,1,0,0,0,2115,2116,1,0,0,
		0,2116,2117,1,0,0,0,2117,2118,5,127,0,0,2118,2125,1,0,0,0,2119,2120,3,
		436,218,0,2120,2121,5,118,0,0,2121,2122,3,344,172,0,2122,2123,5,119,0,
		0,2123,2125,1,0,0,0,2124,2105,1,0,0,0,2124,2119,1,0,0,0,2125,2150,1,0,
		0,0,2126,2128,5,97,0,0,2127,2126,1,0,0,0,2127,2128,1,0,0,0,2128,2129,1,
		0,0,0,2129,2130,5,101,0,0,2130,2132,3,436,218,0,2131,2133,3,232,116,0,
		2132,2131,1,0,0,0,2132,2133,1,0,0,0,2133,2134,1,0,0,0,2134,2136,5,122,
		0,0,2135,2137,3,286,143,0,2136,2135,1,0,0,0,2136,2137,1,0,0,0,2137,2138,
		1,0,0,0,2138,2140,5,123,0,0,2139,2141,3,240,120,0,2140,2139,1,0,0,0,2140,
		2141,1,0,0,0,2141,2142,1,0,0,0,2142,2143,5,127,0,0,2143,2150,1,0,0,0,2144,
		2145,5,37,0,0,2145,2146,3,4,2,0,2146,2147,3,436,218,0,2147,2148,5,127,
		0,0,2148,2150,1,0,0,0,2149,2095,1,0,0,0,2149,2127,1,0,0,0,2149,2144,1,
		0,0,0,2150,343,1,0,0,0,2151,2153,3,356,178,0,2152,2151,1,0,0,0,2152,2153,
		1,0,0,0,2153,2172,1,0,0,0,2154,2155,5,47,0,0,2155,2161,5,127,0,0,2156,
		2158,3,356,178,0,2157,2156,1,0,0,0,2157,2158,1,0,0,0,2158,2159,1,0,0,0,
		2159,2160,5,81,0,0,2160,2162,5,127,0,0,2161,2157,1,0,0,0,2161,2162,1,0,
		0,0,2162,2173,1,0,0,0,2163,2164,5,81,0,0,2164,2170,5,127,0,0,2165,2167,
		3,356,178,0,2166,2165,1,0,0,0,2166,2167,1,0,0,0,2167,2168,1,0,0,0,2168,
		2169,5,47,0,0,2169,2171,5,127,0,0,2170,2166,1,0,0,0,2170,2171,1,0,0,0,
		2171,2173,1,0,0,0,2172,2154,1,0,0,0,2172,2163,1,0,0,0,2173,345,1,0,0,0,
		2174,2175,5,126,0,0,2175,2176,3,4,2,0,2176,347,1,0,0,0,2177,2189,5,118,
		0,0,2178,2183,3,350,175,0,2179,2180,5,125,0,0,2180,2182,3,350,175,0,2181,
		2179,1,0,0,0,2182,2185,1,0,0,0,2183,2181,1,0,0,0,2183,2184,1,0,0,0,2184,
		2187,1,0,0,0,2185,2183,1,0,0,0,2186,2188,5,125,0,0,2187,2186,1,0,0,0,2187,
		2188,1,0,0,0,2188,2190,1,0,0,0,2189,2178,1,0,0,0,2189,2190,1,0,0,0,2190,
		2191,1,0,0,0,2191,2192,5,119,0,0,2192,349,1,0,0,0,2193,2195,3,356,178,
		0,2194,2193,1,0,0,0,2194,2195,1,0,0,0,2195,2196,1,0,0,0,2196,2199,3,436,
		218,0,2197,2198,5,138,0,0,2198,2200,3,28,14,0,2199,2197,1,0,0,0,2199,2200,
		1,0,0,0,2200,351,1,0,0,0,2201,2202,5,120,0,0,2202,2203,3,354,177,0,2203,
		2204,5,126,0,0,2204,2206,3,362,181,0,2205,2207,5,125,0,0,2206,2205,1,0,
		0,0,2206,2207,1,0,0,0,2207,2208,1,0,0,0,2208,2209,5,121,0,0,2209,353,1,
		0,0,0,2210,2213,3,402,201,0,2211,2213,3,436,218,0,2212,2210,1,0,0,0,2212,
		2211,1,0,0,0,2213,355,1,0,0,0,2214,2216,3,358,179,0,2215,2214,1,0,0,0,
		2216,2217,1,0,0,0,2217,2215,1,0,0,0,2217,2218,1,0,0,0,2218,357,1,0,0,0,
		2219,2223,5,120,0,0,2220,2221,3,360,180,0,2221,2222,5,126,0,0,2222,2224,
		1,0,0,0,2223,2220,1,0,0,0,2223,2224,1,0,0,0,2224,2225,1,0,0,0,2225,2227,
		3,362,181,0,2226,2228,5,125,0,0,2227,2226,1,0,0,0,2227,2228,1,0,0,0,2228,
		2229,1,0,0,0,2229,2230,5,121,0,0,2230,359,1,0,0,0,2231,2234,3,402,201,
		0,2232,2234,3,436,218,0,2233,2231,1,0,0,0,2233,2232,1,0,0,0,2234,361,1,
		0,0,0,2235,2240,3,364,182,0,2236,2237,5,125,0,0,2237,2239,3,364,182,0,
		2238,2236,1,0,0,0,2239,2242,1,0,0,0,2240,2238,1,0,0,0,2240,2241,1,0,0,
		0,2241,363,1,0,0,0,2242,2240,1,0,0,0,2243,2256,3,2,1,0,2244,2253,5,122,
		0,0,2245,2250,3,366,183,0,2246,2247,5,125,0,0,2247,2249,3,366,183,0,2248,
		2246,1,0,0,0,2249,2252,1,0,0,0,2250,2248,1,0,0,0,2250,2251,1,0,0,0,2251,
		2254,1,0,0,0,2252,2250,1,0,0,0,2253,2245,1,0,0,0,2253,2254,1,0,0,0,2254,
		2255,1,0,0,0,2255,2257,5,123,0,0,2256,2244,1,0,0,0,2256,2257,1,0,0,0,2257,
		365,1,0,0,0,2258,2259,3,436,218,0,2259,2260,5,126,0,0,2260,2262,1,0,0,
		0,2261,2258,1,0,0,0,2261,2262,1,0,0,0,2262,2263,1,0,0,0,2263,2264,3,28,
		14,0,2264,367,1,0,0,0,2265,2268,3,12,6,0,2266,2268,3,20,10,0,2267,2265,
		1,0,0,0,2267,2266,1,0,0,0,2268,2273,1,0,0,0,2269,2272,3,328,164,0,2270,
		2272,5,141,0,0,2271,2269,1,0,0,0,2271,2270,1,0,0,0,2272,2275,1,0,0,0,2273,
		2271,1,0,0,0,2273,2274,1,0,0,0,2274,2276,1,0,0,0,2275,2273,1,0,0,0,2276,
		2277,5,130,0,0,2277,2281,1,0,0,0,2278,2279,5,101,0,0,2279,2281,5,130,0,
		0,2280,2267,1,0,0,0,2280,2278,1,0,0,0,2281,369,1,0,0,0,2282,2287,3,372,
		186,0,2283,2284,5,125,0,0,2284,2286,3,372,186,0,2285,2283,1,0,0,0,2286,
		2289,1,0,0,0,2287,2285,1,0,0,0,2287,2288,1,0,0,0,2288,371,1,0,0,0,2289,
		2287,1,0,0,0,2290,2291,3,436,218,0,2291,2292,5,138,0,0,2292,2293,3,374,
		187,0,2293,373,1,0,0,0,2294,2296,5,133,0,0,2295,2294,1,0,0,0,2295,2296,
		1,0,0,0,2296,2297,1,0,0,0,2297,2300,3,28,14,0,2298,2300,3,378,189,0,2299,
		2295,1,0,0,0,2299,2298,1,0,0,0,2300,375,1,0,0,0,2301,2302,3,436,218,0,
		2302,2303,5,120,0,0,2303,2304,3,28,14,0,2304,2305,5,121,0,0,2305,377,1,
		0,0,0,2306,2307,5,84,0,0,2307,2308,3,4,2,0,2308,2309,5,120,0,0,2309,2310,
		3,28,14,0,2310,2311,5,121,0,0,2311,2336,1,0,0,0,2312,2314,5,84,0,0,2313,
		2315,3,4,2,0,2314,2313,1,0,0,0,2314,2315,1,0,0,0,2315,2316,1,0,0,0,2316,
		2318,5,120,0,0,2317,2319,3,28,14,0,2318,2317,1,0,0,0,2318,2319,1,0,0,0,
		2319,2320,1,0,0,0,2320,2321,5,121,0,0,2321,2322,5,118,0,0,2322,2327,3,
		28,14,0,2323,2324,5,125,0,0,2324,2326,3,28,14,0,2325,2323,1,0,0,0,2326,
		2329,1,0,0,0,2327,2325,1,0,0,0,2327,2328,1,0,0,0,2328,2331,1,0,0,0,2329,
		2327,1,0,0,0,2330,2332,5,125,0,0,2331,2330,1,0,0,0,2331,2332,1,0,0,0,2332,
		2333,1,0,0,0,2333,2334,5,119,0,0,2334,2336,1,0,0,0,2335,2306,1,0,0,0,2335,
		2312,1,0,0,0,2336,379,1,0,0,0,2337,2338,5,138,0,0,2338,2339,5,140,0,0,
		2339,2340,4,190,1,1,2340,381,1,0,0,0,2341,2342,5,140,0,0,2342,2343,5,140,
		0,0,2343,2344,4,191,2,1,2344,383,1,0,0,0,2345,2346,5,140,0,0,2346,2347,
		5,152,0,0,2347,2348,4,192,3,1,2348,385,1,0,0,0,2349,2358,3,388,194,0,2350,
		2358,3,390,195,0,2351,2358,5,109,0,0,2352,2358,5,110,0,0,2353,2358,5,111,
		0,0,2354,2358,5,112,0,0,2355,2358,5,113,0,0,2356,2358,5,66,0,0,2357,2349,
		1,0,0,0,2357,2350,1,0,0,0,2357,2351,1,0,0,0,2357,2352,1,0,0,0,2357,2353,
		1,0,0,0,2357,2354,1,0,0,0,2357,2355,1,0,0,0,2357,2356,1,0,0,0,2358,387,
		1,0,0,0,2359,2360,7,16,0,0,2360,389,1,0,0,0,2361,2366,3,392,196,0,2362,
		2366,3,394,197,0,2363,2366,5,114,0,0,2364,2366,5,115,0,0,2365,2361,1,0,
		0,0,2365,2362,1,0,0,0,2365,2363,1,0,0,0,2365,2364,1,0,0,0,2366,391,1,0,
		0,0,2367,2371,5,116,0,0,2368,2370,3,396,198,0,2369,2368,1,0,0,0,2370,2373,
		1,0,0,0,2371,2369,1,0,0,0,2371,2372,1,0,0,0,2372,2374,1,0,0,0,2373,2371,
		1,0,0,0,2374,2375,5,169,0,0,2375,393,1,0,0,0,2376,2380,5,117,0,0,2377,
		2379,3,398,199,0,2378,2377,1,0,0,0,2379,2382,1,0,0,0,2380,2378,1,0,0,0,
		2380,2381,1,0,0,0,2381,2383,1,0,0,0,2382,2380,1,0,0,0,2383,2384,5,169,
		0,0,2384,395,1,0,0,0,2385,2390,3,400,200,0,2386,2390,5,165,0,0,2387,2390,
		5,167,0,0,2388,2390,5,170,0,0,2389,2385,1,0,0,0,2389,2386,1,0,0,0,2389,
		2387,1,0,0,0,2389,2388,1,0,0,0,2390,397,1,0,0,0,2391,2396,3,400,200,0,
		2392,2396,5,165,0,0,2393,2396,5,168,0,0,2394,2396,5,171,0,0,2395,2391,
		1,0,0,0,2395,2392,1,0,0,0,2395,2393,1,0,0,0,2395,2394,1,0,0,0,2396,399,
		1,0,0,0,2397,2402,3,28,14,0,2398,2399,5,125,0,0,2399,2401,3,28,14,0,2400,
		2398,1,0,0,0,2401,2404,1,0,0,0,2402,2400,1,0,0,0,2402,2403,1,0,0,0,2403,
		2411,1,0,0,0,2404,2402,1,0,0,0,2405,2407,5,126,0,0,2406,2408,5,173,0,0,
		2407,2406,1,0,0,0,2408,2409,1,0,0,0,2409,2407,1,0,0,0,2409,2410,1,0,0,
		0,2410,2412,1,0,0,0,2411,2405,1,0,0,0,2411,2412,1,0,0,0,2412,401,1,0,0,
		0,2413,2414,7,17,0,0,2414,403,1,0,0,0,2415,2417,7,18,0,0,2416,2415,1,0,
		0,0,2416,2417,1,0,0,0,2417,2418,1,0,0,0,2418,2419,5,87,0,0,2419,2421,3,
		436,218,0,2420,2422,3,232,116,0,2421,2420,1,0,0,0,2421,2422,1,0,0,0,2422,
		2424,1,0,0,0,2423,2425,3,320,160,0,2424,2423,1,0,0,0,2424,2425,1,0,0,0,
		2425,2427,1,0,0,0,2426,2428,3,240,120,0,2427,2426,1,0,0,0,2427,2428,1,
		0,0,0,2428,2429,1,0,0,0,2429,2431,3,322,161,0,2430,2432,5,127,0,0,2431,
		2430,1,0,0,0,2431,2432,1,0,0,0,2432,405,1,0,0,0,2433,2434,5,54,0,0,2434,
		2436,3,436,218,0,2435,2437,3,332,166,0,2436,2435,1,0,0,0,2436,2437,1,0,
		0,0,2437,2439,1,0,0,0,2438,2440,3,338,169,0,2439,2438,1,0,0,0,2439,2440,
		1,0,0,0,2440,2442,1,0,0,0,2441,2443,3,240,120,0,2442,2441,1,0,0,0,2442,
		2443,1,0,0,0,2443,2444,1,0,0,0,2444,2446,3,252,126,0,2445,2447,5,127,0,
		0,2446,2445,1,0,0,0,2446,2447,1,0,0,0,2447,407,1,0,0,0,2448,2449,5,35,
		0,0,2449,2451,3,436,218,0,2450,2452,3,346,173,0,2451,2450,1,0,0,0,2451,
		2452,1,0,0,0,2452,2453,1,0,0,0,2453,2455,3,348,174,0,2454,2456,5,127,0,
		0,2455,2454,1,0,0,0,2455,2456,1,0,0,0,2456,409,1,0,0,0,2457,2458,5,29,
		0,0,2458,2459,3,280,140,0,2459,2461,3,436,218,0,2460,2462,3,332,166,0,
		2461,2460,1,0,0,0,2461,2462,1,0,0,0,2462,2463,1,0,0,0,2463,2465,5,122,
		0,0,2464,2466,3,286,143,0,2465,2464,1,0,0,0,2465,2466,1,0,0,0,2466,2467,
		1,0,0,0,2467,2469,5,123,0,0,2468,2470,3,240,120,0,2469,2468,1,0,0,0,2469,
		2470,1,0,0,0,2470,2471,1,0,0,0,2471,2472,5,127,0,0,2472,411,1,0,0,0,2473,
		2474,5,37,0,0,2474,2483,3,4,2,0,2475,2476,3,274,137,0,2476,2477,5,127,
		0,0,2477,2484,1,0,0,0,2478,2479,3,282,141,0,2479,2480,5,118,0,0,2480,2481,
		3,306,153,0,2481,2482,5,119,0,0,2482,2484,1,0,0,0,2483,2475,1,0,0,0,2483,
		2478,1,0,0,0,2484,413,1,0,0,0,2485,2486,3,274,137,0,2486,2487,5,127,0,
		0,2487,415,1,0,0,0,2488,2502,3,282,141,0,2489,2490,5,118,0,0,2490,2491,
		3,296,148,0,2491,2496,5,119,0,0,2492,2493,5,138,0,0,2493,2494,3,278,139,
		0,2494,2495,5,127,0,0,2495,2497,1,0,0,0,2496,2492,1,0,0,0,2496,2497,1,
		0,0,0,2497,2503,1,0,0,0,2498,2499,3,380,190,0,2499,2500,3,76,38,0,2500,
		2501,5,127,0,0,2501,2503,1,0,0,0,2502,2489,1,0,0,0,2502,2498,1,0,0,0,2503,
		417,1,0,0,0,2504,2505,5,25,0,0,2505,2506,3,4,2,0,2506,2507,3,270,135,0,
		2507,2508,5,127,0,0,2508,419,1,0,0,0,2509,2510,5,137,0,0,2510,2511,3,436,
		218,0,2511,2512,5,122,0,0,2512,2513,5,123,0,0,2513,2514,3,318,159,0,2514,
		421,1,0,0,0,2515,2516,3,436,218,0,2516,2518,5,122,0,0,2517,2519,3,286,
		143,0,2518,2517,1,0,0,0,2518,2519,1,0,0,0,2519,2520,1,0,0,0,2520,2522,
		5,123,0,0,2521,2523,3,316,158,0,2522,2521,1,0,0,0,2522,2523,1,0,0,0,2523,
		2524,1,0,0,0,2524,2525,3,318,159,0,2525,423,1,0,0,0,2526,2528,3,426,213,
		0,2527,2529,3,232,116,0,2528,2527,1,0,0,0,2528,2529,1,0,0,0,2529,2530,
		1,0,0,0,2530,2532,5,122,0,0,2531,2533,3,286,143,0,2532,2531,1,0,0,0,2532,
		2533,1,0,0,0,2533,2534,1,0,0,0,2534,2536,5,123,0,0,2535,2537,3,240,120,
		0,2536,2535,1,0,0,0,2536,2537,1,0,0,0,2537,2543,1,0,0,0,2538,2544,3,284,
		142,0,2539,2540,3,380,190,0,2540,2541,3,76,38,0,2541,2542,5,127,0,0,2542,
		2544,1,0,0,0,2543,2538,1,0,0,0,2543,2539,1,0,0,0,2544,425,1,0,0,0,2545,
		2551,3,436,218,0,2546,2547,3,436,218,0,2547,2548,5,142,0,0,2548,2549,3,
		436,218,0,2549,2551,1,0,0,0,2550,2545,1,0,0,0,2550,2546,1,0,0,0,2551,2559,
		1,0,0,0,2552,2554,3,22,11,0,2553,2552,1,0,0,0,2553,2554,1,0,0,0,2554,2555,
		1,0,0,0,2555,2556,5,124,0,0,2556,2558,3,436,218,0,2557,2553,1,0,0,0,2558,
		2561,1,0,0,0,2559,2557,1,0,0,0,2559,2560,1,0,0,0,2560,427,1,0,0,0,2561,
		2559,1,0,0,0,2562,2563,5,69,0,0,2563,2564,3,312,156,0,2564,2566,5,122,
		0,0,2565,2567,5,52,0,0,2566,2565,1,0,0,0,2566,2567,1,0,0,0,2567,2568,1,
		0,0,0,2568,2574,3,430,215,0,2569,2571,5,125,0,0,2570,2572,5,52,0,0,2571,
		2570,1,0,0,0,2571,2572,1,0,0,0,2572,2573,1,0,0,0,2573,2575,3,430,215,0,
		2574,2569,1,0,0,0,2574,2575,1,0,0,0,2575,2576,1,0,0,0,2576,2582,5,123,
		0,0,2577,2583,3,318,159,0,2578,2579,3,380,190,0,2579,2580,3,76,38,0,2580,
		2581,5,127,0,0,2581,2583,1,0,0,0,2582,2577,1,0,0,0,2582,2578,1,0,0,0,2583,
		429,1,0,0,0,2584,2585,3,4,2,0,2585,2588,3,436,218,0,2586,2587,5,138,0,
		0,2587,2589,3,28,14,0,2588,2586,1,0,0,0,2588,2589,1,0,0,0,2589,431,1,0,
		0,0,2590,2592,5,122,0,0,2591,2593,3,24,12,0,2592,2591,1,0,0,0,2592,2593,
		1,0,0,0,2593,2594,1,0,0,0,2594,2595,5,123,0,0,2595,433,1,0,0,0,2596,2598,
		5,122,0,0,2597,2599,3,24,12,0,2598,2597,1,0,0,0,2598,2599,1,0,0,0,2599,
		2600,1,0,0,0,2600,2602,5,123,0,0,2601,2603,3,90,45,0,2602,2601,1,0,0,0,
		2602,2603,1,0,0,0,2603,435,1,0,0,0,2604,2638,5,107,0,0,2605,2638,5,9,0,
		0,2606,2638,5,10,0,0,2607,2638,5,11,0,0,2608,2638,5,13,0,0,2609,2638,5,
		14,0,0,2610,2638,5,15,0,0,2611,2638,5,19,0,0,2612,2614,3,260,130,0,2613,
		2612,1,0,0,0,2614,2615,1,0,0,0,2615,2613,1,0,0,0,2615,2616,1,0,0,0,2616,
		2638,1,0,0,0,2617,2638,5,30,0,0,2618,2638,5,33,0,0,2619,2638,5,36,0,0,
		2620,2638,5,46,0,0,2621,2638,5,47,0,0,2622,2638,5,49,0,0,2623,2638,5,56,
		0,0,2624,2638,5,58,0,0,2625,2638,5,59,0,0,2626,2638,5,63,0,0,2627,2638,
		5,68,0,0,2628,2638,5,70,0,0,2629,2638,5,77,0,0,2630,2638,5,80,0,0,2631,
		2638,5,81,0,0,2632,2638,5,96,0,0,2633,2638,5,100,0,0,2634,2638,5,103,0,
		0,2635,2638,5,104,0,0,2636,2638,5,106,0,0,2637,2604,1,0,0,0,2637,2605,
		1,0,0,0,2637,2606,1,0,0,0,2637,2607,1,0,0,0,2637,2608,1,0,0,0,2637,2609,
		1,0,0,0,2637,2610,1,0,0,0,2637,2611,1,0,0,0,2637,2613,1,0,0,0,2637,2617,
		1,0,0,0,2637,2618,1,0,0,0,2637,2619,1,0,0,0,2637,2620,1,0,0,0,2637,2621,
		1,0,0,0,2637,2622,1,0,0,0,2637,2623,1,0,0,0,2637,2624,1,0,0,0,2637,2625,
		1,0,0,0,2637,2626,1,0,0,0,2637,2627,1,0,0,0,2637,2628,1,0,0,0,2637,2629,
		1,0,0,0,2637,2630,1,0,0,0,2637,2631,1,0,0,0,2637,2632,1,0,0,0,2637,2633,
		1,0,0,0,2637,2634,1,0,0,0,2637,2635,1,0,0,0,2637,2636,1,0,0,0,2638,437,
		1,0,0,0,342,439,442,445,450,454,457,463,466,471,475,482,484,492,500,506,
		510,515,525,533,543,549,552,557,560,566,571,581,594,602,608,610,617,625,
		633,641,649,657,667,669,675,680,688,696,704,706,709,716,721,728,732,734,
		758,767,772,776,784,787,792,796,800,806,819,825,837,841,846,850,856,864,
		873,891,894,899,902,917,923,927,933,938,941,949,957,968,973,978,980,989,
		997,1004,1012,1016,1025,1030,1032,1041,1049,1053,1058,1060,1065,1069,1076,
		1084,1086,1090,1093,1096,1104,1114,1131,1138,1142,1152,1157,1164,1173,
		1178,1185,1197,1208,1216,1221,1230,1240,1249,1255,1260,1264,1268,1272,
		1276,1283,1291,1304,1314,1336,1340,1344,1349,1369,1374,1379,1386,1389,
		1411,1423,1427,1435,1445,1452,1456,1461,1464,1469,1477,1482,1489,1495,
		1503,1511,1514,1521,1528,1532,1535,1541,1545,1551,1565,1571,1578,1583,
		1586,1589,1596,1606,1628,1633,1637,1640,1643,1649,1655,1663,1669,1679,
		1687,1693,1704,1708,1710,1715,1722,1731,1738,1741,1744,1748,1751,1756,
		1763,1776,1785,1792,1802,1809,1821,1827,1831,1835,1841,1847,1849,1856,
		1860,1863,1867,1872,1879,1882,1887,1892,1894,1897,1900,1906,1909,1918,
		1921,1931,1934,1940,1967,1980,1986,1995,2001,2004,2012,2016,2022,2028,
		2034,2045,2049,2051,2061,2067,2070,2083,2089,2092,2095,2102,2107,2111,
		2115,2124,2127,2132,2136,2140,2149,2152,2157,2161,2166,2170,2172,2183,
		2187,2189,2194,2199,2206,2212,2217,2223,2227,2233,2240,2250,2253,2256,
		2261,2267,2271,2273,2280,2287,2295,2299,2314,2318,2327,2331,2335,2357,
		2365,2371,2380,2389,2395,2402,2409,2411,2416,2421,2424,2427,2431,2436,
		2439,2442,2446,2451,2455,2461,2465,2469,2483,2496,2502,2518,2522,2528,
		2532,2536,2543,2550,2553,2559,2566,2571,2574,2582,2588,2592,2598,2602,
		2615,2637
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace NotCCode
